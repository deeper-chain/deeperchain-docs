{
    "componentChunkName": "component---src-templates-tut-template-tsx",
    "path": "/tutorials/v3/cumulus/start-relay/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/tutorials/v3/cumulus/start-relay","title":"Start a Relay Chain","hideNav":null,"difficulty":3,"duration":"3 Hours","relevantSkills":["Rust","Parachains","Cumulus","XCMP"],"section":"tutorials","category":"parachains"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Start a Relay Chain\",\n  \"slug\": \"/tutorials/v3/cumulus/start-relay\",\n  \"version\": \"polkadot-0.9.10\",\n  \"section\": \"tutorials\",\n  \"category\": \"parachains\",\n  \"duration\": \"3 Hours\",\n  \"difficulty\": 3,\n  \"keywords\": \"cumulus, relay chain, parachain, parathread, paraid, template, rococo, xcm, xcmp, collator\",\n  \"relevantSkills\": [\"Rust\", \"Parachains\", \"Cumulus\", \"XCMP\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TutorialObjective = makeShortcode(\"TutorialObjective\");\nvar Message = makeShortcode(\"Message\");\nvar ExternalLink = makeShortcode(\"ExternalLink\");\nvar AccentButton = makeShortcode(\"AccentButton\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"before-you-begin\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#before-you-begin\",\n    \"aria-label\": \"before you begin permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Before you begin\"), mdx(\"p\", null, \"In this tutorial you will start a Polkadot-like chain (the relay chain), use\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/cumulus\"\n  }, \"Cumulus\"), \" to create your own parachain, and connect it to the\\nrelay chain all in a local testnet environment.\"), mdx(\"p\", null, \"If you aren't familiar with the concept of parachains, please learn about them first \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"before\"), \"\\ncontinuing:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://wiki.polkadot.network/docs/learn-parachains\"\n  }, \"Parachain Basics\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://polkadot.network/the-path-of-a-parachain-block/\"\n  }, \"The Path of a Parachain Block\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://wiki.polkadot.network/docs/build-build-with-polkadot\"\n  }, \"Parachain Development Overview\"))), mdx(\"p\", null, \"If you are here \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"without\"), \" any former Substrate experience, you will likely not be able to\\nunderstand or complete this tutorial. We assume you have completed these tutorials:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/tutorials/v3/create-your-first-substrate-chain\"\n  }, \"Create Your First Substrate Chain\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/tutorials/v3/private-network\"\n  }, \"Start a Private Network\"))), mdx(\"p\", null, \"With those complete, let's dive in!\"), mdx(\"h2\", {\n    \"id\": \"what-you-will-be-doing\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#what-you-will-be-doing\",\n    \"aria-label\": \"what you will be doing permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"What you will be doing\"), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '1. Hardware and software requirements',\n      url: '#hardware-and-software-requirements'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '2. Build your nodes',\n      url: '#build-your-nodes'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '3. Parachain node template overview',\n      url: '#parachain-node-template-overview'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '4. Relay chain specification',\n      url: '#relay-chain-specification'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '5. Start your relay chain ',\n      url: '#start-your-relay-chain'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '6. Create a custom relay chain spec (optional)',\n      url: '#create-a-custom-relay-chain-spec-optional'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(\"h2\", {\n    \"id\": \"learning-outcomes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#learning-outcomes\",\n    \"aria-label\": \"learning outcomes permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Learning outcomes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set up your parachain build environment\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Start a relay chain\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Customize a relay chain specification\")), mdx(\"h2\", {\n    \"id\": \"hardware-and-software-requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#hardware-and-software-requirements\",\n    \"aria-label\": \"hardware and software requirements permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Hardware and software requirements\"), mdx(Message, {\n    type: \"yellow\",\n    title: \"Hardware requirements\",\n    text: \"\\nCompiling this project is a resource intensive process! We suggest using a machine with\\n**no less than**:\\n\\n\\n- 8 GB of RAM (16 GB is suggested)\\n- 4 CPU cores (8 cores are suggested)\\n- 50 GB of free HDD/SSD space\\n\\n\\nWithout the minimal RAM here, you are likely run out of memory resulting in a `SIGKILL`\\nerror during the compilation process, generally happens on building the `polkadot-service`\\ncrate. So be sure to monitor your RAM usage with tools like [htop](https://htop.dev/) and look out\\nas swap memory starting to be used.\\n\",\n    mdxType: \"Message\"\n  }), mdx(\"h3\", {\n    \"id\": \"build-with-underpowered-hardware\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#build-with-underpowered-hardware\",\n    \"aria-label\": \"build with underpowered hardware permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Build with underpowered hardware\"), mdx(\"p\", null, \"If you \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"cannot\")), \" find a machine with the minimums here, try the following solutions which trade\\nlonger build times for more limited memory usage.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use less threads: cargo \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-j\"), \" flag specifies the number of threads used to build. Try to use\\none less than the CPU cores your machine has.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use cargo \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://doc.rust-lang.org/cargo/reference/profiles.html#codegen-units\"\n  }, \"codegen units\"), \"\\nfeature makes more optimized builds with less ram, but \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"much\"), \" longer compile times.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# set the number of cores/threads to compile (used to build cumulus/polkadot on rpi 3)\\ncargo build --release -j 1\\n# use less codegen units\\nRUSTFLAGS=\\\"-C codegen-units=1\\\" cargo build --release\\n\")), mdx(\"h3\", {\n    \"id\": \"software-versioning\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#software-versioning\",\n    \"aria-label\": \"software versioning permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Software versioning\"), mdx(\"p\", null, \"This tutorial has been tested on:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/paritytech/polkadot/tree/v0.9.10\"\n  }, \"Polkadot \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"v0.9.10\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-parachain-template/tree/polkadot-v0.9.10\"\n  }, \"Substrate Parachain Template \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"polkadot-v0.9.10\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/polkadot-js/apps/commit/1073f1b79bf0aec1c853441e3bbac614defce76e\"\n  }, \"Polkadot-JS Apps \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"v.096.2-34\")), \".\\nIt is generally expected that the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://polkadot.js.org/apps\"\n  }, \"hosted Polkadot-JS Apps\"), \"\\nshould work. If you have issues, build and run this UI yourself at this tagged version/commit.\")), mdx(Message, {\n    type: \"red\",\n    title: \"Exact Versions Matter\",\n    text: \"\\nYou **must** use the _exact_ versions set forth in this tutorial to ensure that you do not run into\\nconflicts.\\n\\nAt the moment, parachains are _very tightly coupled_ with the relay chain codebase they are\\nconnecting to. To have the least amount of hiccups, be sure to use the corresponding tagged\\nversion of Polkadot and Parachain Template when working on this tutorial. So if you are using\\n[**Polkadot `v0.9.10`**](https://github.com/paritytech/polkadot/tree/v0.9.10), use the equivalent\\nversion of [**Parachain Template `polkadot-v0.9.10`**](https://github.com/substrate-developer-hub/substrate-parachain-template/tree/polkadot-v0.9.10).\\n  \",\n    mdxType: \"Message\"\n  }), mdx(\"p\", null, \"We're doing our best to keep the Parachain Template and this tutorial updated presently\\nwith the \", mdx(ExternalLink, {\n    url: \"https://github.com/paritytech/polkadot/releases\",\n    mdxType: \"ExternalLink\"\n  }, \"latest release of Polkadot.\")), mdx(Message, {\n    type: \"green\",\n    title: \"Join the chat\",\n    text: \"\\nPlease join the\\n[Parachain Technical matrix channel](https://matrix.to/#/#parachain-technical:matrix.parity.io)\\nto report any issues you run into and get further support.\\n\",\n    mdxType: \"Message\"\n  }), mdx(\"h2\", {\n    \"id\": \"build-your-nodes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#build-your-nodes\",\n    \"aria-label\": \"build your nodes permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Build your nodes\"), mdx(\"p\", null, \"In case you haven't, please follow the instructions to\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/getting-started/overview\"\n  }, \"setup a local development environment\"), \" for Substrate.\"), mdx(\"h3\", {\n    \"id\": \"building-the-relay-chain-node\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#building-the-relay-chain-node\",\n    \"aria-label\": \"building the relay chain node permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Building the relay chain node\"), mdx(\"p\", null, \"Polkadot network will serve as our relay chain in this workshop. So clone the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Polkadot\"), \"\\nrepository and build the node:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Clone the Polkadot Repository\\ngit clone https://github.com/paritytech/polkadot.git\\n\\n# Switch into the Polkadot directory\\ncd polkadot\\n\\n# Checkout the proper commit\\ngit checkout v0.9.10\\n\\n# Build the relay chain Node\\ncargo build --release\\n\\n# Check if the help page prints to ensure the node is built correctly\\n./target/release/polkadot --help\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"After you start the compilation, it will take a while (30 mins to 60 mins) to complete. So go\\nahead and continue to read through the rest of the workshop during the wait \\uD83D\\uDE09\")), mdx(\"p\", null, \"If the help page is printed, you have succeeded in building a Polkadot node.\"), mdx(\"h3\", {\n    \"id\": \"building-the-parachain-template\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#building-the-parachain-template\",\n    \"aria-label\": \"building the parachain template permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Building the parachain template\"), mdx(\"p\", null, \"We will use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-parachain-template\"\n  }, \"Substrate Parachain Template\"), \"\\nto launch our first parachain and make cross-chain asset transfers. The Parachain Template is\\nsimilar but not identical to the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-node-template\"\n  }, \"Node Template\"), \".\\nLater, we will use this Parachain Template as the starting point for developing our own parachains.\"), mdx(\"p\", null, \"In a new terminal window:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Clone the Parachain Template\\ngit clone https://github.com/substrate-developer-hub/substrate-parachain-template\\n\\n# Switch into the Parachain Template directory\\ncd substrate-parachain-template\\n\\n# Checkout the proper commit\\ngit checkout polkadot-v0.9.10\\n\\n# Build the parachain template collator\\ncargo build --release\\n\\n# Check if the help page prints to ensure the node is built correctly\\n./target/release/parachain-collator --help\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Again, this will take 30 to 60 mins to complete.\")), mdx(\"p\", null, \"If the help page is printed, you have succeeded in building a Cumulus-based parachain collator.\"), mdx(\"h2\", {\n    \"id\": \"parachain-node-template-overview\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#parachain-node-template-overview\",\n    \"aria-label\": \"parachain node template overview permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Parachain node template overview\"), mdx(\"p\", null, \"Substrate developers who are familiar with the Substrate Node Template will find the Substrate\\nParachain Template familiar. They have the same general structure featuring \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"runtime\"), \", and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pallets\"), \" directories. Their runtimes are similar and feature many of the same pallets. Apart from\\na few new traits, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pallet-template\"), \" itself is essentially identical. Many of the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/tutorials/v3\"\n  }, \"tutorials\"), \" can be used with few modifications on the Parachain Template.\"), mdx(\"p\", null, \"The similarities between these two templates should give you confidence that if you've built a\\nSubstrate chain, you will have no problem building a parachain!\"), mdx(\"h3\", {\n    \"id\": \"differences-from-the-node-template\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#differences-from-the-node-template\",\n    \"aria-label\": \"differences from the node template permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Differences from the node template\"), mdx(\"p\", null, \"There are, however, a few important differences between the two templates that are worth observing at\\nthe outset.\"), mdx(\"h4\", null, \"Parachain info pallet\"), mdx(\"p\", null, \"Parachain Template runtime (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-parachain-template/blob/latest/runtime/Cargo.toml\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"runtime/Cargo.toml\")), \")\\nhas integrated \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://paritytech.github.io/cumulus/parachain_info/pallet/index.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"parachain-info\"), \" pallet\"), \" in.\\nThis pallet is designed to inject information about the parachain's registration into its own\\nruntime. Currently it just injects the para ID that the chain is registered at. This allows the\\nruntime to know which cross-chain messages are intended for it.\"), mdx(\"h4\", null, mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"register_validate_block!\"), \" macro\"), mdx(\"p\", null, \"Each parachain must supply a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validate_block\"), \" function, expressed as a Wasm blob, to the relay chain\\nwhen registering. The Node Template does not provide this function, but the parachain template does,\\nThanks to cumulus, creating this function for a Substrate runtime is as simple as adding one line of\\ncode as shown\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-parachain-template/blob/latest/runtime/src/lib.rs#L648-L652\"\n  }, \"at the bottom of the runtime\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"cumulus_pallet_parachain_system::register_validate_block!(\\n  Runtime = Runtime,\\n  BlockExecutor = cumulus_pallet_aura_ext::BlockExecutor::<Runtime, Executive>,\\n  CheckInherents = CheckInherents,\\n);\\n\")), mdx(\"h4\", null, \"No \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"GRANDPA\"), \" pallet\"), mdx(\"p\", null, \"Many popular Substrate runtimes including the Node Template features a finality-related GRANDPA\\npallet and its associated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GrandpaApi\"), \". These are both missing from the Parachain Template.\"), mdx(\"p\", null, \"This is because parachains follow the finality of the relay chain rather than running their own\\nfinality gadget. This is fundamental to Polkadot's architecture and will not change.\"), mdx(\"h4\", null, \"Service\"), mdx(\"p\", null, \"The collator service\\n(\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-parachain-template/blob/latest/node/src/service.rs\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"node/src/service.rs\")), \")\\nis entirely different from the one of Node template. While you can find similarities, the structure\\nof the service is much different. This new service is the primary change that cumulus provides.\"), mdx(Message, {\n    type: \"gray\",\n    title: \"Note\",\n    text: \"When modifying an existing Substrate chain to use Cumulus, it is generally best to copy the\\n  service code from the Parachain Template.\\n  \",\n    mdxType: \"Message\"\n  }), mdx(\"h2\", {\n    \"id\": \"relay-chain-specification\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#relay-chain-specification\",\n    \"aria-label\": \"relay chain specification permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Relay chain specification\"), mdx(\"p\", null, \"You will need a chain specification (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/chain-specs\"\n  }, \"chain spec\"), \") for your relay chain\\nnetwork.\"), mdx(Message, {\n    type: \"yellow\",\n    title: \"Minimal validators per collator\",\n    text: \"\\nAlways have one or more relay chain validator nodes running than the total connected parachains. For\\nexample, if you want to connect two parachains, run three or more relay chain validator nodes.\\n\",\n    mdxType: \"Message\"\n  }), mdx(\"p\", null, \"Whichever chain spec file you choose to use we will refer to the file simply as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chain-spec.json\"), \"\\nin the instructions below. You will need to supply the proper path to the chain spec you are using.\"), mdx(Message, {\n    type: \"gray\",\n    title: \"Distribute your raw spec\",\n    text: \"\\nIf you intend to let others connect to your network, you should have the genesis Wasm and the\\nassociated chain spec for your network generated once and distributed to your peers.\\nThis stems from the [non-deterministic issue](https://dev.to/gnunicorn/hunting-down-a-non-determinism-bug-in-our-rust-wasm-build-4fk1)\\nin the way Wasm runtimes are compiled, at least for now.\\n\",\n    mdxType: \"Message\"\n  }), mdx(\"p\", null, \"Chain specs \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"conventionally\"), \" live in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/res\"), \" folder that is published in your node's\\ncodebase for others to use. For example:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Polkadot includes these \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"relay chain\"), \" chain specs\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/paritytech/polkadot/tree/master/node/service/res\"\n  }, \"under \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"node/service/res\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cumulus includes these \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"parachain\"), \" chain specs\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/paritytech/cumulus/tree/master/polkadot-parachains/res\"\n  }, \"under \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"res\")))), mdx(\"h3\", {\n    \"id\": \"pre-configured-chain-spec-files\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#pre-configured-chain-spec-files\",\n    \"aria-label\": \"pre configured chain spec files permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Pre-configured chain spec files\"), mdx(\"p\", null, \"We have included three set of chain spec files in this tutorial that you can use\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"without modification\"), \" for a local test network:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A two-validator relay chain with Alice and Bob as authorities. Useful for registering a single\\nparachain - \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/cumulus/chain-specs/rococo-custom-2-plain.json\"\n  }, \"plain chain spec\"), \",\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/cumulus/chain-specs/rococo-custom-2-raw.json\"\n  }, \"raw chain spec\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A three-validator relay chain identical to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rococo-custom-2-raw\"), \" spec, with Charlie as the third\\nvalidator - \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/cumulus/chain-specs/rococo-custom-3-plain.json\"\n  }, \"plain chain spec\"), \",\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/cumulus/chain-specs/rococo-custom-3-raw.json\"\n  }, \"raw chain spec\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A four-validator relay chain identical to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rococo-custom-2-raw\"), \" spec, with Charlie and Dave as\\nthe third and fourth validators -\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/cumulus/chain-specs/rococo-custom-4-plain.json\"\n  }, \"plain chain spec\"), \",\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/cumulus/chain-specs/rococo-custom-4-raw.json\"\n  }, \"raw chain spec\"), \".\"))), mdx(\"p\", null, \"Plain chain spec files are in a more human readable and modifiable format for your inspection. You\\nwill need to convert it to a SCALE encoded \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"raw\"), \" chain spec to use when starting your nodes. Jump\\nto the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#convert-plain-to-raw-chain-spec\"\n  }, \"conversion\"), \" section to see how to do that.\"), mdx(\"p\", null, \"The above raw chain specs were created according to the steps in the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#create-a-custom-relay-chain-spec-optional\"\n  }, \"create your own chain spec\"), \" section.\"), mdx(\"h2\", {\n    \"id\": \"start-your-relay-chain\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#start-your-relay-chain\",\n    \"aria-label\": \"start your relay chain permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Start your relay chain\"), mdx(\"p\", null, \"Before we can attach any cumulus-based parachains, we need to launch a relay chain for them to\\nconnect to. This section describes in detail how to start both nodes using the above\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/cumulus/chain-specs/rococo-custom-2-raw.json\"\n  }, \"two-validator raw chain spec\"), \"\\nas well as the general instructions for starting additional nodes.\"), mdx(\"h3\", {\n    \"id\": \"start-the-alice-validator\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#start-the-alice-validator\",\n    \"aria-label\": \"start the alice validator permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Start the \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"alice\"), \" validator\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Start Relay `Alice` node\\n./target/release/polkadot \\\\\\n--alice \\\\\\n--validator \\\\\\n--base-path /tmp/relay/alice \\\\\\n--chain <path to spec json> \\\\\\n--port 30333 \\\\\\n--ws-port 9944\\n\")), mdx(\"p\", null, \"The port (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"port\"), \") and websocket port (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ws-port\"), \") specified here are the defaults and thus those\\nflags can be omitted. However we choose to leave them in to enforce the habit of checking their\\nvalues. Once this node is launched, no other nodes on the same local machine can use these ports.\"), mdx(\"p\", null, \"When the node starts you will see several log messages. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Take note of the node's Peer ID\"), \"\\nin the logs. We will need it when connecting other nodes to it. It will look something like\\nthis:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"\\uD83C\\uDFF7 Local node identity is: 12D3KooWGjsmVmZCM1jPtVNp6hRbbkGBK3LADYNniJAKJ19NUYiq\\n\")), mdx(\"h3\", {\n    \"id\": \"start-the-bob-validator\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#start-the-bob-validator\",\n    \"aria-label\": \"start the bob validator permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Start the \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"bob\"), \" validator\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"./target/release/\\\\\\n--bob \\\\\\n--validator \\\\\\n--base-path /tmp/relay-bob \\\\\\n--chain <path to spec json> \\\\\\n--bootnodes /ip4/<Alice IP>/tcp/30333/p2p/<Alice Peer ID> \\\\\\n--port 30334 \\\\\\n--ws-port 9945\\n\")), mdx(\"p\", null, \"Bob's command is perfectly analogous to Alice's. It differs from Alice's one by his own base path,\\nhis own validator key (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--bob\"), \"), and his own ports. Finally he adds a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--bootnodes\"), \" flag. This flag\\nis not strictly necessary if you are running the entire network on a single local machine, but it is\\nnecessary when operating over the network.\"), mdx(\"h3\", {\n    \"id\": \"starting-additional-validators-optional\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#starting-additional-validators-optional\",\n    \"aria-label\": \"starting additional validators optional permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Starting additional validators (optional)\"), mdx(\"p\", null, \"If you are using the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/cumulus/chain-specs/rococo-custom-2-raw.json\"\n  }, \"two-validator raw chain spec\"), \",\\nyou do not need to start additional nodes, but others may need to start more nodes. Again, this\\ncommand is entirely analogous. You just need to make sure that nodes on the same local machine do\\nnot have conflicting ports or base paths.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"./target/release/\\\\\\n--charlie \\\\\\n--validator \\\\\\n--base-path /tmp/relay-charlie \\\\\\n--chain <path to spec json> \\\\\\n--bootnodes /ip4/<Alice IP>/tcp/30333/p2p/<Alice Peer ID> \\\\\\n--port 30335 \\\\\\n--ws-port 9946\\n\")), mdx(\"p\", null, \"If you would like even more validators, or to customize the relay chain in some other ways, keep\\nreading!\"), mdx(AccentButton, {\n    text: \"Don't need a custom relay chain spec? Jump to the next page \\u2794\",\n    link: \"../connect-parachain\",\n    mdxType: \"AccentButton\"\n  }), mdx(\"h2\", {\n    \"id\": \"create-a-custom-relay-chain-spec-optional\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#create-a-custom-relay-chain-spec-optional\",\n    \"aria-label\": \"create a custom relay chain spec optional permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Create a custom relay chain spec (optional)\"), mdx(\"p\", null, \"It is generally best to start from an existing raw chain specs to minimize chances of\\nerror. Once you are familiar with the overall flow, use the following steps to customize and\\ngenerate your own chain specs.\"), mdx(Message, {\n    type: \"yellow\",\n    title: \"chain spec testing with `rococo-local`\",\n    text: \"\\nYour final chain spec filename **must** start with `rococo` or the node will not know what\\nruntime logic to include.\\n\",\n    mdxType: \"Message\"\n  }), mdx(\"h3\", {\n    \"id\": \"generate-a-plain-chain-spec\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#generate-a-plain-chain-spec\",\n    \"aria-label\": \"generate a plain chain spec permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Generate a Plain Chain Spec\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Create a base chain spec that we will modify\\n./target/release/build-spec --chain rococo-local --disable-default-bootnode > rococo-custom-plain.json\\n\")), mdx(\"p\", null, \"We have just generated a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"plain chain spec\"), \" file for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rococo-local\"), \" network. That file contains\\nmost of the information we need already. Rococo is a permissioned chain, so we just need to add an\\nauthority and its session keys. The snippet below shows the relevant part of the generated spec\\nfile. All keys in the generated file belong to the usual well-known accounts used in other tutorials\\n(Alice and Bob in the case of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rococo-custom-plain.json\"), \" file).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"session\\\": {\\n  \\\"keys\\\": [\\n    [\\n      \\\"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\\\",                           // <---- The Validator Authority (//Alice//stash)\\n      \\\"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\\\",\\n      {\\n        \\\"grandpa\\\": \\\"5FA9nQDVg267DEd8m1ZypXLBnvN7SFxYwV7ndqSYGiN9TTpu\\\",              // <---- The GRANDPA ed25519 session key (//Alice)\\n        \\\"babe\\\": \\\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\\\",                 // <---- The sr25519 session keys (//Alice)\\n        \\\"im_online\\\": \\\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\\\",\\n        \\\"para_validator\\\": \\\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\\\",\\n        \\\"para_assignment\\\": \\\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\\\",\\n        \\\"authority_discovery\\\": \\\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\\\",\\n        \\\"beefy\\\": \\\"KW39r9CJjAVzmkf9zQ4YDb2hqfAVGdRqn53eRqyruqpxAP5YL\\\",               // <---- The BEEFY *encoded* ecdsa session keys (//Alice)\\n       }\\n    ]\\n  // -- snip -- ADD MORE KEYS HERE, following the same format\\n  ]\\n}\\n\")), mdx(\"p\", null, \"As \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#pre-configured-chain-spec-files\"\n  }, \"mentioned above\"), \", we have pre-configured:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/assets/tutorials/cumulus/chain-specs/rococo-custom-2-plain.json\"\n  }, \"rococo-custom-2-plain.json\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/assets/tutorials/cumulus/chain-specs/rococo-custom-3-plain.json\"\n  }, \"rococo-custom-3-plain.json\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/assets/tutorials/cumulus/chain-specs/rococo-custom-4-plain.json\"\n  }, \"rococo-custom-4-plain.json\"))), mdx(\"p\", null, \"Plain chain spec files are in a more human readable and modifiable format for our inspection. We\\nwill need to convert it to a SCALE encoded \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"raw\"), \" chain spec to pass to nodes on startup. Jump to\\nthe \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#convert-plain-to-raw-chain-spec\"\n  }, \"conversion\"), \" section to see how to do that.\"), mdx(\"h3\", {\n    \"id\": \"adjust-the-plain-chain-spec\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#adjust-the-plain-chain-spec\",\n    \"aria-label\": \"adjust the plain chain spec permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Adjust the Plain Chain Spec\"), mdx(\"p\", null, \"Then we would adjust the plain chain spec file by adding new authority's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountId\"), \" and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidatorId\"), \".\"), mdx(Message, {\n    type: \"gray\",\n    title: \"Direct edits vs. building specs\",\n    text: \"\\nThe addition of custom session keys in the plain chain spec discussed in this section typically is\\nnot needed for **production chains**, as they have been included in the accompanied chain spec\\nfiles. The exercise below is done because we have made modifications to the plain chain spec. In\\nproduction, most of the time you will want to include these in your\\n[`chain-spec.rs`](https://github.com/substrate-developer-hub/substrate-parachain-template/blob/latest/node/src/chain_spec.rs)\\nto include them in the node binary directly. And then use the  CLI to generate your custom plain\\nchain spec.\\n\",\n    mdxType: \"Message\"\n  }), mdx(\"p\", null, \"In this case, both IDs are going to be the same and are generated from the \\\"stash\\\" account. You\\ncan generate your own or inspect the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/tools/subkey#well-known-keys\"\n  }, \"well-known development accounts\"), \".\"), mdx(\"p\", null, \"The following commands demonstrate how the first part of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"palletSession\"), \" section inside the\\nspec file can be reproduced. The second part is obtained similarly with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"//Bob\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"//Bob//stash\"), \".\"), mdx(Message, {\n    type: \"yellow\",\n    title: \"Subkey tool vs. key command\",\n    text: \"\\nAll the keys and addresses needed can be generated and inspected using either:\\n- The stand-alone [`subkey` tool](/v3/tools/subkey) (v2.0.1 or above)\\n- The node `key` subcommand, included in all substrate node CLIs\\n\\n\\nThese commands are equivalent. The sole difference being that the `key` subcommand also includes\\nmethods to `insert` keys into your nodes.\\n\",\n    mdxType: \"Message\"\n  }), mdx(\"p\", null, \"Polkadot \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"validator authority\"), \" address for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"//Alice//stash\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sr25519\"), \" cryptography):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Replace `node` with any substrate based node binary, like `polkadot`\\nsubkey inspect --scheme sr25519 --network substrate //Alice//stash\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Output:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"Secret Key URI `//Alice//stash` is account:\\n  Secret seed:       0x3c881bc4d45926680c64a7f9315eeda3dd287f8d598f3653d7c107799c5422b3\\n  Public key (hex):  0xbe5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f\\n  Public key (SS58): 5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\\n  Account ID:        0xbe5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f\\n  SS58 Address:      5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\\n\")), mdx(\"p\", null, \"Polkadot \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"grandpa session\"), \" key for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"//Alice\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ed25519\"), \" cryptography):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"subkey inspect --scheme ed25519 --network substrate //Alice\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Output:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"Secret Key URI `//Alice` is account:\\n  Secret seed:       0xabf8e5bdbe30c65656c0a3cbd181ff8a56294a69dfedd27982aace4a76909115\\n  Public key (hex):  0x88dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee\\n  Public key (SS58): 5FA9nQDVg267DEd8m1ZypXLBnvN7SFxYwV7ndqSYGiN9TTpu\\n  Account ID:        0x88dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee\\n  SS58 Address:      5FA9nQDVg267DEd8m1ZypXLBnvN7SFxYwV7ndqSYGiN9TTpu\\n\")), mdx(\"p\", null, \"Polkadot address for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"//Alice\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sr25519\"), \" cryptography). This is used in all but the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"beefy\"), \"\\nkey sections of the chain spec after the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grandpa\"), \" key.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"subkey inspect --scheme sr25519 --network substrate //Alice\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Output:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"Secret Key URI `//Alice` is account:\\n  Secret seed:       0xe5be9a5092b81bca64be81d212e7f2f9eba183bb7a90954f7b76361f6edb5c0a\\n  Public key (hex):  0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\\n  Public key (SS58): 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\\n  Account ID:        0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\\n  SS58 Address:      5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\\n\")), mdx(\"p\", null, \"And finally the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"encoded SS58\"), \" ecdsa BEEFY key:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"subkey inspect --scheme ecdsa --network substrate //Alice\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Output:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"Secret Key URI `//Alice` is account:\\n  Secret seed:       0xcb6df9de1efca7a3998a8ead4e02159d5fa99c3e0d4fd6432667390bb4726854\\n  Public key (hex):  0x020a1091341fe5664bfa1782d5e04779689068c916b04cb365ec3153755684d9a1\\n  Public key (SS58): KW39r9CJjAVzmkf9zQ4YDb2hqfAVGdRqn53eRqyruqpxAP5YL\\n  Account ID:        0x01e552298e47454041ea31273b4b630c64c104e4514aa3643490b8aaca9cf8ed\\n  SS58 Address:      5C7C2Z5sWbytvHpuLTvzKunnnRwQxft1jiqrLD5rhucQ5S9X\\n\")), mdx(\"p\", null, \"Now that you have all the keys needed, append them in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"palletSession\"), \" section of you\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"plain\"), \" chain spec. You can either create new IDs or use other well known accounts following this\\nsame process.\"), mdx(\"h4\", null, \"A note on SS58 encoding of \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"key\"), \" vs. \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"address\")), mdx(\"p\", null, \"Notice the BEEFY key is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Public key (SS58)\"), \" and it's \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"different\"), \" from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SS58 Address\"), \" in the\\ncase of ECDSA keys. BEEFY is a component built for the feature bridging Substrate to other\\nblockchain networks.\"), mdx(\"p\", null, \"In the case of sr25519 and ed25519, the account ID matches its public key, hence SS58 encoded\\naccount-id address is the same as SS58 public key encoding. In case of ECDSA, we apply blake2\\nalgorithm to the public key to get the address (due to the size difference between 33 vs 32 bytes),\\nso the SS58 encoding is different.\"), mdx(\"p\", null, \"Default serialization / deserialization implementation for public keys is using SS58 encoding,\\nhence every time we use public keys in encoded form we are going to need it's SS58 encoding. A\\nnotable case is chain spec JSON file and encoding of session keys (most importantly BEEFY).\"), mdx(\"h3\", {\n    \"id\": \"convert-plain-to-raw-chain-spec\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#convert-plain-to-raw-chain-spec\",\n    \"aria-label\": \"convert plain to raw chain spec permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Convert plain to raw chain spec\"), mdx(\"p\", null, \"Now that you've modified your plain chain spec, you can generate the final raw chain spec by:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"./target/release/build-spec --chain rococo-custom-plain.json --raw --disable-default-bootnode > rococo-custom.json\\n\")), mdx(\"p\", null, \"You may get the output warning: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Took active validators from set with wrong size\"), \".\\nThe resulting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chain-spec.json\"), \" will still be \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"perfectly usable\"), \", you can ignore this warning for\\nnow.\"), mdx(\"h3\", {\n    \"id\": \"start-the-custom-relay-chain-and-insert-your-own-keys\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#start-the-custom-relay-chain-and-insert-your-own-keys\",\n    \"aria-label\": \"start the custom relay chain and insert your own keys permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Start the custom relay chain and insert your own keys\"), mdx(\"p\", null, \"If your custom chain spec includes self-generated keys, see the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/tutorials/v3/private-network#add-keys-to-keystore\"\n  }, \"Substrate private network tutorial\"), \"\\nfor details on inserting these keys into your various nodes.\"), mdx(\"h2\", {\n    \"id\": \"next-steps\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#next-steps\",\n    \"aria-label\": \"next steps permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Next steps\"), mdx(\"p\", null, \"Now that we have a layer-0 blockchain ready, we can now start connecting layer-1 parachains\\nto it! Into the next section we dive!\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#before-you-begin","title":"Before you begin"},{"url":"#what-you-will-be-doing","title":"What you will be doing"},{"url":"#learning-outcomes","title":"Learning outcomes"},{"url":"#hardware-and-software-requirements","title":"Hardware and software requirements","items":[{"url":"#build-with-underpowered-hardware","title":"Build with underpowered hardware"},{"url":"#software-versioning","title":"Software versioning"}]},{"url":"#build-your-nodes","title":"Build your nodes","items":[{"url":"#building-the-relay-chain-node","title":"Building the relay chain node"},{"url":"#building-the-parachain-template","title":"Building the parachain template"}]},{"url":"#parachain-node-template-overview","title":"Parachain node template overview","items":[{"url":"#differences-from-the-node-template","title":"Differences from the node template"}]},{"url":"#relay-chain-specification","title":"Relay chain specification","items":[{"url":"#pre-configured-chain-spec-files","title":"Pre-configured chain spec files"}]},{"url":"#start-your-relay-chain","title":"Start your relay chain","items":[{"url":"#start-the-alice-validator","title":"Start the alice validator"},{"url":"#start-the-bob-validator","title":"Start the bob validator"},{"url":"#starting-additional-validators-optional","title":"Starting additional validators (optional)"}]},{"url":"#create-a-custom-relay-chain-spec-optional","title":"Create a custom relay chain spec (optional)","items":[{"url":"#generate-a-plain-chain-spec","title":"Generate a Plain Chain Spec"},{"url":"#adjust-the-plain-chain-spec","title":"Adjust the Plain Chain Spec"},{"url":"#convert-plain-to-raw-chain-spec","title":"Convert plain to raw chain spec"},{"url":"#start-the-custom-relay-chain-and-insert-your-own-keys","title":"Start the custom relay chain and insert your own keys"}]},{"url":"#next-steps","title":"Next steps"}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/tutorials/09-cumulus/a-start-relay/index.mdx"}},"pageContext":{"slug":"/tutorials/v3/cumulus/start-relay","version":"polkadot-v0.9.10","navMenuSlug":"cumulusTutorial","locale":"en","hrefLang":"en-US","originalPath":"/tutorials/v3/cumulus/start-relay/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
{
    "componentChunkName": "component---src-templates-tut-template-tsx",
    "path": "/tutorials/v3/ink-workshop/pt3/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/tutorials/v3/ink-workshop/pt3","title":"Build an ERC20 Token Contract","hideNav":null,"difficulty":null,"duration":null,"relevantSkills":null,"section":"tutorials","category":"ink workshop"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Build an ERC20 Token Contract\",\n  \"slug\": \"/tutorials/v3/ink-workshop/pt3\",\n  \"version\": 3,\n  \"section\": \"tutorials\",\n  \"category\": \"ink workshop\",\n  \"keywords\": \"smart contracts, erc20, wasm\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TutorialObjective = makeShortcode(\"TutorialObjective\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this chapter, we will show you how you can build an ERC20 token contract with ink!.\"), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '1. Understanding the ERC20 Standard',\n      url: '#erc20-standard'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '2. Creating the ERC20 Template',\n      url: '#creating-the-erc20-template'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '3. Transferring Tokens',\n      url: '#transferring-tokens'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '4. Creating Events',\n      url: '#creating-events'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '5. Supporting Approvals and Transfer From',\n      url: '#supporting-approval-and-transfer_from'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '5. Testing',\n      url: '#testing-our-contract'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(\"h2\", {\n    \"id\": \"learning-outcomes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#learning-outcomes\",\n    \"aria-label\": \"learning outcomes permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Learning outcomes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Initial token minting\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tokens transfer\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Approvals and third party transfers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Emitting runtime events through Substrate\")), mdx(\"p\", null, \"But first, we will go over the ERC20 standard for those of you who are not familiar.\"), mdx(\"h2\", {\n    \"id\": \"erc20-standard\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#erc20-standard\",\n    \"aria-label\": \"erc20 standard permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"ERC20 Standard\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://eips.ethereum.org/EIPS/eip-20\"\n  }, \"ERC20 token standard\"), \" defines the interface for the most popular Ethereum smart contract.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"// ----------------------------------------------------------------------------\\n// ERC Token Standard #20 Interface\\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n// ----------------------------------------------------------------------------\\n\\ncontract ERC20Interface {\\n    // Storage Getters\\n    function totalSupply() public view returns (uint);\\n    function balanceOf(address tokenOwner) public view returns (uint balance);\\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\\n\\n    // Public Functions\\n    function transfer(address to, uint tokens) public returns (bool success);\\n    function approve(address spender, uint tokens) public returns (bool success);\\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\\n\\n    // Contract Events\\n    event Transfer(address indexed from, address indexed to, uint tokens);\\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\\n}\\n\")), mdx(\"p\", null, \"In summary, it allows individuals to deploy their own cryptocurrency on top of an existing smart\\ncontract platform. There isn't much magic happening in this contract. Users balances are stored in a\\nHashMap, and a set of APIs are built to allow users to transfer tokens they own or allow a third\\nparty to transfer some amount of tokens on their behalf. Most importantly, all of this logic is\\nimplemented ensuring that funds are not unintentionally created or destroyed, and that a user's\\nfunds are protected from malicious actors.\"), mdx(\"p\", null, \"Note that all the public functions return a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bool\"), \" which specifies if the call was successful or not.\\nWe will adhere to that specification.\"), mdx(\"h2\", {\n    \"id\": \"creating-the-erc20-template\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#creating-the-erc20-template\",\n    \"aria-label\": \"creating the erc20 template permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating the ERC20 Template\"), mdx(\"p\", null, \"We are going to start another ink! project to build an ERC20 token contract.\"), mdx(\"p\", null, \"Back in your working directory, run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"cargo contract new erc20\\n\")), mdx(\"p\", null, \"Again, we will replace the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lib.rs\"), \" file content with the template provided on the right panel.\"), mdx(\"p\", null, \"You will notice that the template for the ERC20 token is VERY similar to the Incrementer contract.\\n(Coincidence? \\xAF\", \"\\\\\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"(\\u30C4)\"), \"/\\xAF)\"), mdx(\"p\", null, \"The storage (so far) consists of:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"total_supply\"), \": a storage \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Value\"), \", representing the total supply of tokens in our contract.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"balances\"), \": a storage \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"HashMap\"), \", representing the individual balance of each account.\")), mdx(\"h3\", {\n    \"id\": \"1-erc20-deployment\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-erc20-deployment\",\n    \"aria-label\": \"1 erc20 deployment permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. ERC20 Deployment\"), mdx(\"p\", null, \"The most basic ERC20 token contract is a fixed supply token. During contract deployment, all the\\ntokens will be automatically given to the contract creator. It is then up to the creator to\\ndistribute those tokens to other users as he sees fit.\"), mdx(\"p\", null, \"Of course, this is not the only way to mint and distribute tokens, but the most simple one, and what\\nwe will be doing here.\"), mdx(\"p\", null, \"So remember to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set\"), \" the total balance and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insert\"), \" the balance of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Self::env().caller()\")), mdx(\"h3\", {\n    \"id\": \"2-your-turn\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-your-turn\",\n    \"aria-label\": \"2 your turn permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Your Turn\"), mdx(\"p\", null, \"This chapter should be nothing more than a quick refresher of the content you already learned.\"), mdx(\"p\", null, \"You need to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set up a constructor function which initializes the two storage items\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create getters for both storage items\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"balance_of_or_zero\"), \" function to handle reading values from the HashMap\")), mdx(\"p\", null, \"Remember to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cargo +nightly test\"), \" to test your work.\"), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Template \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/2/assets/2.1-template.rs\"\n  }, \"template-code\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/2/assets/2.1-finished-code.rs\"\n  }, \"template-code-final\")), mdx(\"h2\", {\n    \"id\": \"transferring-tokens\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#transferring-tokens\",\n    \"aria-label\": \"transferring tokens permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Transferring Tokens\"), mdx(\"p\", null, \"So at this point, we have a single user that owns all the tokens for the contract. However, it's not\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"really\"), \" a useful token unless you can transfer them to other people...\"), mdx(\"p\", null, \"Let's do that!\"), mdx(\"h3\", {\n    \"id\": \"1-transfer-functions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-transfer-functions\",\n    \"aria-label\": \"1 transfer functions permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Transfer Functions\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer\"), \" function does exactly what you might expect: it allows the user calling the contract\\nto transfer some funds they own to another user.\"), mdx(\"p\", null, \"You will notice in our template code there is a public function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer\"), \" and an internal function\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer_from_to\"), \". We have done this because in the future, we will be reusing the logic for a\\ntoken transfer when we enable third party allowances and spending on-behalf-of.\"), mdx(\"h4\", null, \"transfer_from_to()\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"fn transfer_from_to(&mut self, from: AccountId, to: AccountId, value: Balance) -> bool {\\n  /* --snip-- */\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer_from_to\"), \" function will be built without any \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"authorization\"), \" checks. Because it is an\\ninternal function we fully control when it gets called. However, it will have all logical checks\\naround managing the balances between accounts.\"), mdx(\"p\", null, \"Really we just need to check for one thing: make sure that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from\"), \" account has enough funds to\\nsend to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"to\"), \" account, something likes the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"if balance_from < value {\\n    return false\\n}\\n\")), mdx(\"p\", null, \"Remember that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer\"), \" function and other public functions return a bool to indicate success.\\nIf the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from\"), \" account does not have enough balance to satisfy the transfer, we will exit early and\\nreturn false, not making any changes to the contract state. Our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer_from_to\"), \" will simply\\nforward the \\\"success\\\" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bool\"), \" up to the function that calls it.\"), mdx(\"h4\", null, \"transfer()\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[ink(message)]\\npub fn transfer(&mut self, to: AccountId, value: Balance) -> bool {\\n  /* --snip-- */\\n}\\n\")), mdx(\"p\", null, \"Finally, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer\"), \" function will simply call into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer_from_to\"), \" with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from\"), \"\\nparameter automatically set to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self.env().caller()\"), \". This is our \\\"authorization check\\\" since\\nthe contract caller is always authorized to move their own funds.\"), mdx(\"h3\", {\n    \"id\": \"2-transfer-math\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-transfer-math\",\n    \"aria-label\": \"2 transfer math permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Transfer Math\"), mdx(\"p\", null, \"There really is not much to say about the simple math executed within a token transfer.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"First we get the current balance of both the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"from\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"to\"), \" account, making sure to use our\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"balance_of_or_zero()\"), \" getter.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Then we make the logic check mentioned above to ensure the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"from\"), \" balance has enough funds to\\nsend \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Finally, we subtract that \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\"), \" from the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"from\"), \" balance and add it to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"to\"), \" balance and\\ninsert those new values back in.\")), mdx(\"h3\", {\n    \"id\": \"3-your-turn\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#3-your-turn\",\n    \"aria-label\": \"3 your turn permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"3. Your Turn\"), mdx(\"p\", null, \"Follow the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ACTION\"), \"s in the template code to build your transfer function.\"), mdx(\"p\", null, \"Remember to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cargo +nightly test\"), \" to test your work.\"), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Template \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/2/assets/2.2-template.rs\"\n  }, \"template-code\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/2/assets/2.2-finished-code.rs\"\n  }, \"template-code-final\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Previous Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/2/assets/2.1-finished-code.rs\"\n  }, \"template-code-previous\")), mdx(\"h2\", {\n    \"id\": \"creating-events\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#creating-events\",\n    \"aria-label\": \"creating events permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating Events\"), mdx(\"p\", null, \"Recall that contract calls cannot directly return a value to the outside world when submitting a\\ntransaction.  However, often we will want to indicate to the outside world that something has taken\\nplace (e.g. a transaction has occurred or a certain state has been reached).  We can alert others\\nthat this has occurred using an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"event\"), \".\"), mdx(\"h3\", {\n    \"id\": \"1-declaring-events\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-declaring-events\",\n    \"aria-label\": \"1 declaring events permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Declaring Events\"), mdx(\"p\", null, \"An event can communicate an arbitrary amount of data, defined in a similar manner as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"struct\"), \".\\nEvents should be declared using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[ink(event)]\"), \" attribute.\"), mdx(\"p\", null, \"For example,\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[ink(event)]\\npub struct Transfer {\\n    #[ink(topic)]\\n    from: Option<AccountId>,\\n    #[ink(topic)]\\n    to: Option<AccountId>,\\n    value: Balance,\\n}\\n\")), mdx(\"p\", null, \"This \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Transfer\"), \" event will contain three pieces of data - a value of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Balance\"), \" and two\\nOption-wrapped \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountId\"), \" variables indicating the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"to\"), \" accounts. For faster access to\\nthe event data they can have \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"indexed fields\"), \". We can do this by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[ink(topic)]\"), \" attribute\\ntag on that field.\"), mdx(\"p\", null, \"One way of retrieving data from an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Option<T>\"), \" variable is using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".unwrap_or()\"), \" function.  You may\\nrecall using this in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"my_value_or_zero()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"balance_of_or_zero()\"), \" functions in this project\\nand the Incrementer project.\"), mdx(\"h3\", {\n    \"id\": \"2-emitting-events\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-emitting-events\",\n    \"aria-label\": \"2 emitting events permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Emitting Events\"), mdx(\"p\", null, \"Now that we have defined what data will be contained within the event and how to declare it, it's\\ntime to actually emit some events. We do this by calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self.env().emit_event()\"), \" and include an\\nevent as the sole argument to the method call.\"), mdx(\"p\", null, \"Remember that since the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"to\"), \" fields are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Option<AccountId>\"), \", we can't just set them to\\nparticular values. Let's assume we want to set an value of 100 for the initial deployer.  This value\\ndoes not come from any other account, and so the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from\"), \" value should be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"None\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"self.env()\\n    .emit_event(\\n        Transfer {\\n            from: None,\\n            to: Some(self.env().caller()),\\n            value: 100,\\n        });\\n\")), mdx(\"p\", null, \"Notice that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" does not need a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Some()\"), \", as the value is not stored in an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Option\"), \".\"), mdx(\"p\", null, \"We want to emit a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Transfer\"), \" event every time that a transfer takes place. In the ERC-20 template\\nthat we have been working on, this occurs in two places: first, during the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" call, and second,\\nevery time that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer_from_to\"), \" is called.\"), mdx(\"h3\", {\n    \"id\": \"3-your-turn-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#3-your-turn-1\",\n    \"aria-label\": \"3 your turn 1 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"3. Your Turn\"), mdx(\"p\", null, \"Follow the ACTIONs in the template code to emit a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Transfer\"), \" event every time a token transfer occurs.\"), mdx(\"p\", null, \"Remember to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cargo +nightly test\"), \" to test your work.\"), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Template \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/2/assets/2.3-template.rs\"\n  }, \"template-code\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/2/assets/2.3-finished-code.rs\"\n  }, \"template-code-final\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Previous Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/2/assets/2.2-finished-code.rs\"\n  }, \"template-code-previous\")), mdx(\"h2\", {\n    \"id\": \"supporting-approval-and-transfer_from\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#supporting-approval-and-transfer_from\",\n    \"aria-label\": \"supporting approval and transfer_from permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Supporting \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"approval\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"transfer_from\")), mdx(\"p\", null, \"We are almost there! Our token contract can now transfer funds from user to user and tell the\\noutside world what is going on when this happens. All that is left to do is introduce the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"approve\"), \"\\nand \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer_from\"), \" functions.\"), mdx(\"h3\", {\n    \"id\": \"1-third-parity-transfers\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-third-parity-transfers\",\n    \"aria-label\": \"1 third parity transfers permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Third Parity Transfers\"), mdx(\"p\", null, \"This section is all about adding the ability for other accounts to safely spend some amount of your\\ntokens.\"), mdx(\"p\", null, \"The immediate question should be: \\\"Why the heck would I want that?\\\"\"), mdx(\"p\", null, \"Well, one such scenario is to support Decentralized Exchanges. Basically, other smart contracts can\\nallow you to exchange tokens with other users, usually one type of token for another. However, these\\n\\\"bids\\\" do not always execute right away. Maybe you want to get a really good deal for token trade,\\nand will hold out until that trade is met.\"), mdx(\"p\", null, \"Well, rather than giving your tokens directly to the contract (an escrow), you can simply \\\"approve\\\"\\nthem to spend some of your tokens on your behalf! This means that during the time while you are\\nwaiting for a trade to execute, you can still control and spend your funds if needed. Better yet,\\nyou can approve multiple different contracts or users to access your funds, so if one contract\\noffers the best trade, you do not need to pull out funds from the other and move them, a sometimes\\ncostly and time consuming process.\"), mdx(\"p\", null, \"So hopefully you can see why a feature like this would be useful, but how can we do it safely?\"), mdx(\"p\", null, \"We use a two step process: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Approve\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Transfer From\"), \".\"), mdx(\"h4\", null, \"Approve\"), mdx(\"p\", null, \"Approving another account to spend your funds is the first step in the third party transfer process.\\nA token owner can specify another account and any arbitrary number of tokens it can spend on the\\nowner's behalf. The owner need not have all their funds approved to be spent by others; in the\\nsituation where there is not enough funds, the approved account can spend up to the approved amount\\nfrom the owner's balance.\"), mdx(\"p\", null, \"When an account calls \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"approve\"), \" multiple times, the approved value simply overwrites any existing\\nvalue that was approved in the past. By default, the approved value between any two accounts is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \",\\nand a user can always call approve for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \" to revoke access to their funds from another account.\"), mdx(\"p\", null, \"To store approvals in our contract, we need to use a slightly fancy \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HashMap\"), \".\"), mdx(\"p\", null, \"Since each account can have a different amount approved for any other accounts to use, we need to\\nuse a tuple as our key which simply points to a balance value. Here is an example of what that\\nwould look like:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"pub struct Erc20 {\\n    /// Balances that are spendable by non-owners: (owner, spender) -> allowed\\n    allowances: ink_storage::collections::HashMap<(AccountId, AccountId), Balance>,\\n}\\n\")), mdx(\"p\", null, \"Here we have defined the tuple to represent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(owner, spender)\"), \" such that we can look up how much a\\n\\\"spender\\\" can spend from an \\\"owner's\\\" balance using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountId\"), \"s in this tuple. Remember that we\\nwill need to again create an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"allowance_of_or_zero\"), \" function to help us get the allowance of an\\naccount when it is not initialized, and a getter function called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"allowance\"), \" to look up the current\\nvalue for any pair of accounts.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"/// Approve the passed AccountId to spend the specified amount of tokens\\n/// on the behalf of the message's sender.\\n#[ink(message)]\\npub fn approve(&mut self, spender: AccountId, value: Balance) -> bool {/* --snip-- */}\\n\")), mdx(\"p\", null, \"When you call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"approve\"), \" function, you simply insert the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" specified into storage. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"owner\"), \" is always the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self.env().caller()\"), \", ensuring that the function call is always authorized.\"), mdx(\"h4\", null, \"Transfer From\"), mdx(\"p\", null, \"Finally, once we have set up an approval for one account to spend on-behalf-of another, we need to create a special \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer_from\"), \" function which enables an approved user to transfer those funds.\"), mdx(\"p\", null, \"As mentioned earlier, we will take advantage of the private \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer_from_to\"), \" function to do the bulk of our transfer logic. All we need to introduce is the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"authorization\"), \" logic again.\"), mdx(\"p\", null, \"So what does it mean to be authorized to call this function?\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"self.env().caller()\"), \" must have some allowance to spend funds from the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"from\"), \" account.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The allowance must not be less than the value trying to be transferred.\")), mdx(\"p\", null, \"In code, that can easily be represented like so:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let allowance = self.allowance_of_or_zero(&from, &self.env().caller());\\nif allowance < value {\\n    return false\\n}\\n/* --snip-- */\\ntrue\\n\")), mdx(\"p\", null, \"Again, we exit early and return false if our authorization does not pass.\"), mdx(\"p\", null, \"If everything looks good though, we simply \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insert\"), \" the updated allowance into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"allowance\"), \" HashMap (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"let new_allowance = allowance - value\"), \"), and call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer_from_to\"), \" between the specified \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"to\"), \" accounts.\"), mdx(\"h3\", {\n    \"id\": \"2-be-careful\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-be-careful\",\n    \"aria-label\": \"2 be careful permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Be Careful!\"), mdx(\"p\", null, \"If you glaze over the logic of this function too quickly, you may introduce a bug into your smart contract. Remember when calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer_from\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self.env().caller()\"), \" and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from\"), \" account is used to look up the current allowance, but the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer_from\"), \" function is called between the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"to\"), \" account specified.\"), mdx(\"p\", null, \"There are three account variables in play whenever \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer_from\"), \" is called, and you need to make sure to use them correctly! Hopefully our test will catch any mistake you make.\"), mdx(\"h3\", {\n    \"id\": \"3-your-turn-2\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#3-your-turn-2\",\n    \"aria-label\": \"3 your turn 2 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"3. Your Turn!\"), mdx(\"p\", null, \"You are almost there! This is the last piece of the ERC20 token contract.\"), mdx(\"p\", null, \"Follow the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ACTION\"), \"s in the contract template to finish your ERC20 implementation.\"), mdx(\"p\", null, \"Remember to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cargo +nightly test\"), \" to test your work.\"), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Template \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/2/assets/2.4-template.rs\"\n  }, \"template-code\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/2/assets/2.4-finished-code.rs\"\n  }, \"template-code-final\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Previous Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/2/assets/2.3-finished-code.rs\"\n  }, \"template-code-previous\")), mdx(\"h2\", {\n    \"id\": \"testing-our-contract\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#testing-our-contract\",\n    \"aria-label\": \"testing our contract permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Testing Our Contract\"), mdx(\"p\", null, \"Now let's conclude our ERC20 token implementation by walking through some test cases we have put forward\\nwhen you are filling in the code in the previous sections. In fact if you have been following along\\non the coding exercise and running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cargo +nightly test\"), \" at the end to make sure the output are okay,\\nyou have been running the test cases all along.\"), mdx(\"h3\", {\n    \"id\": \"1-motivation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-motivation\",\n    \"aria-label\": \"1 motivation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Motivation\"), mdx(\"p\", null, \"In software engineering practice, it is true that writing automatic test cases cannot be emphasized\\nenough. There are many type of tests one can write and here we are focusing on writing \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Unit Tests\"), \".\\nThis means we as developers know the code logic (versus testing assuming not knowing the logic, a.k.a.\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Black-box_testing\"\n  }, \"black-box testing\"), \") and we write test cases to\\nverify a function perform as we expected by giving it certain inputs and verifying it is returning\\nthe result we expect. Along the way we also test for edge cases, e.g. how it would handle empty value,\\nor value that is out of its expected bound, and test for certain error handling mechanism is executed\\nor error message is returned.\"), mdx(\"p\", null, \"The benefit of having unit tests written are so that once our program get big or during\\nfuture code refactoring, we can run these tests and if we see them pass, we have the confident that\\nour main program still works.\"), mdx(\"h3\", {\n    \"id\": \"2-unit-test-structure\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-unit-test-structure\",\n    \"aria-label\": \"2 unit test structure permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Unit Test Structure\"), mdx(\"p\", null, \"Now let's get to walking through some test cases for smart contract. They can be seen at the\\nbottom section of the code on the right panel.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[cfg(test)]\\nmod tests {\\n  use super::*;\\n  use ink_lang as ink;\\n  // snip...\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[cfg(test)]\"), \" is specified so the code section immediately below it is run only when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cargo test\"), \"\\nis executed but not in the normally-executed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cargo run\"), \". We shorthand all code logic defined above\\nwith \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"use super::*\"), \", and alias \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ink_lang\"), \" as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ink\"), \".\"), mdx(\"p\", null, \"The first test case is just:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[ink::test]\\nfn new_works() {\\n  let contract = Erc20::new(777);\\n  assert_eq!(contract.total_supply(), 777);\\n}\\n\")), mdx(\"p\", null, \"Each test case is a normal function definition returning nothing prepended by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[ink::test]\"), \"\\nattribute macro. Inside the function, we setup for certain conditions and then assert for certain\\nresults. If the assert statement fail, it will panic and the test will abort with error message.\"), mdx(\"p\", null, \"In the above test case, we just define a new contract with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"777\"), \" as the total supply, and verify\\nthe total supply is indeed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"777\"), \".\"), mdx(\"p\", null, \"Now, let's walk through a more complex one, the last test case.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[ink::test]\\nfn transfer_from_works() {\\n  let mut contract = Erc20::new(100);\\n  assert_eq!(contract.balance_of(AccountId::from([0x1; 32])), 100);\\n  contract.approve(AccountId::from([0x1; 32]), 20);\\n  contract.transfer_from(AccountId::from([0x1; 32]), AccountId::from([0x0; 32]), 10);\\n  assert_eq!(contract.balance_of(AccountId::from([0x0; 32])), 10);\\n}\\n\")), mdx(\"p\", null, \"We first define a contract with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"100\"), \" total supply. By default in testing, the account calling for\\nall contract code is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x00000001\"), \". So here we assert that the contract creator has all the total supply\\nat the beginning.\"), mdx(\"p\", null, \"Then we approve \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x00000001\"), \" to have an allowance of 20 to transfer his own fund.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": Notice this line is called with account \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x00000001\"), \", so it may look silly that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x00000001\"), \" has\\nto approve himself to use his own fund. In fact if he call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer()\"), \" directly, he can still\\ntransfer fund to others. But with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer_from()\"), \" we know that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"approve()\"), \" has the logic to set the\\nallowance amount so \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x00000001\"), \" can call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer_from()\"), \" later and succeed.\")), mdx(\"p\", null, \"Afterward, we make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer_from()\"), \" call, and ensure the destination account has the expected\\namount.\"), mdx(\"p\", null, \"You could also refer to the API doc on further usage of\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://doc.rust-lang.org/std/macro.assert.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"assert!()\")), \" and\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://doc.rust-lang.org/std/macro.assert_eq.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"assert_eq!()\")), \".\"), mdx(\"p\", null, \"Congratulation! You have completed the tutorial and you write your own ERC20 token smart contract\\nusing ink! in Substrate.\"), mdx(\"h2\", {\n    \"id\": \"further-learning\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#further-learning\",\n    \"aria-label\": \"further learning permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Further Learning\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Learn more about \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/v3/runtime/smart-contracts\"\n  }, \"Smart Contract development with Substrate\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Explore the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://paritytech.github.io/ink-docs/\"\n  }, \"ink! documentation\"))), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Template \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/2/assets/2.4-finished-code.rs\"\n  }, \"template-code\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#learning-outcomes","title":"Learning outcomes"},{"url":"#erc20-standard","title":"ERC20 Standard"},{"url":"#creating-the-erc20-template","title":"Creating the ERC20 Template","items":[{"url":"#1-erc20-deployment","title":"1. ERC20 Deployment"},{"url":"#2-your-turn","title":"2. Your Turn"}]},{"url":"#transferring-tokens","title":"Transferring Tokens","items":[{"url":"#1-transfer-functions","title":"1. Transfer Functions"},{"url":"#2-transfer-math","title":"2. Transfer Math"},{"url":"#3-your-turn","title":"3. Your Turn"}]},{"url":"#creating-events","title":"Creating Events","items":[{"url":"#1-declaring-events","title":"1. Declaring Events"},{"url":"#2-emitting-events","title":"2. Emitting Events"},{"url":"#3-your-turn-1","title":"3. Your Turn"}]},{"url":"#supporting-approval-and-transfer_from","title":"Supporting approval and transfer_from","items":[{"url":"#1-third-parity-transfers","title":"1. Third Parity Transfers"},{"url":"#2-be-careful","title":"2. Be Careful!"},{"url":"#3-your-turn-2","title":"3. Your Turn!"}]},{"url":"#testing-our-contract","title":"Testing Our Contract","items":[{"url":"#1-motivation","title":"1. Motivation"},{"url":"#2-unit-test-structure","title":"2. Unit Test Structure"}]},{"url":"#further-learning","title":"Further Learning"}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/tutorials/08-ink-workshop/c-build-erc20-contract/index.mdx"}},"pageContext":{"slug":"/tutorials/v3/ink-workshop/pt3","version":"3.0","navMenuSlug":"inkWorkshop","locale":"en","hrefLang":"en-US","originalPath":"/tutorials/v3/ink-workshop/pt3/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
{
    "componentChunkName": "component---src-templates-tut-template-tsx",
    "path": "/tutorials/v3/ink-workshop/pt2/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/tutorials/v3/ink-workshop/pt2","title":"Develop a Smart Contract","hideNav":null,"difficulty":null,"duration":null,"relevantSkills":null,"section":"tutorials","category":"ink workshop"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Develop a Smart Contract\",\n  \"slug\": \"/tutorials/v3/ink-workshop/pt2\",\n  \"version\": 3,\n  \"section\": \"tutorials\",\n  \"category\": \"ink workshop\",\n  \"keywords\": \"smart contracts, erc20, wasm\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TutorialObjective = makeShortcode(\"TutorialObjective\");\nvar Message = makeShortcode(\"Message\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This chapter will get you started developing smart contracts with ink!.\"), mdx(\"p\", null, \"We will build a simple \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Incrementer\"), \" contract which holds a number which you can increase with a function call.\"), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '1. ink! Smart Contract Template',\n      url: '#contract-template'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '2. Storing a Value',\n      url: '#storing-a-value'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '3. Interacting with a Storage Value',\n      url: '#interacting-with-a-storage-value'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '4. Incrementing the Value',\n      url: '#incrementing-the-value'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '5. Storing a Mapping',\n      url: '#storing-a-mapping'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(TutorialObjective, {\n    data: {\n      textLineOne: '6. Updating a Value',\n      url: '#updating-a-value'\n    },\n    mdxType: \"TutorialObjective\"\n  }), mdx(\"h2\", {\n    \"id\": \"learning-outcomes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#learning-outcomes\",\n    \"aria-label\": \"learning outcomes permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Learning outcomes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Learn the structure of ink! smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To store single values and hash maps\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To safely get and set these values\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To build public and private functions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To configure Rust to use safe math\")), mdx(\"h2\", {\n    \"id\": \"contract-template\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#contract-template\",\n    \"aria-label\": \"contract template permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Contract Template\"), mdx(\"p\", null, \"Let's take a look at a high level what is available to you when developing a smart contract using ink!.\"), mdx(\"h3\", {\n    \"id\": \"1-ink\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-ink\",\n    \"aria-label\": \"1 ink permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. ink!\"), mdx(\"p\", null, \"ink! is an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://wiki.haskell.org/Embedded_domain_specific_language\"\n  }, \"Embedded Domain Specific Language\"), \"\\n(EDSL) that you can use to write WebAssembly based smart contracts in the Rust programming language.\"), mdx(\"p\", null, \"ink! is just standard Rust in a well defined \\\"contract format\\\" with specialized \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[ink(...)]\"), \" attribute macros. These attribute macros tell ink! what the different parts of your Rust smart contract represent, and ultimately allow ink! to do all the magic needed to create Substrate compatible Wasm bytecode!\"), mdx(\"h3\", {\n    \"id\": \"2-start-a-new-project\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-start-a-new-project\",\n    \"aria-label\": \"2 start a new project permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Start a New Project\"), mdx(\"p\", null, \"Let's start a new project for the Incrementer contract that you will build in this chapter.\"), mdx(\"p\", null, \"Change into your working directory and run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"cargo contract new incrementer\\n\")), mdx(\"p\", null, \"Just like in previous example, this will create a new project folder named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"incrementer\"), \" which we\\nwill use for the rest of this chapter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"cd incrementer/\\n\")), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lib.rs\"), \" file, replace the \\\"Flipper\\\" contract source code with the template code provided\\nhere.\"), mdx(\"p\", null, \"Quickly check that it compiles and the trivial test passes with:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"cargo +nightly test\\n\")), mdx(\"p\", null, \"Also check that you can build the Wasm file by running:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"cargo +nightly contract build\\n\")), mdx(\"p\", null, \"If everything looks good, then we are ready to start programming!\"), mdx(\"h4\", null, \"Solution\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/1/assets/1.1-finished-code.rs\"\n  }, \"template-code-final\")), mdx(\"h2\", {\n    \"id\": \"storing-a-value\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#storing-a-value\",\n    \"aria-label\": \"storing a value permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Storing a Value\"), mdx(\"p\", null, \"The first thing we are going to do to the contract template is introduce some storage values.\"), mdx(\"p\", null, \"Here is how you would store simple values in storage:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[ink(storage)]\\npub struct MyContract {\\n    // Store a bool\\n    my_bool: bool,\\n    // Store some number\\n    my_number: u32,\\n}\\n/* --snip-- */\\n\")), mdx(\"h3\", {\n    \"id\": \"1-supported-types\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-supported-types\",\n    \"aria-label\": \"1 supported types permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Supported Types\"), mdx(\"p\", null, \"Substrate contracts may store types that are encodable and decodable with\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/parity-codec\"\n  }, \"Parity Codec\"), \" which includes most Rust common data\\ntypes such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bool\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"u{8,16,32,64,128}\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i{8,16,32,64,128}\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \", tuples, and arrays.\"), mdx(\"p\", null, \"ink! provides Substrate specific types like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountId\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Balance\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hash\"), \" to smart contracts as if\\nthey were primitive types. ink! also provides storage types for more elaborate storage interactions through the storage module:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"use ink_storage::collections::{Vec, HashMap, Stash, Bitvec};\\n\")), mdx(\"p\", null, \"Here is an example of how you would store an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountId\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Balance\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"// We are importing the default ink! types\\nuse ink_lang as ink;\\n\\n#[ink::contract]\\nmod MyContract {\\n\\n    // Our struct will use those default ink! types\\n    #[ink(storage)]\\n    pub struct MyContract {\\n        // Store some AccountId\\n        my_account: AccountId,\\n        // Store some Balance\\n        my_balance: Balance,\\n    }\\n    /* --snip-- */\\n}\\n\")), mdx(\"p\", null, \"You can find all the supported Substrate types in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/ink/tree/master/crates/storage\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ink_storage\"), \" crate\"), \".\"), mdx(\"h3\", {\n    \"id\": \"2-contract-deployment\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-contract-deployment\",\n    \"aria-label\": \"2 contract deployment permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Contract Deployment\"), mdx(\"p\", null, \"Every ink! smart contract must have a constructor which is run once when a contract is created. ink!\\nsmart contracts can have multiple constructors:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"use ink_lang as ink;\\n\\n#[ink::contract]\\nmod mycontract {\\n\\n    #[ink(storage)]\\n    pub struct MyContract {\\n        number: u32,\\n    }\\n\\n    impl MyContract {\\n        /// Constructor that initializes the `u32` value to the given `init_value`.\\n        #[ink(constructor)]\\n        pub fn new(init_value: u32) -> Self {\\n            Self {\\n                number: init_value,\\n            }\\n        }\\n\\n        /// Constructor that initializes the `u32` value to the `u32` default.\\n        ///\\n        /// Constructors can delegate to other constructors.\\n        #[ink(constructor)]\\n        pub fn default() -> Self {\\n            Self {\\n                number: Default::default(),\\n            }\\n        }\\n    /* --snip-- */\\n    }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"3-your-turn\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#3-your-turn\",\n    \"aria-label\": \"3 your turn permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"3. Your Turn\"), mdx(\"p\", null, \"Follow the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ACTION\"), \"s in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/1/assets/1.2-template.rs\"\n  }, \"template\"), \".\"), mdx(\"p\", null, \"Remember to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cargo +nightly test\"), \" to test your work.\"), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/1/assets/1.2-finished-code.rs\"\n  }, \"template-code-final\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Previous Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-contracts-workshop/blob/master/1/assets/1.1-finished-code.rs\"\n  }, \"template-code-previous\")), mdx(\"h2\", {\n    \"id\": \"interacting-with-a-storage-value\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#interacting-with-a-storage-value\",\n    \"aria-label\": \"interacting with a storage value permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Interacting with a Storage Value\"), mdx(\"p\", null, \"Now that we have created and initialized a storage value, we are going to start to interact with it!\"), mdx(\"h3\", {\n    \"id\": \"1-contract-functions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-contract-functions\",\n    \"aria-label\": \"1 contract functions permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Contract Functions\"), mdx(\"p\", null, \"As you see in the contract template, all of your contract functions are part of your contract pallet.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"impl MyContract {\\n    // Public and Private functions go here\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"2-public-and-private-functions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-public-and-private-functions\",\n    \"aria-label\": \"2 public and private functions permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Public and Private Functions\"), mdx(\"p\", null, \"In Rust, you can make as many implementations as you want. As a stylistic choice, we recommend\\nbreaking up your implementation definitions for your private and public functions:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"impl MyContract {\\n    /// Public function\\n    #[ink(message)]\\n    pub fn my_public_function(&self) {\\n        /* --snip-- */\\n    }\\n\\n    /// Private function\\n    fn my_private_function(&self) {\\n        /* --snip-- */\\n    }\\n\\n    /* --snip-- */\\n}\\n\")), mdx(\"p\", null, \"You can also choose to split things up however is most clear for your project.\"), mdx(\"p\", null, \"Note that all public functions must use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[ink(message)]\"), \" attribute.\"), mdx(\"h3\", {\n    \"id\": \"3-getting-a-value\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#3-getting-a-value\",\n    \"aria-label\": \"3 getting a value permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"3. Getting a Value\"), mdx(\"p\", null, \"We already showed you how to initialize a storage value. Getting the value is just as simple:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"impl MyContract {\\n    #[ink(message)]\\n    pub fn my_getter(&self) -> u32 {\\n        self.number\\n    }\\n}\\n\")), mdx(\"p\", null, \"In Rust, if the last expression in a function does not have a semicolon, then it will be the return value.\"), mdx(\"h3\", {\n    \"id\": \"4-your-turn\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#4-your-turn\",\n    \"aria-label\": \"4 your turn permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"4. Your Turn\"), mdx(\"p\", null, \"Follow the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ACTION\"), \"s on the code template provided.\"), mdx(\"p\", null, \"Remember to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cargo +nightly test\"), \" to test your work.\"), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Template \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/ink-workshop/1.3-template.rs\"\n  }, \"template-code\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/ink-workshop/1.3-finished-code.rs\"\n  }, \"template-code-final\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Previous Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/ink-workshop/1.2-finished-code.rs\"\n  }, \"template-code-previous\")), mdx(\"h2\", {\n    \"id\": \"incrementing-the-value\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#incrementing-the-value\",\n    \"aria-label\": \"incrementing the value permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Incrementing the Value\"), mdx(\"p\", null, \"It's time to let our users modify the storage.\"), mdx(\"h3\", {\n    \"id\": \"1-mutable-and-immutable-functions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-mutable-and-immutable-functions\",\n    \"aria-label\": \"1 mutable and immutable functions permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Mutable and Immutable Functions\"), mdx(\"p\", null, \"You may have noticed that the function template included \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self\"), \" as the first parameter of the\\ncontract functions. It is through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self\"), \" that you gain access to all your contract functions and\\nstorage items.\"), mdx(\"p\", null, \"If you are simply \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"reading\"), \" from the contract storage, you only need to pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&self\"), \". But if you want to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"modify\"), \" storage items, you will need to explicitly mark it as mutable, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&mut self\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"impl MyContract {\\n    #[ink(message)]\\n    pub fn my_getter(&self) -> u32 {\\n        self.my_number\\n    }\\n\\n    #[ink(message)]\\n    pub fn my_setter(&mut self, new_value: u32) {\\n        self.my_number = new_value;\\n    }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"2-lazy-storage-values\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-lazy-storage-values\",\n    \"aria-label\": \"2 lazy storage values permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Lazy Storage Values\"), mdx(\"p\", null, \"There is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://paritytech.github.io/ink/ink_storage/struct.Lazy.html\"\n  }, \"a \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Lazy\"), \" type\"), \" that can be\\nused for ink! storage values that do not need to be loaded in some or most cases. Many simple ink!\\nexamples, including those in this workshop, do not require the use of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lazy\"), \" values. Since there is\\nsome overhead associated with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lazy\"), \" values, they should only be used where required.\"), mdx(\"p\", null, \"This is an example of using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lazy\"), \" type:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[ink(storage)]\\npub struct MyContract {\\n    // Store some number\\n    my_number: ink_storage::Lazy<u32>,\\n}\\n\\nimpl MyContract {\\n    #[ink(constructor)]\\n    pub fn new(init_value: u32) -> Self {\\n        Self {\\n            my_number: ink_storage::Lazy::<u32>::new(init_value),\\n        }\\n    }\\n\\n    #[ink(message)]\\n    pub fn my_setter(&mut self, new_value: u32) {\\n        ink_storage::Lazy::<u32>::set(&mut self.my_number, new_value);\\n    }\\n\\n    #[ink(message)]\\n    pub fn my_adder(&mut self, add_value: u32) {\\n        let my_number = &mut self.my_number;\\n        let cur = ink_storage::Lazy::<u32>::get(my_number);\\n        ink_storage::Lazy::<u32>::set(my_number, cur + add_value);\\n    }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"3-your-turn-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#3-your-turn-1\",\n    \"aria-label\": \"3 your turn 1 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"3. Your Turn\"), mdx(\"p\", null, \"Follow the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ACTION\"), \"s in the template code.\"), mdx(\"p\", null, \"Remember to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cargo +nightly test\"), \" to test your work.\"), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Template \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/ink-workshop/1.4-template.rs\"\n  }, \"template-code\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/ink-workshop/1.4-finished-code.rs\"\n  }, \"template-code-final\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Previous Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/ink-workshop/1.3-finished-code.rs\"\n  }, \"template-code-previous\")), mdx(\"h2\", {\n    \"id\": \"storing-a-mapping\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#storing-a-mapping\",\n    \"aria-label\": \"storing a mapping permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Storing a Mapping\"), mdx(\"p\", null, \"Let's now extend our Incrementer to not only manage one number, but to manage one number per user!\"), mdx(\"h3\", {\n    \"id\": \"1-storage-hashmap\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-storage-hashmap\",\n    \"aria-label\": \"1 storage hashmap permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Storage HashMap\"), mdx(\"p\", null, \"In addition to storing individual values, ink! also supports \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HashMap\"), \" which allows you to store items in a key-value mapping.\"), mdx(\"p\", null, \"Here is an example of a mapping from a user to a number:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[ink(storage)]\\npub struct MyContract {\\n    // Store a mapping from AccountIds to a u32\\n    my_number_map: ink_storage::collections::HashMap<AccountId, u32>,\\n}\\n\")), mdx(\"p\", null, \"This means that for a given key, you can store a unique instance of a value type. In this case, each \\\"user\\\" gets their own number, and we can build logic so that only they can modify their own numbers.\"), mdx(\"h3\", {\n    \"id\": \"2-storage-hashmap-api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-storage-hashmap-api\",\n    \"aria-label\": \"2 storage hashmap api permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Storage HashMap API\"), mdx(\"p\", null, \"You can find the full ink! HashMap API doc \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://paritytech.github.io/ink/ink_storage/collections/hashmap/struct.HashMap.html\"\n  }, \"here\"), \". Here are some of the most common functions you might use:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"/// Inserts a key-value pair into the map.\\n///\\n/// Returns the previous value associated with the same key if any.\\n/// If the map did not have this key present, `None` is returned.\\npub fn insert(&mut self, key: K, new_value: V) -> Option<V> {/* --snip-- */}\\n\\n/// Removes the key/value pair from the map associated with the given key.\\n///\\n/// - Returns the removed value if any.\\npub fn take<Q>(&mut self, key: &Q) -> Option<V> {/* --snip-- */}\\n\\n/// Returns a shared reference to the value corresponding to the key.\\n///\\n/// The key may be any borrowed form of the map's key type,\\n/// but `Hash` and `Eq` on the borrowed form must match those for the key type.\\npub fn get<Q>(&self, key: &Q) -> Option<&V> {/* --snip-- */}\\n\\n/// Returns a mutable reference to the value corresponding to the key.\\n///\\n/// The key may be any borrowed form of the map's key type,\\n/// but `Hash` and `Eq` on the borrowed form must match those for the key type.\\npub fn get_mut<Q>(&mut self, key: &Q) -> Option<&mut V> {/* --snip-- */}\\n\\n/// Returns `true` if there is an entry corresponding to the key in the map.\\npub fn contains_key<Q>(&self, key: &Q) -> bool {/* --snip-- */}\\n\\n/// Converts the OccupiedEntry into a mutable reference to the value in the entry\\n/// with a lifetime bound to the map itself.\\npub fn into_mut(self) -> &'a mut V {/* --snip-- */}\\n\\n/// Gets the given key's corresponding entry in the map for in-place manipulation.\\npub fn entry(&mut self, key: K) -> Entry<K, V> {/* --snip-- */}\\n\")), mdx(\"h3\", {\n    \"id\": \"3initializing-a-hashmap\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#3initializing-a-hashmap\",\n    \"aria-label\": \"3initializing a hashmap permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"3.Initializing a HashMap\"), mdx(\"p\", null, \"As mentioned, not initializing storage before you use it is a common error that can break your smart contract. For each key in a storage value, the value needs to be set before you can use it. To do this, we will create a private function which handles when the value is set and when it is not, and make sure we never work with uninitialized storage.\"), mdx(\"p\", null, \"So given \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"my_number_map\"), \", imagine we wanted the default value for any given key to be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \". We can build a function like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"\\n#![cfg_attr(not(feature = \\\"std\\\"), no_std)]\\n\\nuse ink_lang as ink;\\n\\n#[ink::contract]\\nmod mycontract {\\n\\n    #[ink(storage)]\\n    pub struct MyContract {\\n        // Store a mapping from AccountIds to a u32\\n        my_number_map: ink_storage::collections::HashMap<AccountId, u32>,\\n    }\\n\\n    impl MyContract {\\n        /// Public function.\\n        /// Default constructor.\\n        #[ink(constructor)]\\n        pub fn default() -> Self {\\n            Self {\\n                my_number_map: Default::default(),\\n            }\\n        }\\n\\n        /// Private function.\\n        /// Returns the number for an AccountId or 0 if it is not set.\\n        fn my_number_or_zero(&self, of: &AccountId) -> u32 {\\n            let balance = self.my_number_map.get(of).unwrap_or(&0);\\n            *balance\\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, \"Here we see that after we \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get\"), \" the reference from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"my_number_map\"), \" we call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unwrap_or\"), \" which will either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unwrap\"), \" the reference, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"or\"), \" if there is no value, return some known reference. Then, when building functions that interact with this HashMap, you need to always remember to call this function rather than getting the value directly from storage.\"), mdx(\"p\", null, \"Here is an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"\\n#![cfg_attr(not(feature = \\\"std\\\"), no_std)]\\n\\nuse ink_lang as ink;\\n\\n#[ink::contract]\\nmod mycontract {\\n\\n    #[ink(storage)]\\n    pub struct MyContract {\\n        // Store a mapping from AccountIds to a u32\\n        my_number_map: ink_storage::collections::HashMap<AccountId, u32>,\\n    }\\n\\n    impl MyContract {\\n        // Get the value for a given AccountId\\n        #[ink(message)]\\n        pub fn get(&self, of: AccountId) -> u32 {\\n            self.my_number_or_zero(&of)\\n        }\\n\\n        // Get the value for the calling AccountId\\n        #[ink(message)]\\n        pub fn get_my_number(&self) -> u32 {\\n            let caller = self.env().caller();\\n            self.my_number_or_zero(&caller)\\n        }\\n\\n        // Returns the number for an AccountId or 0 if it is not set.\\n        fn my_number_or_zero(&self, of: &AccountId) -> u32 {\\n            let value = self.my_number_map.get(of).unwrap_or(&0);\\n            *value\\n        }\\n    }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"4-contract-caller\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#4-contract-caller\",\n    \"aria-label\": \"4 contract caller permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"4. Contract Caller\"), mdx(\"p\", null, \"As you might have noticed in the example above, we use a special function called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self.env().caller()\"), \". This function is available throughout the contract logic and will always return to you the contract caller.\"), mdx(Message, {\n    type: \"gray\",\n    title: \"Note\",\n    text: \"The contract caller is not the same as the origin caller. \\n  If a user triggers a contract which then calls a subsequent contract, \\n  the `self.env().caller()` in the second contract will be the address \\n  of the first contract, not the original user.\",\n    mdxType: \"Message\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self.env().caller()\"), \" can be used in a number of different ways. In the example above, we are basically creating an \\\"access control\\\" layer which only allows users to access their own values. You can also save the contract owner during contract deployment for future references:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"\\n#![cfg_attr(not(feature = \\\"std\\\"), no_std)]\\n\\nuse ink_lang as ink;\\n\\n#[ink::contract]\\nmod mycontract {\\n\\n    #[ink(storage)]\\n    pub struct MyContract {\\n        // Store a contract owner\\n        owner: AccountId,\\n    }\\n\\n    impl MyContract {\\n        #[ink(constructor)]\\n        pub fn new() -> Self {\\n            Self {\\n                owner: Self::env().caller();\\n            }\\n        }\\n        /* --snip-- */\\n    }\\n}\\n\")), mdx(\"p\", null, \"Then you can write permissioned functions which checks that the current caller is the owner of the contract.\"), mdx(\"h3\", {\n    \"id\": \"5-your-turn\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#5-your-turn\",\n    \"aria-label\": \"5 your turn permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"5. Your Turn\"), mdx(\"p\", null, \"Follow the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ACTION\"), \"s in the template code to introduce a storage map to your contract.\"), mdx(\"p\", null, \"Remember to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cargo +nightly test\"), \" to test your work.\"), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Template \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/ink-workshop/1.5-template.rs\"\n  }, \"template-code\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/ink-workshop/1.5-finished-code.rs\"\n  }, \"template-code-final\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Previous Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/ink-workshop/1.4-finished-code.rs\"\n  }, \"template-code-previous\")), mdx(\"h2\", {\n    \"id\": \"updating-a-value\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#updating-a-value\",\n    \"aria-label\": \"updating a value permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Updating a Value\"), mdx(\"p\", null, \"The final step in our Incrementer contract is to allow users to update their own values.\"), mdx(\"h3\", {\n    \"id\": \"1-modifying-a-hashmap\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-modifying-a-hashmap\",\n    \"aria-label\": \"1 modifying a hashmap permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Modifying a HashMap\"), mdx(\"p\", null, \"Making changes to the value of a HashMap is just as sensitive as getting the value. If you try to modify some value before it has been initialized, your contract will panic!\"), mdx(\"p\", null, \"But have no fear, we can continue to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"my_number_or_zero\"), \" function we created to protect us from these situations!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"impl MyContract {\\n\\n    /* --snip-- */\\n\\n    // Set the value for the calling AccountId\\n    #[ink(message)]\\n    pub fn set_my_number(&mut self, value: u32) {\\n        let caller = self.env().caller();\\n        self.my_number_map.insert(caller, value);\\n    }\\n\\n    // Add a value to the existing value for the calling AccountId\\n    #[ink(message)]\\n    pub fn add_my_number(&mut self, value: u32) {\\n        let caller = self.env().caller();\\n        let my_number = self.my_number_or_zero(&caller);\\n        self.my_number_map.insert(caller, my_number + value);\\n    }\\n\\n    /// Returns the number for an AccountId or 0 if it is not set.\\n    fn my_number_or_zero(&self, of: &AccountId) -> u32 {\\n        *self.my_number_map.get(of).unwrap_or(&0)\\n    }\\n}\\n\")), mdx(\"p\", null, \"Here we have written two kinds of functions which modify a HashMap. One simply inserts the value\\ndirectly into storage, with no need to read the value first, and another one modifies the existing\\nvalue. Note how we can always \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insert\"), \" the value without worry, as that initialized the value in\\nstorage, but before you can get or modify anything, we need to call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"my_number_or_zero\"), \" to make\\nsure we are working with a real value.\"), mdx(\"h3\", {\n    \"id\": \"2-update-or-insert-upsert\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-update-or-insert-upsert\",\n    \"aria-label\": \"2 update or insert upsert permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Update or Insert (Upsert)\"), mdx(\"p\", null, \"We will not always have an existing value on our contract's storage. We can take advantage of the\\nRust \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Option<T>\"), \" type to help us.\\nIf there's no value on the contract storage we will insert a new one; on the contrary if there is\\nan existing value we will only update it.\"), mdx(\"p\", null, \"ink! HashMaps expose the well-known\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://doc.rust-lang.org/beta/std/collections/hash_map/enum.Entry.html\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"HashMap Entry API\")), \"\\nthat we can use to achieve this type of \\\"upsert\\\" behavior:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let caller = self.env().caller();\\nself.my_number_map\\n    .entry(caller)\\n    .and_modify(|old_value| *old_value += by)\\n    .or_insert(by);\\n\")), mdx(\"h3\", {\n    \"id\": \"3-your-turn-2\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#3-your-turn-2\",\n    \"aria-label\": \"3 your turn 2 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"3. Your Turn\"), mdx(\"p\", null, \"Follow the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ACTION\"), \"s to finish your Incrementer smart contract.\"), mdx(\"p\", null, \"Remember to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cargo +nightly test\"), \" to test your work.\"), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Template \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/ink-workshop/1.6-template.rs\"\n  }, \"template-code\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/ink-workshop/1.6-finished-code.rs\"\n  }, \"template-code-final\")), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \" Previous Solution \")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/tutorials/ink-workshop/1.5-finished-code.rs\"\n  }, \"template-code-previous\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#learning-outcomes","title":"Learning outcomes"},{"url":"#contract-template","title":"Contract Template","items":[{"url":"#1-ink","title":"1. ink!"},{"url":"#2-start-a-new-project","title":"2. Start a New Project"}]},{"url":"#storing-a-value","title":"Storing a Value","items":[{"url":"#1-supported-types","title":"1. Supported Types"},{"url":"#2-contract-deployment","title":"2. Contract Deployment"},{"url":"#3-your-turn","title":"3. Your Turn"}]},{"url":"#interacting-with-a-storage-value","title":"Interacting with a Storage Value","items":[{"url":"#1-contract-functions","title":"1. Contract Functions"},{"url":"#2-public-and-private-functions","title":"2. Public and Private Functions"},{"url":"#3-getting-a-value","title":"3. Getting a Value"},{"url":"#4-your-turn","title":"4. Your Turn"}]},{"url":"#incrementing-the-value","title":"Incrementing the Value","items":[{"url":"#1-mutable-and-immutable-functions","title":"1. Mutable and Immutable Functions"},{"url":"#2-lazy-storage-values","title":"2. Lazy Storage Values"},{"url":"#3-your-turn-1","title":"3. Your Turn"}]},{"url":"#storing-a-mapping","title":"Storing a Mapping","items":[{"url":"#1-storage-hashmap","title":"1. Storage HashMap"},{"url":"#2-storage-hashmap-api","title":"2. Storage HashMap API"},{"url":"#3initializing-a-hashmap","title":"3.Initializing a HashMap"},{"url":"#4-contract-caller","title":"4. Contract Caller"},{"url":"#5-your-turn","title":"5. Your Turn"}]},{"url":"#updating-a-value","title":"Updating a Value","items":[{"url":"#1-modifying-a-hashmap","title":"1. Modifying a HashMap"},{"url":"#2-update-or-insert-upsert","title":"2. Update or Insert (Upsert)"},{"url":"#3-your-turn-2","title":"3. Your Turn"}]}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/tutorials/08-ink-workshop/b-develop-smart-contract/index.mdx"}},"pageContext":{"slug":"/tutorials/v3/ink-workshop/pt2","version":"3.0","navMenuSlug":"inkWorkshop","locale":"en","hrefLang":"en-US","originalPath":"/tutorials/v3/ink-workshop/pt2/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
{
    "componentChunkName": "component---src-templates-tut-template-tsx",
    "path": "/tutorials/v3/kitties/pt2/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/tutorials/v3/kitties/pt2","title":"Create a Front-end for the Kitties Chain","hideNav":null,"difficulty":2,"duration":"2 Hours","relevantSkills":["Javascript","React"],"section":"tutorials","category":"FRAME"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Create a Front-end for the Kitties Chain\",\n  \"slug\": \"/tutorials/v3/kitties/pt2\",\n  \"version\": 3,\n  \"section\": \"tutorials\",\n  \"category\": \"FRAME\",\n  \"keywords\": \"nft, kitties, frontend\",\n  \"difficulty\": 2,\n  \"duration\": \"2 Hours\",\n  \"relevantSkills\": [\"Javascript\", \"React\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Message = makeShortcode(\"Message\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Message, {\n    type: \"gray\",\n    title: \"Note\",\n    text: \"If you haven't completed [Part I](/tutorials/v3/kitties/pt2) and just want to focus on building the Kitties front-end, \\nclone the Kitty node solution from [this branch](https://github.com/substrate-developer-hub/substrate-node-template/tree/tutorials/kitties) \\nand use that to follow this part of the tutorial.\",\n    mdxType: \"Message\"\n  }), mdx(\"p\", null, \"In Part I we created all of the back-end portion of our Kitties application. In this part, it's\\ntime to build a user interface which can access and interact with our custom storage items and\\nfunctions. We'll be using: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://polkadot.js.org/docs/api/\"\n  }, \"Polkadot-JS API\"), \" \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-front-end-template\"\n  }, \"Substrate Front-end Template\"), \", a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://reactjs.org/\"\n  }, \"React app\"), \"\\nthat wraps Polkadot-JS API to make it easier to make RPC's to our chain's runtime.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://framagit.org/Deevad/cat-avatar-generator\"\n  }, \"library for generating Cat avatars\"), \",\\nlicensed under \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://creativecommons.org/licenses/by/4.0/\"\n  }, \"CC-By 4.0\"), \" attribution. Thank you\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://framagit.org/Deevad\"\n  }, \"David Revoy's\"), \" for making this available.\")), mdx(\"p\", null, \"In Part 2, there will only be two main sections: the first focussing on setting up the Front-end\\nTemplate and the second focussing on building custom React components that can interact with our\\nKitty node.\"), mdx(\"p\", null, \"In case you get stuck, the complete solution for this part of the tutorial\\ncan be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-front-end-template/tree/tutorials/kitties\"\n  }, \"here\"), \".\"), mdx(\"h2\", {\n    \"id\": \"getting-started\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#getting-started\",\n    \"aria-label\": \"getting started permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Getting started\"), mdx(\"p\", null, \"The first step of this tutorial is to familiarize yourself with the Substrate Front-end template.\\nIn this step we will go through an overview of what our React app will look like and the different\\ncomponents we'll be building. Start by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-front-end-template\"\n  }, \"installing the Front-end Template\"), \"\\nfrom your terminal:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git clone https://github.com/substrate-developer-hub/substrate-front-end-template.git\\ncd substrate-front-end-template\\nyarn install\\n\")), mdx(\"p\", null, \"Open the template in a code editor. You'll notice the following structure (we've only including the directories we care about for this\\ntutorial):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"substrate-front-end-template\\n|\\n+-- public\\n|   |\\n|   +-- assets              <-- Kitty avatar PNG files\\n|\\n+-- src                     <-- our React components\\n|   |\\n|   +-- __tests__\\n|   |\\n|   +-- config              <-- where to specify our custom types\\n|   |\\n|   +-- substrate-lib       <-- lib to give access to PolkadotJS API \\n|   |   |\\n|   |   +-- components      <-- contains TxButton, used throughout our application\\n|   |\\n|   ...\\n...\\n\")), mdx(\"p\", null, \"In a separate terminal, start an instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node-kitties\"), \" that you built in Part I (or use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-node-template/tree/tutorials/kitties\"\n  }, \"Kitty node\\nsolution\"), \"\\ninstead if you haven't completed part I):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Launch `node-kitties` from its directory.\\ncd kitties/\\n./target/release/node-kitties --dev --tmp\\n\")), mdx(\"p\", null, \"Now, in the same directory as where you installed the Front-end template, launch it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"yarn start\\n\")), mdx(\"p\", null, \"You should see a tab open up with the front-end template displaying basic features of your chain.\\nNotice that it comes with a number of prebuilt components to provide basic interactions with a Substrate\\nNode Template blockchain.\"), mdx(\"h3\", {\n    \"id\": \"specifying-types\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#specifying-types\",\n    \"aria-label\": \"specifying types permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Specifying types\"), mdx(\"p\", null, \"An important starting point when setting up a custom front-end for a Substrate node is creating a\\nJSON file with all of the node's custom types. These are types that we created in our pallet that\\nthe Polkadot JS API doesn't know about. Learn more about \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://polkadot.js.org/docs/api/start/types.extend/\"\n  }, \"Extending types\"), \"\\nin the Polkadot JS API documentation.\"), mdx(\"p\", null, \"In our case, we have two custom types we'll need to add: the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Gender\"), \" enum and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Kitty\"), \" struct.\"), mdx(\"p\", null, \"To do this, go into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/config/types.json\"), \" and replace the whole file with:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"Gender\\\": {\\n    \\\"_enum\\\": [\\\"Male\\\", \\\"Female\\\"]\\n  },\\n  \\\"Kitty\\\": {\\n    \\\"dna\\\": \\\"[u8; 16]\\\",\\n    \\\"price\\\": \\\"Option<Balance>\\\",\\n    \\\"gender\\\": \\\"Gender\\\",\\n    \\\"owner\\\": \\\"AccountId\\\"\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"sketching-out-our-components\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#sketching-out-our-components\",\n    \"aria-label\": \"sketching out our components permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sketching out our components\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-front-end-template\"\n  }, \"Substrate Frontend Template\"), \" components use Polkadot-JS API and an\\nRPC endpoints to communicate with a Substrate node. This allows us to use it to read storage items,\\nand make extrinsics by calling our pallet's dispatchable functions. Before we get to that, let's\\nsketch out the different parts of our application.\"), mdx(\"p\", null, \"We'll be building out a total of 3 components:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Kitties.js\"), \": this will render the Kitty pane, and contains the logics of fetching all kitties\\ninformation from the connecting Substrate node.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyCards.js\"), \": this will render a React card component containing a Kitty's relevant\\ninformation, avatar and buttons to interact with it.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyAvatar.js\"), \": this will handle the logic to map Kitty DNA to the library of PNGs we're using\\nto create unique Kitty avatars.\"))), mdx(\"h3\", {\n    \"id\": \"polkadot-js-api-basics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#polkadot-js-api-basics\",\n    \"aria-label\": \"polkadot js api basics permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Polkadot JS API Basics\"), mdx(\"p\", null, \"Before moving on to the next section, we reccommend you read a little Polkadot JS API documentation\\nto understand the basics of how we will be querying storage and triggering transactions. Here are\\nsome good resources:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://polkadot.js.org/docs/api/start/basics\"\n  }, \"Basics and Metadata\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://polkadot.js.org/docs/api/start/api.rpc\"\n  }, \"RPC queries\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://polkadot.js.org/docs/substrate/storage\"\n  }, \"Storage methods\"), \" such as\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"api.query.<pallet>.<method>\"), \" to access a pallet instance in a runtime\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://polkadot.js.org/docs/substrate/extrinsics\"\n  }, \"Extrinsics methods\"), \" such as\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"api.tx.<pallet>.<method>\"), \" to trigger a transaction.\")), mdx(\"h2\", {\n    \"id\": \"creating-custom-components\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#creating-custom-components\",\n    \"aria-label\": \"creating custom components permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating custom components\"), mdx(\"h3\", {\n    \"id\": \"create-kittiesjs\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#create-kittiesjs\",\n    \"aria-label\": \"create kittiesjs permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Create \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"Kitties.js\")), mdx(\"p\", null, \"This is the component that will get rendered by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Apps.js\"), \", the top-most level component. So it does\\nthe heavy lifting, with the help of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyAvatar.js\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittCards.js\"), \".\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Start by creating a file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Kitties.js\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" and paste the following imports:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import React, { useEffect, useState } from 'react';\\nimport { Form, Grid } from 'semantic-ui-react';\\n\\nimport { useSubstrate } from './substrate-lib';\\nimport { TxButton } from './substrate-lib/components';\\n\\nimport KittyCards from './KittyCards';\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The way our custom components make use of Polkadot-JS API is by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"substrate-lib\"), \", which is a\\nwrapper around \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://polkadot.js.org/docs/api/start/create/\"\n  }, \"Polkadot JS API instance\"), \" and\\nallows us to retrieve account keys from the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://polkadot.js.org/docs/api/start/keyring\"\n  }, \"Polkadot-JS keyring\"), \".\\nThis is why we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useSubstrate\"), \" which is exported by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/substrate-lib/SubstrateContext.js\"), \" and\\nused to create the wrapper.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Proceed by pasting in the following code snippet:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Construct a Kitty ID from storage key\\nconst convertToKittyHash = entry =>\\n  `0x${entry[0].toJSON().slice(-64)}`;\\n\\n// Construct a Kitty object \\nconst constructKitty = (hash, { dna, price, gender, owner }) => ({\\n  id: hash,\\n  dna,\\n  price: price.toJSON(),\\n  gender: gender.toJSON(),\\n  owner: owner.toJSON()\\n});\\n\\n// Use React hooks\\nexport default function Kitties (props) {\\n  const { api, keyring } = useSubstrate();\\n  const { accountPair } = props;\\n\\n  const [kittyHashes, setKittyHashes] = useState([]);\\n  const [kitties, setKitties] = useState([]);\\n  const [status, setStatus] = useState('');\\n// snip\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The above code handles a few important things for our application:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"convertToKittyHash\"), \" helps construct a Kitty ID from its storage key\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"constructKitty\"), \" is a function to hold all Kitty objects\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Kitties\"), \" enables us to subscribe to chain storage item changes and use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useEffect\"), \"\\nReact hook to update the state of our other components.\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"There are two things our app needs to subscribe to: storage changes in the amount of Kitties and\\nchanges in Kitty objects. To do this we'll create \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/hooks-reference.html#useeffect\"\n  }, \"a subscription\"), \"\\nfunction for each.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We'll use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api.query.substrateKitties.kittyCnt\"), \" to listen for a change in the amount of Kitties,\\nwhich will query \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyCnt\"), \" from our Kitties pallet storage item. Then,\\nwe'll use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"entries()\"), \" method from Polkadot-JS API to get Kitty IDs and transform them\\nwith the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"convertToKittyHash\"), \" function. \")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To enable this, paste the following snippet:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Subscription function for setting Kitty IDs\\n  const subscribeKittyCnt = () => {\\n    let unsub = null;\\n\\n    const asyncFetch = async () => {\\n        // Query KittyCnt from runtime\\n      unsub = await api.query.substrateKitties.kittyCnt(async cnt => {\\n        // Fetch all Kitty objects using entries()\\n        const entries = await api.query.substrateKitties.kitties.entries();\\n        // Retrieve only the Kitty ID and set to state\\n        const hashes = entries.map(convertToKittyHash);\\n        setKittyHashes(hashes);\\n      });\\n    };\\n\\n    asyncFetch();\\n\\n    // return the unsubscription cleanup function\\n    return () => {\\n      unsub && unsub();\\n    };\\n  };\\n\")), mdx(\"br\", null), mdx(Message, {\n    type: \"green\",\n    title: \"Learn More\",\n    text: \"\\n`entries()` is a Polkadot-JS API function that gives us the entire storage map of `Kitties` that\\nwe defined in Part I. If there's nothing in the storage, it returns `None`. All functions that\\ninteract with a chain will always return a **Promise** in Polkadot-JS API. So we wait for it to be\\nresolved, and return us all the map keys and objects.\\n\\nYou can see this in action if you go to the console of your browser running a node Front-end and\\nentering `entries`, or get the first Kitty object in storage by doing: `entries[0][1].toJSON()`.\\n  \",\n    mdxType: \"Message\"\n  })), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Similarly for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subscribeKitties\"), \", paste the following code snippet:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"  // Subscription function to construct a Kitty object\\n  const subscribeKitties = () => {\\n    let unsub = null;\\n\\n    const asyncFetch = async () => {\\n        // Get Kitty objects from storage \\n      unsub = await api.query.substrateKitties.multi(kittyHashes, kitties => {\\n        // Create an array of Kitty objects from `constructKitty`\\n        const kittyArr = kitties\\n          .map((kitty, ind) => constructKitty(kittyHashes[ind], kitty.value));\\n        // Set the array of Kitty objects to state\\n        setKitties(kittyArr);\\n      });\\n    };\\n\\n    asyncFetch();\\n\\n    // return the unsubscription cleanup function\\n    return () => {\\n      unsub && unsub();\\n    };\\n  };\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A Substrate \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/advanced/storage#storage-value-keys\"\n  }, \"storage item key\"), \" is composed of a concatenation\\nof the hash of the pallet name, the hash of the storage item name, and finally the hash of the key\\nused in the map. Now we want to extract only the key for the map, so we extract the last 64 bytes\\nout in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"convertToKittyHash\"), \" function.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"convertToKittyHash\"), \" helper function (declared at step 2) in the subscription function to transform an entry to its corresponding hash:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"  const asyncFetch = async () => {\\n      unsub = await api.query.substrateKitties.kitties.kittyCnt(async cnt => {\\n        // Fetch all kitty keys\\n        const entries = await api.query.substrateKitties.kitties.kitties.entries();\\n        const hashes = entries.map(convertToKittyHash);\\n        setKittyHashes(hashes);\\n      });\\n    };\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"asyncFetch\"), \" we have subscribed to the Kitties storage. When the component is teared down, we\\nwant to make sure the subscription is cleaned up (unsubscribed). So we return a clean up function\\nfor the effect hook. Refer to\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\"\n  }, \"Effects with Cleanup\"), \" to learn more\\nabout cleanup functions.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Return the clean-up function:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"  // return the unsubscription cleanup function\\n    return () => {\\n      unsub && unsub();\\n    };\\n  };\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Now all that's left to do for our component to listen for changes in our node's runtime storage is\\nto pass in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subscribeKittyCnt\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subscribeKitties\"), \" to React's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" function. Add these\\nlines to enable this:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"useEffect(subscribeKittyCnt, [api, keyring]);\\nuseEffect(subscribeKitties, [api, kittyHashes]);\\n\")))), mdx(\"p\", null, \"Congratulations! We have setup the ground work of accessing the chain and saving all Kitty information\\ninternally using React. We'll come back to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Kitties.js\"), \" component later once we create all the missing\\ncomponents of our application to complete it. \"), mdx(\"h3\", {\n    \"id\": \"create-kittyavatarjs\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#create-kittyavatarjs\",\n    \"aria-label\": \"create kittyavatarjs permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Create \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"KittyAvatar.js\")), mdx(\"p\", null, \"In this component, all we're doing is mapping a library of PNG images to the bytes of our Kitty DNA.\\nSince it's mostly all Javascript, we won't be going into much detail.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create a file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyAvatar.js\"), \" in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" folder of your project and paste in the following\\ncode:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import React from 'react';\\n\\n// Generate an array [start, start + 1, ..., end] inclusively\\nconst genArray = (start, end) =>\\n  Array.from(Array(end - start + 1).keys()).map(v => v + start);\\n\\nconst IMAGES = {\\n  accessory: genArray(1, 20).map(n =>\\n    `${process.env.PUBLIC_URL}/assets/KittyAvatar/accessorie_${n}.png`),\\n  body: genArray(1, 15).map(n =>\\n    `${process.env.PUBLIC_URL}/assets/KittyAvatar/body_${n}.png`),\\n  eyes: genArray(1, 15).map(n =>\\n    `${process.env.PUBLIC_URL}/assets/KittyAvatar/eyes_${n}.png`),\\n  mouth: genArray(1, 10).map(n =>\\n    `${process.env.PUBLIC_URL}/assets/KittyAvatar/mouth_${n}.png`),\\n  fur: genArray(1, 10).map(n =>\\n    `${process.env.PUBLIC_URL}/assets/KittyAvatar/fur_${n}.png`)\\n};\\n\\nconst dnaToAttributes = dna => {\\n  const attribute = (index, type) => IMAGES[type][dna[index] % IMAGES[type].length];\\n\\n  return {\\n    body: attribute(0, 'body'),\\n    eyes: attribute(1, 'eyes'),\\n    accessory: attribute(2, 'accessory'),\\n    fur: attribute(3, 'fur'),\\n    mouth: attribute(4, 'mouth')\\n  };\\n};\\n\\nconst KittyAvatar = props => {\\n  const outerStyle = { height: '160px', position: 'relative', width: '50%' };\\n  const innerStyle = { height: '150px', position: 'absolute', top: '3%', left: '50%' };\\n  const { dna } = props;\\n\\n  if (!dna) return null;\\n\\n  const cat = dnaToAttributes(dna);\\n  return <div style={outerStyle}>\\n    <img alt='body' src={cat.body} style={innerStyle} />\\n    <img alt='fur' src={cat.fur} style={innerStyle} />\\n    <img alt='mouth' src={cat.mouth} style={innerStyle} />\\n    <img alt='eyes' src={cat.eyes} style={innerStyle} />\\n    <img alt='accessory' src={cat.accessory} style={innerStyle} />\\n  </div>;\\n};\\n\\nexport default KittyAvatar;\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Notice that the only properties being passed in is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dna\"), \", which will be passed from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyCards.js\"), \".\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The logic in this component is based on a specific Cat Avatar library of PNGs.\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://framagit.org/Deevad/cat-avatar-generator/-/tree/master/avatars/cat\"\n  }, \"Download it\"), \"\\nand paste the contents of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"avatars/cat\"), \" inside a new folder called \\\"KittyAvatar\\\" in your project's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public/assets\"), \"\\nfolder.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Save and close \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyAvatar.js\"), \".\"))), mdx(\"h3\", {\n    \"id\": \"write-transfermodal-in-kittycardsjs\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#write-transfermodal-in-kittycardsjs\",\n    \"aria-label\": \"write transfermodal in kittycardsjs permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Write \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"TransferModal\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"KittyCards.js\")), mdx(\"p\", null, \"Our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyCards.js\"), \" component will have three sections to it:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TransferModal\"), \": a modal that uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TxButton\"), \" component.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyCard\"), \": a card that renders the Kitty avatar using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyAvatar\"), \" component as well\\nas all other Kitty information (id, dna, owner, gender and price).\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyCards\"), \": a component that renders a grid for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyCard\"), \" (yes, singular!) described above.\"))), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"As a preliminary step, create a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyCards.js\"), \" and add the following imports:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import React from 'react';\\nimport { Button, Card, Grid, Message, Modal, Form, Label } from 'semantic-ui-react';\\n\\nimport KittyAvatar from './KittyAvatar'; \\nimport { TxButton } from './substrate-lib/components';\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Let's outline what the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TransferModal\"), \" will do. Conveniently, the Substrate Front-end Template comes\\nwith a component called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TxButton\"), \" which is a useful way to include a transfer button that interacts\\nwith a node. This component will allow us to send a transaction into our node and trigger a\\nsigned extrinsic for the Kitties pallet.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The way it is built can be broken down into the following pieces:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A \\\"transfer\\\" button exists, which opens up a modal upon being clicked.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This modal, we'll call \\\"Kitty Transfer\\\" is a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Form\"), \" containing (1) the Kitty ID and (2) an input\\nfield for a receiving address.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It also contains a \\\"transfer\\\" and \\\"cancel\\\" button.\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"See the screenshot for reference:\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/img/tutorials/kitties-workshop/kitty-transfer-shot.png\",\n    \"alt\": \"Kitty Transfer\"\n  }))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The first thing we'll do is to extract the properties (or \\\"props\\\") we need using React hooks.\\nThese are: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kitty\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accountPair\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setStatus\"), \". Do this by pasting in the following code snippet:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const TransferModal = props => {\\n  const { kitty, accountPair, setStatus } = props;\\n  const [open, setOpen] = React.useState(false);\\n  const [formValue, setFormValue] = React.useState({});\\n\\n  const formChange = key => (ev, el) => {\\n    setFormValue({ ...formValue, [key]: el.value });\\n  };\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We also need a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"confirmAndClose\"), \" function to be passed into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TxButton\"), \" component, being called\\nwhen a confirmation action is triggered. This function will receive an unsubscription function from\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TxButton\"), \". In addition to calling this function for clean up, we will just close the modal dialog box.\\nPaste the following snippet:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"  const confirmAndClose = (unsub) => {\\n    unsub();\\n    setOpen(false);\\n  };\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Our Kitty Card has a \\\"transfer\\\" button that opens up a\\nmodal where a user can choose an address to send their Kitty to. That modal will have:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a Title\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"an read-only field for a Kitty ID\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"an input field for an Account ID\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a \\\"Cancel\\\" button which closes the Transfer modal\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TxButton\"), \" React component to trigger the transaction\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Paste this in to complete \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TransferModal\"), \" and read the\\ncomments to follow what each piece of code is doing:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"return <Modal onClose={() => setOpen(false)} onOpen={() => setOpen(true)} open={open}\\n    trigger={<Button basic color='blue'>Transfer</Button>}>\\n\\n    {/* The title of the modal */}\\n    <Modal.Header>Kitty Transfer</Modal.Header>\\n\\n    <Modal.Content><Form>\\n      {/* The modal's inputs fields */}\\n      <Form.Input fluid label='Kitty ID' readOnly value={kitty.id}/>\\n      <Form.Input fluid label='Receiver' placeholder='Receiver Address' onChange={formChange('target')}/>\\n    </Form></Modal.Content>\\n\\n    <Modal.Actions>\\n      {/* The cancel button */}\\n      <Button basic color='grey' onClick={() => setOpen(false)}>Cancel</Button>\\n      {/* The TxButton component */}\\n      <TxButton\\n        accountPair={accountPair} label='Transfer' type='SIGNED-TX' setStatus={setStatus}\\n        onClick={confirmAndClose}\\n        attrs={{\\n          palletRpc: 'substrateKitties',\\n          callable: 'transfer',\\n          inputParams: [formValue.target, kitty.id],\\n          paramFields: [true, true]\\n        }}\\n      />\\n    </Modal.Actions>\\n  </Modal>;\\n};\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The next part of our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyCards.js\"), \" component is to create the part that renders the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyAvatar.js\"), \" component and the data passed in from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kitties\"), \" props in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Kitty.js\"), \".\"))), mdx(\"h3\", {\n    \"id\": \"write-kittycard-in-kittycardsjs\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#write-kittycard-in-kittycardsjs\",\n    \"aria-label\": \"write kittycard in kittycardsjs permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Write \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"KittyCard\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"KittyCards.js\")), mdx(\"p\", null, \"  We'll use React's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Card\"), \" component to create a card that renders the Kitty avatar as well as the\\nKitty ID, DNA, gender, owner and price.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"As you might have guessed, we'll use React props to pass in data to our KittyCard. Paste the\\nfollowing code snippet:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Use props\\nconst KittyCard = props => {\\n  const { kitty, accountPair, setStatus } = props;\\n  const { id = null, dna = null, owner = null, gender = null, price = null } = kitty;\\n  const displayDna = dna && dna.toJSON();\\n  const isSelf = accountPair.address === kitty.owner;\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Write out the contents for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Card\"), \" component. Paste the following and read the comments to\\nunderstand what each line is doing:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"return <Card>\\n  { isSelf && <Label as='a' floating color='teal'>Mine</Label> }\\n  {/* Render the Kitty Avatar */}\\n  <KittyAvatar dna={dna.toU8a()} />\\n  <Card.Content>\\n    {/* Display the Kitty ID */}\\n    <Card.Header style={{ fontSize: '1em', overflowWrap: 'break-word' }}>\\n      ID: {id}\\n    </Card.Header>\\n    {/* Display the Kitty DNA */}\\n    <Card.Meta style={{ fontSize: '.9em', overflowWrap: 'break-word' }}>\\n      DNA: {displayDna}\\n    </Card.Meta>\\n    {/* Display the Kitty ID, Gender, Owner and Price */}\\n    <Card.Description>\\n      <p style={{ overflowWrap: 'break-word' }}>\\n        Gender: {gender}\\n      </p>\\n      <p style={{ overflowWrap: 'break-word' }}>\\n        Owner: {owner}\\n      </p>\\n      <p style={{ overflowWrap: 'break-word' }}>\\n        Price: {price}\\n      </p>\\n    </Card.Description>\\n  </Card.Content>\\n  // ...\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Before closing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Card/>\"), \" component we want to render the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TransferModal\"), \" we previously built\\n\", \"\\u2014\", \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"only if the Kitty is transferrable by its owner\"), \". Paste this code snippet to handle this\\nfunctionality:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"  {/* Render the transfer button using TransferModal */}\\n  <Card.Content extra style={{ textAlign: 'center' }}>{\\n    owner === accountPair.address\\n      ? <TransferModal kitty={kitty} accountPair={accountPair} setStatus={setStatus}/>\\n      : ''\\n  }</Card.Content>\\n</Card>;\\n};\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"It's time to put all the pieces we've built together. We need a function to:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Check whether there's any Kitties to render and render a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"No Kitty found here... Create one now!\\\"\"), \"\\nmessage if there aren't any.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If there are, render them in a 3 column grid.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Have a look at the comments to understand the parts of this code snippet and paste it in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyCards.js\"), \":\"))), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const KittyCards = props => {\\n  const { kitties, accountPair, setStatus } = props;\\n\\n  {/* Check the number of Kitties */}\\n  if (kitties.length === 0) {\\n    return <Message info>\\n      <Message.Header>No Kitty found here... Create one now!&nbsp;\\n        <span role='img' aria-label='point-down'>\\uD83D\\uDC47</span>\\n      </Message.Header>\\n    </Message>;\\n  }\\n  {/* Render Kitties using Kitty Card in a grid */}\\n  return <Grid columns={3}>{kitties.map((kitty, i) =>\\n    <Grid.Column key={`kitty-${i}`}>\\n      <KittyCard kitty={kitty} accountPair={accountPair} setStatus={setStatus}/>\\n    </Grid.Column>\\n  )}</Grid>;\\n};\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Complete the component by adding:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export default KittyCards;\\n\")))), mdx(\"h3\", {\n    \"id\": \"complete-kittiesjs\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#complete-kittiesjs\",\n    \"aria-label\": \"complete kittiesjs permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Complete \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"Kitties.js\")), mdx(\"p\", null, \"Now that we've built all the bits for our front-end application, we can piece everything together.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Go back to the incompleted \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Kitties.js\"), \" file and paste this code snippet to render the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KittyCard.js\"), \" component inside a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Grid/>\"), \":\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"return <Grid.Column width={16}>\\n  <h1>Kitties</h1>\\n  <KittyCards kitties={kitties} accountPair={accountPair} setStatus={setStatus}/>\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Now we'll use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Form/>\"), \" component to render our application's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TxButton\"), \" component. Paste in the following\\nsnippet:\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"    <Form style={{ margin: '1em 0' }}>\\n      <Form.Field style={{ textAlign: 'center' }}>\\n        <TxButton\\n          accountPair={accountPair} label='Create Kitty' type='SIGNED-TX' setStatus={setStatus}\\n          attrs={{\\n            palletRpc: 'substrateKitties',\\n            callable: 'createKitty',\\n            inputParams: [],\\n            paramFields: []\\n          }}\\n        />\\n      </Form.Field>\\n    </Form>\\n    <div style={{ overflowWrap: 'break-word' }}>{status}</div>\\n  </Grid.Column>;\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"update-appjs\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#update-appjs\",\n    \"aria-label\": \"update appjs permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Update App.js\"), mdx(\"p\", null, \"Now all that's left to do is connect our custom components to the main application. \"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \", import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Kitties.js\"), \" component:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import Kitties from './Kitties';\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Finally, to render \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Kitties.js\"), \", add a new row to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Container/>\"), \":\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<Grid.Row>\\n  <Kitties accountPair={accountPair} />\\n</Grid.Row>\\n\")))), mdx(\"p\", null, \"If you get stuck in any of the above section. You can refer back to the complete source code of:\\\\n\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-front-end-template/blob/tutorials%2Fkitties/src/Kitties.js\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"src/kitties.js\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-front-end-template/blob/tutorials%2Fkitties/src/KittyCards.js\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"src/kittyCards.js\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-front-end-template/blob/tutorials%2Fkitties/src/KittyAvatar.js\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"src/kittyAvatar.js\")))), mdx(\"p\", null, \"Congratulations! You have finished the Substrate Kitties front-end turorial! Now run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn start\"), \", refresh your\\nbrowser and you should be able to start interacting with your node.\"), mdx(\"h2\", {\n    \"id\": \"next-steps\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#next-steps\",\n    \"aria-label\": \"next steps permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Next steps\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Explore the Polkadot JS API \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://polkadot.js.org/docs/api/cookbook\"\n  }, \"cookbook\"), \" \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Read about creating \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/v3/runtime/custom-rpcs\"\n  }, \"custom RPCs\"), \" in Substrate \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Learn more about how \\\"Effect Hooks\\\" work in \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://reactjs.org/docs/hooks-effect.html\"\n  }, \"React's documentation\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#getting-started","title":"Getting started","items":[{"url":"#specifying-types","title":"Specifying types"},{"url":"#sketching-out-our-components","title":"Sketching out our components"},{"url":"#polkadot-js-api-basics","title":"Polkadot JS API Basics"}]},{"url":"#creating-custom-components","title":"Creating custom components","items":[{"url":"#create-kittiesjs","title":"Create Kitties.js"},{"url":"#create-kittyavatarjs","title":"Create KittyAvatar.js"},{"url":"#write-transfermodal-in-kittycardsjs","title":"Write TransferModal in KittyCards.js"},{"url":"#write-kittycard-in-kittycardsjs","title":"Write KittyCard in KittyCards.js"},{"url":"#complete-kittiesjs","title":"Complete Kitties.js"},{"url":"#update-appjs","title":"Update App.js"}]},{"url":"#next-steps","title":"Next steps"}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/tutorials/11-kitties-workshop/b-kitties-frontend/index.mdx"}},"pageContext":{"slug":"/tutorials/v3/kitties/pt2","version":"3.0","navMenuSlug":"kittiesWorkshop","locale":"en","hrefLang":"en-US","originalPath":"/tutorials/v3/kitties/pt2/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
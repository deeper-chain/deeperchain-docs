{
    "componentChunkName": "component---src-templates-htg-template-tsx",
    "path": "/how-to-guides/v3/weights/add-benchmarking/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/how-to-guides/v3/weights/add-benchmarking","title":"Add benchmarking to your pallet","hideNav":null,"difficulty":1,"section":"how to guides","category":"weights"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Add benchmarking to your pallet\",\n  \"slug\": \"/how-to-guides/v3/weights/add-benchmarking\",\n  \"keywords\": \"weights, benchmarking, runtime\",\n  \"version\": 3,\n  \"section\": \"how to guides\",\n  \"category\": \"weights\",\n  \"difficulty\": 1\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Objectives = makeShortcode(\"Objectives\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Objectives, {\n    data: [{\n      title: 'Goal',\n      description: 'Add [FRAME\\'s benchmarking tool](/rustdocs/latest/frame_benchmarking/macro.benchmarks.html) to your pallet and write a simple benchmark.'\n    }, {\n      title: 'Use Cases',\n      description: \"Setting up your pallet to be able to benchmark your extrinsics.\"\n    }, {\n      title: 'Overview',\n      description: \"This guide steps throught the process of adding benchmarking to a pallet and runtime. In addition,\\n        it covers the steps of writing a simple benchmark for a pallet as well as testing and running the \\n        benchmarking tool. This guide does not cover updating weights with benchmarked values.\"\n    }],\n    mdxType: \"Objectives\"\n  }), mdx(\"h2\", {\n    \"id\": \"steps\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#steps\",\n    \"aria-label\": \"steps permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Steps\"), mdx(\"h3\", {\n    \"id\": \"1-set-up-benchmarking-for-your-pallet\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-set-up-benchmarking-for-your-pallet\",\n    \"aria-label\": \"1 set up benchmarking for your pallet permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Set-up benchmarking for your pallet\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/substrate/blob/master/frame/example/Cargo.toml\"\n  }, \"the pallet's\\n\", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Cargo.toml\")), \", add\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frame-benchmarking\"), \" crate (with appropriate tag and version) and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"runtime-benchmarks\"), \" feature.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pallets/example/Cargo.toml\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toml\"\n  }, \"[dependencies.frame-benchmarking]\\ndefault-features = false\\ngit = 'https://github.com/paritytech/substrate.git'\\noptional = true\\ntag = '<monthly>'\\nversion = '<version>'\\n\\n[features]\\n# -- snip --\\nruntime-benchmarks = [\\\"frame-benchmarking\\\"]\\nstd = [\\n  # -- snip --\\n  'frame-benchmarking/std',\\n]\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create a new Rust module for your benchmarks in your pallet's folder (an example of\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-node-template/blob/latest/pallets/template/src/benchmarking.rs\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"/pallets/template/src/benchmarking.rs\")), \"),\\nand create the basic structure:\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pallets/example/src/benchmarking.rs\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \" //! Benchmarks for Template Pallet\\n #![cfg(feature = \\\"runtime-benchmarks\\\")]\\n\\n use crate::*;\\n use frame_benchmarking::{benchmarks, impl_benchmark_test_suite, whitelisted_caller};\\n use frame_system::RawOrigin;\\n\\n benchmarks!{\\n   // Individual benchmarks are placed here\\n }\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Each benchmark case has up to three sections: a setup section, an execution section, and\\noptionally a verification section at the end.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"benchmarks!{\\n  benchmark_name {\\n    /* setup initial state */\\n  }: {\\n    /* the code to be benchmarked */\\n  }\\n  verify {\\n    /* verifying final state */\\n  }\\n}\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We'll refer to an extremely basic example of a benchmark from the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/substrate/blob/master/frame/example/src/lib.rs\"\n  }, \"Example Pallet\"), \".\\nTake a look at the extrinsic we'll be benchmarking for \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://github.com/paritytech/substrate/blob/master/frame/example/src/lib.rs#L543-562\"\n  }, \"here\"), \".\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"// This will measure the execution time of `set_dummy` for b in [1..1000] range.\\nset_dummy {\\n  let b in 1 .. 1000;\\n}: set_dummy(RawOrigin::Root, b.into());\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The name of the benchmark is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set_dummy\"), \". Here \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b\"), \" is a variable input that is passed into the\\nextrinsic \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set_dummy\"), \" which may affect the extrinsic execution time. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b\"), \" will be varied between\\n1 to 1,000, where we will repeat and measure the benchmark at the different values.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In this example, the extrinsic \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set_dummy\"), \" is called in the execution section, and we do not\\nverify the result at the end.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Once you have written your benchmarks, you should make sure they execute properly by testing\\nthem. Add this macro at the bottom of your benchmarking module:\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pallets/example/src/benchmarking.rs\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"impl_benchmark_test_suite!(\\n  YourPallet,\\n  crate::mock::new_test_ext(),\\n  crate::mock::Test,\\n);\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"impl_benchmark_test_suite!\"), \" macro takes three inputs: the Pallet struct generated by your pallet,\\na function that generates a test genesis storage (i.e. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new_text_ext()\"), \"), and a full runtime\\nstruct. These things you should get from your normal pallet unit tests.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We will use your test environment and execute the benchmarks similar to how they would execute\\nwhen actually running the benchmarks. If all tests pass, then it's likely that things will\\nwork when you actually run your benchmarks!\"))), mdx(\"h3\", {\n    \"id\": \"2-add-benchmarking-to-your-runtime\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-add-benchmarking-to-your-runtime\",\n    \"aria-label\": \"2 add benchmarking to your runtime permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Add benchmarking to your runtime\"), mdx(\"p\", null, \"With all the code completed on the pallet side, you need to also enable your full runtime to allow\\nbenchmarking.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Update your runtime's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cargo.toml\"), \" file to include the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"runtime-benchmarking\"), \" features:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-toml\"\n  }, \"[dependencies.pallet-you-created]\\ndefault-features = false\\npath = '../pallets/pallet-you-created'\\nversion = '3.0.0-monthly-2021-08'\\n\\n[features]\\nruntime-benchmarks = [\\n  # -- snip --\\n  'pallet-you-created/runtime-benchmarks'\\n]\\n std = [\\n  # -- snip --\\n  'pallet-you-created/std'\\n]\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Add your new pallet to your runtime just as you would any other pallet. If you need more details\\ncheck out the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/tutorials/v3/add-a-pallet\"\n  }, \"Add a Pallet to Your Runtime Tutorial\"), \" or\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/how-to-guides/v3/basics/pallet-integration\"\n  }, \"this guide on integrating a pallet to your runtime\"), \".\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Then, in addition to your normal runtime configuration, you also need to update the benchmarking\\nsection of your runtime. To add our new benchmarks, we simply add a new line with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"add_benchmark!\"), \"\\nmacro:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[cfg(feature = \\\"runtime-benchmarks\\\")]\\nimpl frame_benchmarking::Benchmark<Block> for Runtime {\\n  fn dispatch_benchmark(\\n    config: frame_benchmarking::BenchmarkConfig\\n  ) -> Result<\\n        (Vec<frame_benchmarking::BenchmarkBatch>, Vec<StorageInfo>),\\n        sp_runtime::RuntimeString,\\n    > {\\n   // -- snip --\\n    let whitelist: Vec<TrackedStorageKey> = vec![\\n      // You can whitelist any storage keys you do not want to track here\\n    ];\\n    let storage_info = AllPalletsWithSystem::storage_info();\\n    let mut batches = Vec::<BenchmarkBatch>::new();\\n    let params = (&config, &whitelist);\\n\\n    // Adding the pallet for which you will perform the benchmarking\\n    add_benchmark!(params, batches, pallet_you_crated, YourPallet);\\n\\n    // -- snip --\\n\\n    if batches.is_empty() { return Err(\\\"Benchmark not found for this pallet.\\\".into()) }\\n    Ok(batches, storage_info)\\n  }\\n}\\n\")))), mdx(\"h3\", {\n    \"id\": \"3-run-your-benchmarks\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#3-run-your-benchmarks\",\n    \"aria-label\": \"3 run your benchmarks permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"3. Run your benchmarks\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Build your project with the benchmarks enabled:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"cargo build --release --features runtime-benchmarks\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Once this is done, you should be able to run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"benchmark\"), \" subcommand from your project's top\\nlevel directory to view all CLI options. This will also ensure that benchmarking has been properly integrated:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"./target/release/node-template benchmark --help \\n\")))), mdx(\"p\", null, \"The Benchmarking CLI has a lot of options which can help you automate your benchmarking. Execute the following\\ncommand to run standard benchmarking for your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pallet_you_created\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"./target/release/node-template benchmark \\\\\\n    --chain dev \\\\               \\n    --execution wasm \\\\          \\n    --wasm-execution compiled \\\\ \\n    --pallet pallet_you_crated \\\\   \\n    --extrinsic '\\\\*' \\\\          \\n    --steps 20 \\\\                \\n    --repeat 10 \\\\               \\n    --raw \\\\                     \\n    --output ./pallets/src/pallet-created/weights.rs                 \\n\")), mdx(\"p\", null, \"This will create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"weights.rs\"), \" file inside your pallet's directory. Refer to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/how-to-guides/v3/weights/use-benchmark-weights\"\n  }, \"this guide\"), \" to learn\\nhow to configure your pallet to use those weights.\"), mdx(\"h2\", {\n    \"id\": \"examples\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#examples\",\n    \"aria-label\": \"examples permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Examples\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/paritytech/substrate/blob/master/frame/example/src/benchmarking.rs\"\n  }, \"Benchmarking in the Example pallet\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/paritytech/substrate/blob/master/frame/example/src/weights.rs\"\n  }, \"Weights in the Example pallet\"))), mdx(\"h2\", {\n    \"id\": \"related-material\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#related-material\",\n    \"aria-label\": \"related material permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Related material\"), mdx(\"h4\", null, \"Docs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/v3/runtime/benchmarking\"\n  }, \"Benchmarking\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/how-to-guides/v3/weights/use-benchmark-weights\"\n  }, \"Use custom weights from benchmarking\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#steps","title":"Steps","items":[{"url":"#1-set-up-benchmarking-for-your-pallet","title":"1. Set-up benchmarking for your pallet"},{"url":"#2-add-benchmarking-to-your-runtime","title":"2. Add benchmarking to your runtime"},{"url":"#3-run-your-benchmarks","title":"3. Run your benchmarks"}]},{"url":"#examples","title":"Examples"},{"url":"#related-material","title":"Related material"}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/how-to-guides/03-weights/b-benchmarking/index.mdx"}},"pageContext":{"slug":"/how-to-guides/v3/weights/add-benchmarking","version":"3.0","locale":"en","hrefLang":"en-US","originalPath":"/how-to-guides/v3/weights/add-benchmarking/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
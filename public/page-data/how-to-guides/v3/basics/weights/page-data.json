{
    "componentChunkName": "component---src-templates-htg-template-tsx",
    "path": "/how-to-guides/v3/basics/weights/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/how-to-guides/v3/basics/weights","title":"Calculating Transaction Weights","hideNav":null,"difficulty":1,"section":"how to guides","category":"basics"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Calculating Transaction Weights\",\n  \"slug\": \"/how-to-guides/v3/basics/weights\",\n  \"keywords\": \"basics, weights, runtime, FRAME V1\",\n  \"version\": 3,\n  \"section\": \"how to guides\",\n  \"category\": \"basics\",\n  \"difficulty\": 1\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Message = makeShortcode(\"Message\");\nvar Objectives = makeShortcode(\"Objectives\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Message, {\n    type: \"yellow\",\n    title: \"Information\",\n    text: \"This guide shows a basic procedure for configuring weights. There are more advanced methods that suit different use cases. For simple functions with fixed amounts of storage reads, this method works well. For other use cases, see the section  [on weights](/how-to-guides/v3/weights/calculate-fees). \",\n    mdxType: \"Message\"\n  }), mdx(Objectives, {\n    data: [{\n      title: 'Goal',\n      description: 'Understand how to calculate transaction weights for a basic dispatch function.'\n    }, {\n      title: 'Use Cases',\n      description: \"\\n- Assign the correct weight before a function call to storage.\\n- Calculate transaction fees.\"\n    }, {\n      title: 'Overview',\n      description: \"Weights are an important part of Substrate development because they provide information about the maximum cost of a function \\n        in terms of the block size it will take up. This way, the [weighting system](/v3/concepts/weight) \\n        checks what the cost will be before \\n        a function is executed. As runtime engineers, we care a lot about weights. Not only do they help add security checks around the \\n        functions we create, but they also force us to think about the computational ressources consumed by a transaction. From that, we \\n        can figure out [what fees to charge](/v3/runtime/weights-and-fees) users.\\n        This guide will cover how to calculate the maximum weight for a dispatch call; calculate the actual weight after execution; and\\n        reimburse the difference.\\n        Here's an overview of the traits we'll be implementing:\\n- [`PaysFee`](/rustdocs/latest/frame_support/weights/trait.PaysFee.html): to specify whether or not a dispatch pays the fee.\\n- [`GetDispatchInfo`](/rustdocs/latest/frame_support/weights/trait.GetDispatchInfo.html): carries weight information using the `#[weight]` attribute.\\n- [`DispatchResultWithPostInfo`](/rustdocs/latest/frame_support/dispatch/type.DispatchResultWithPostInfo.html): provides new weight info once the extrinsic function has been executed.\\n\\t    \"\n    }],\n    mdxType: \"Objectives\"\n  }), mdx(\"h2\", {\n    \"id\": \"steps\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#steps\",\n    \"aria-label\": \"steps permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Steps\"), mdx(\"h3\", {\n    \"id\": \"1-import-weight-configuration-tools\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-import-weight-configuration-tools\",\n    \"aria-label\": \"1 import weight configuration tools permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Import weight configuration tools\"), mdx(\"p\", null, \"Make sure you have the right dependencies:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"use frame_support::Parameter;\\nuse frame_support::weights::{GetDispatchInfo, Pays};\\nuse sp_runtime::traits::Dispatchable;\\nuse frame_support::pallet_prelude::{DispatchResultWithPostInfo};\\nuse frame_support::dispatch::DispatchResult;\\n\")), mdx(\"h3\", {\n    \"id\": \"2-calculate-maximum-weight-before-a-function\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-calculate-maximum-weight-before-a-function\",\n    \"aria-label\": \"2 calculate maximum weight before a function permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Calculate maximum weight before a function\"), mdx(\"p\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"call.get_dispatch_info()\"), \", calculate the maximum possible weight before the function is declared:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[weight = {\\n            let dispatch_info = call.get_dispatch_info();\\n            (dispatch_info.weight, dispatch_info.class, Pays::Yes)\\n            }]\\n\\n      // Define a function header that returns DispatchResultWithPostInfo.\\n          fn do_three_reads(origin, call: Box<<T as Config>::Call>) -> DispatchResultWithPostInfo {\\n      // Function logic.\\n        }\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GetDispatchInfo\"), \" provides the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get_dispatch_info()\"), \" method we need to retrieve information about the function's weight.\"), mdx(\"h3\", {\n    \"id\": \"3-calculate-the-actual-weight-linked-to-functions-logic\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#3-calculate-the-actual-weight-linked-to-functions-logic\",\n    \"aria-label\": \"3 calculate the actual weight linked to functions logic permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"3. Calculate the actual weight linked to function's logic\"), mdx(\"p\", null, \"The actual weight of a function call depends on the logic of the extrinsic. After execution, we can give back fees once the actual weight has been calculated. Handle this using the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_support/weights/enum.Pays.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Pays\"), \" Enum\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_system/pallet/trait.Config.html#associatedtype.DbWeight\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"DbWeight\")), \".\"), mdx(\"p\", null, \"For a function whose logic does three storage reads, calculate it using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DbWeight\"), \" and return it at the end of the function:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"// Function returns a calculation corresponding to 3 DB reads\\nlet check_logic_weight = T::DbWeight::get().reads(3);\\nreturn Ok(Some(check_logic_weight).into())\\n\\n//Remove fee assoicated to weight\\nOk(Pays::Yes.into())\\n\")), mdx(\"h2\", {\n    \"id\": \"examples\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#examples\",\n    \"aria-label\": \"examples permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Examples\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/shawntabrizi/substrate-feeless-token-factory#user-story\"\n  }, \"Feeless transaction use case\"))), mdx(\"h2\", {\n    \"id\": \"related-material\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#related-material\",\n    \"aria-label\": \"related material permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Related material\"), mdx(\"h4\", null, \"Docs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/v3/concepts/weight\"\n  }, \"Transaction Weights\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/v3/runtime/weights-and-fees\"\n  }, \"Transaction Fees\"))), mdx(\"h4\", null, \"Rust docs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/frame_support/weights/trait.ClassifyDispatch.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ClassifyDispatch\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/frame_support/weights/trait.WeighData.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"WeightData\")))), mdx(\"h4\", null, \"Other\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Polkadot's \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://wiki.polkadot.network/docs/en/learn-transaction-fees\"\n  }, \"Transaction Fees\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#steps","title":"Steps","items":[{"url":"#1-import-weight-configuration-tools","title":"1. Import weight configuration tools"},{"url":"#2-calculate-maximum-weight-before-a-function","title":"2. Calculate maximum weight before a function"},{"url":"#3-calculate-the-actual-weight-linked-to-functions-logic","title":"3. Calculate the actual weight linked to function's logic"}]},{"url":"#examples","title":"Examples"},{"url":"#related-material","title":"Related material"}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/how-to-guides/01-basics/g-weights/index.mdx"}},"pageContext":{"slug":"/how-to-guides/v3/basics/weights","version":"3.0","locale":"en","hrefLang":"en-US","originalPath":"/how-to-guides/v3/basics/weights/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
{
    "componentChunkName": "component---src-templates-htg-template-tsx",
    "path": "/how-to-guides/v3/basics/configurable-constants/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/how-to-guides/v3/basics/configurable-constants","title":"Configure a Runtime Constant","hideNav":null,"difficulty":1,"section":"how to guides","category":"basics"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Configure a Runtime Constant\",\n  \"slug\": \"/how-to-guides/v3/basics/configurable-constants\",\n  \"keywords\": \"basics, runtime, configurable constants\",\n  \"version\": 3,\n  \"section\": \"how to guides\",\n  \"category\": \"basics\",\n  \"difficulty\": 1\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Objectives = makeShortcode(\"Objectives\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Objectives, {\n    data: [{\n      title: 'Goal',\n      description: 'Define a runtime constant value that becomes reset on `on_finalize`.'\n    }, {\n      title: 'Use Cases',\n      description: \"Use a constant to keep track of the amount of times a function is called during a single block cycle.\"\n    }, {\n      title: 'Overview',\n      description: \"Declaring a constant value in a runtime is a useful tool to either define fixed values or define values that change dynamically\\n         according to some factor. This guide shows you how to create pallet constants that are used to reset a `u32`\\n         value in storage. This value, we'll call `SingleValue`, can also be modified using a method called `add_value`.\\n         The purpose of this guide is to demonstrate the utility of configuring constants by hardcoding them and making them more\\n         dynamic.\"\n    }],\n    mdxType: \"Objectives\"\n  }), mdx(\"h2\", {\n    \"id\": \"steps\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#steps\",\n    \"aria-label\": \"steps permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Steps\"), mdx(\"h3\", {\n    \"id\": \"1-define-the-constants-in-your-pallet\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-define-the-constants-in-your-pallet\",\n    \"aria-label\": \"1 define the constants in your pallet permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Define the constants in your pallet.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MaxAddend\"), \" will be the value displayed in metadata.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ClearFrequency\"), \" keeps track of the block numbers and will\\nbe used to reset \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SingleValue\"), \":\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::config]\\n    pub trait Config: frame_system::Config {\\n        type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;\\n\\n        #[pallet::constant] // put the constant in metadata\\n        /// Maximum amount added per invocation.\\n        type MaxAddend: Get<u32>;\\n\\n        /// Frequency with which the stored value is deleted.\\n        type ClearFrequency: Get<Self::BlockNumber>;\\n    }\\n\")), mdx(\"h3\", {\n    \"id\": \"2-declare-your-storage-items-and-events\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-declare-your-storage-items-and-events\",\n    \"aria-label\": \"2 declare your storage items and events permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Declare your storage items and events.\"), mdx(\"p\", null, \"Using the storage attribute macro, declare \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SingleValue\"), \", the value that gets modified every block cycle.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::storage]\\n#[pallet::getter(fn single_value)]\\npub(super) type SingleValue<T: Config> = StorageValue<_, u32, ValueQuery>;\\n\")), mdx(\"p\", null, \"Define your pallet's events:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::event]\\n#[pallet::generate_deposit(pub(super) fn deposit_event)]\\npub enum Event<T: Config> {\\n    /// The value has been added to. The parameters are\\n    /// (initial amount, amount added, final amount).\\n    Added(u32, u32, u32),\\n    /// The value has been cleared. The parameter is the value before clearing.\\n    Cleared(u32)\\n}\\n\")), mdx(\"p\", null, \"Add an error that handles operation overflow:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::error]\\npub enum Error<T> {\\n    /// An operation would lead to an overflow.\\n    Overflow\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"3-configure-on_finalize\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#3-configure-on_finalize\",\n    \"aria-label\": \"3 configure on_finalize permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"3. Configure \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"on_finalize\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SingleValue\"), \" is set to 0 every \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClearFrequency\"), \" number of blocks in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on_finalize\"), \" function that\\nruns at the end of block execution. Specify this logic under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[pallet::hooks]\"), \" attribute:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::hooks]\\n    impl<T: Config> Hooks<BlockNumberFor<T>> for Pallet<T> {\\n        fn on_finalize(n: T::BlockNumber) {\\n            if (n % T::ClearFrequency::get()).is_zero() {\\n                let current_value = <SingleValue<T>>::get();\\n                <SingleValue<T>>::put(0u32);\\n                Self::deposit_event(Event::Cleared(current_value));\\n            }\\n        }\\n    }\\n\")), mdx(\"h3\", {\n    \"id\": \"4-create-a-method-that-allows-users-to-specify-the-value\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#4-create-a-method-that-allows-users-to-specify-the-value\",\n    \"aria-label\": \"4 create a method that allows users to specify the value permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"4. Create a method that allows users to specify the value.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"add_value\"), \" method increases \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SingleValue\"), \" so long as each call adds to less than the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MaxAddend\"), \" value.\"), mdx(\"p\", null, \"For this method, make sure to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Include checks.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Keep track of the previous value.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Check for overflow.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Update \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SingleValue\"), \".\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"    // Extrinsics callable from outside the runtime.\\n     #[pallet::call]\\n    impl<T: Config> Pallet<T> {\\n    #[pallet::weight(1_000)]\\n\\n    fn add_value(\\n        origin: OriginFor<T>,\\n        val_to_add: u32\\n        ) -> DispatchResultWithPostInfo {\\n            let _ = ensure_signed(origin)?;\\n\\n            ensure!(val_to_add <= T::MaxAddend::get(), \\\"value must be <= maximum add amount constant\\\");\\n\\n            // previous value got\\n            let c_val = SingleValue::<T>::get();\\n\\n            // checks for overflow when new value added\\n            let result = c_val.checked_add(val_to_add).ok_or(Error::<T>::Overflow)?;\\n\\n            <SingleValue<T>>::put(result);\\n            Self::deposit_event(Event::Added(c_val, val_to_add, result));\\n            Ok(().into())\\n        }\\n    }\\n\")), mdx(\"h3\", {\n    \"id\": \"5-supply-the-constant-value-for-runtime\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#5-supply-the-constant-value-for-runtime\",\n    \"aria-label\": \"5 supply the constant value for runtime permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"5. Supply the constant value for runtime\"), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"runtime/src/lib.rs\"), \", declare the values for your pallet's runtime implementation of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MaxAddend\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClearFrequency\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"parameter_types! {\\n    pub const MaxAddend: u32 = 1738;\\n    pub const ClearFrequency: u32 = 10;\\n}\\n\\nimpl constant_config::Config for Runtime {\\n    type Event = Event;\\n    type MaxAddend = MaxAddend;\\n    type ClearFrequency = ClearFrequency;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"examples\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#examples\",\n    \"aria-label\": \"examples permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Examples\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-how-to-guides/blob/main/example-code/template-node/pallets/configurable-constant/src/lib.rs\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"constant-config\"), \" example pallet\"))), mdx(\"h2\", {\n    \"id\": \"resources\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#resources\",\n    \"aria-label\": \"resources permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Resources\"), mdx(\"h4\", null, \"Tutorials\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/tutorials/v3/forkless-upgrades\"\n  }, \"Nick's forkless upgrade tutorial\"))), mdx(\"h4\", null, \"Rust docs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/frame_support/traits/trait.Get.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Get\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"frame_support\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/frame_support/attr.pallet.html#extra-constants-palletextra_constants-optional\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"#[pallet::extra_constants]\"), \" macro\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#steps","title":"Steps","items":[{"url":"#1-define-the-constants-in-your-pallet","title":"1. Define the constants in your pallet."},{"url":"#2-declare-your-storage-items-and-events","title":"2. Declare your storage items and events."},{"url":"#3-configure-on_finalize","title":"3. Configure on_finalize"},{"url":"#4-create-a-method-that-allows-users-to-specify-the-value","title":"4. Create a method that allows users to specify the value."},{"url":"#5-supply-the-constant-value-for-runtime","title":"5. Supply the constant value for runtime"}]},{"url":"#examples","title":"Examples"},{"url":"#resources","title":"Resources"}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/how-to-guides/01-basics/c-constants/index.mdx"}},"pageContext":{"slug":"/how-to-guides/v3/basics/configurable-constants","version":"3.0","locale":"en","hrefLang":"en-US","originalPath":"/how-to-guides/v3/basics/configurable-constants/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
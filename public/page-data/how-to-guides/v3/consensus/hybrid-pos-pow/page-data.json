{
    "componentChunkName": "component---src-templates-htg-template-tsx",
    "path": "/how-to-guides/v3/consensus/hybrid-pos-pow/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/how-to-guides/v3/consensus/hybrid-pos-pow","title":"Create a PoS-PoW Hybrid Node","hideNav":null,"difficulty":3,"section":"how to guides","category":"consensus"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Create a PoS-PoW Hybrid Node\",\n  \"slug\": \"/how-to-guides/v3/consensus/hybrid-pos-pow\",\n  \"keywords\": \"node, client, consensus, proof-of-work, proof-of-stake\",\n  \"version\": 3,\n  \"section\": \"how to guides\",\n  \"category\": \"consensus\",\n  \"difficulty\": 3\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Objectives = makeShortcode(\"Objectives\");\nvar Message = makeShortcode(\"Message\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Objectives, {\n    data: [{\n      title: 'Goal',\n      description: 'Provide a GRANPA and PoW consensus engine to a service client.'\n    }, {\n      title: 'Use Cases',\n      description: \"Customizing the consensus mechanisms of a Substrate chain\"\n    }, {\n      title: 'Overview',\n      description: \"\\nThis guide demonstrates how to create a Substrate-based node that employs hybrid consensus, using\\n[Sha3 Proof of Work](../pow) to dictate block authoring and the\\n[Grandpa](/rustdocs/latest/sc_finality_grandpa/index.html) finality gadget to provide\\n[deterministic finality](/v3/advanced/consensus#finality). The minimal proof\\nof work consensus lives entirely outside of the runtime while the grandpa finality obtains its\\nauthorities from the runtime via the\\n[GrandpaAPI](/rustdocs/latest/sp_finality_grandpa/trait.GrandpaApi.html). Read about Substrate's\\n[block import pipeline](/v3/runtime/upgrades), to better understand how to make use of this guide.\"\n    }],\n    mdxType: \"Objectives\"\n  }), mdx(\"br\", null), mdx(Message, {\n    type: \"gray\",\n    title: \"Note\",\n    text: \"Grandpa relies on getting its authority sets from the runtime via the\\n[GrandpaAPI](/rustdocs/latest/sp_finality_grandpa/trait.GrandpaApi.html), so you'll need a runtime\\nthat provides this API to successfully compile a node implementing this guide. \",\n    mdxType: \"Message\"\n  }), mdx(\"h2\", {\n    \"id\": \"steps\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#steps\",\n    \"aria-label\": \"steps permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Steps\"), mdx(\"h3\", {\n    \"id\": \"1-configure-the-block-import-pipeline\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-configure-the-block-import-pipeline\",\n    \"aria-label\": \"1 configure the block import pipeline permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Configure the Block Import pipeline\"), mdx(\"p\", null, \"We begin by creating the block import for Grandpa. In addition to the block import itself, we get\\nback a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grandpa_link\"), \". This link is a channel over which the block import can communicate with the\\nbackground task that actually casts Grandpa votes. The\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://research.web3.foundation/en/latest/polkadot/finality.html\"\n  }, \"details of the Grandpa protocol\"), \"\\nare beyond the scope of this guide.\"), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node/src/service.rs\"), \", create the Grandpa block import:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let (grandpa_block_import, grandpa_link) = sc_finality_grandpa::block_import(\\n    client.clone(),\\n    &(client.clone() as std::sync::Arc<_>),\\n    select_chain.clone(),\\n)?;\\n\")), mdx(\"p\", null, \"With the grandpa block import created, we can now create the PoW block import. The Pow block import\\nis the outer-most layer of the block import onion and it wraps the grandpa block import.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let pow_block_import = sc_consensus_pow::PowBlockImport::new(\\n    grandpa_block_import,\\n    client.clone(),\\n    sha3pow::MinimalSha3Algorithm,\\n    0, // check inherents starting at block 0\\n    select_chain.clone(),\\n    inherent_data_providers.clone(),\\n    can_author_with,\\n);\\n\")), mdx(\"h3\", {\n    \"id\": \"2-create-import-queue\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-create-import-queue\",\n    \"aria-label\": \"2 create import queue permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Create import queue\"), mdx(\"p\", null, \"With the block imports setup, we can proceed to create the import queue. We make it using PoW's\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sc_consensus_pow/fn.import_queue.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"import_queue\"), \" helper function\"), \".\\nNotice that it requires the entire block import pipeline which we refer to as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pow_block_import\"), \"\\nbecause PoW is the outermost layer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let import_queue = sc_consensus_pow::import_queue(\\n    Box::new(pow_block_import.clone()),\\n    None,\\n    sha3pow::MinimalSha3Algorithm,\\n    inherent_data_providers.clone(),\\n    &task_manager.spawn_handle(),\\n    config.prometheus_registry(),\\n)?;\\n\")), mdx(\"h3\", {\n    \"id\": \"3-spawning-the-pow-authorship-task\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#3-spawning-the-pow-authorship-task\",\n    \"aria-label\": \"3 spawning the pow authorship task permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"3. Spawning the PoW Authorship Task\"), mdx(\"p\", null, \"Any node that is acting as an authority, typically called \\\"miners\\\" in the PoW context, must run a\\nmining worker that is spawned by the task manager.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let (_worker, worker_task) = sc_consensus_pow::start_mining_worker(\\n    Box::new(pow_block_import),\\n    client,\\n    select_chain,\\n    MinimalSha3Algorithm,\\n    proposer,\\n    network.clone(),\\n    None,\\n    inherent_data_providers,\\n    // time to wait for a new block before starting to mine a new one\\n    Duration::from_secs(10),\\n    // how long to take to actually build the block (i.e. executing extrinsics)\\n    Duration::from_secs(10),\\n    can_author_with,\\n);\\n\\ntask_manager\\n    .spawn_essential_handle()\\n    .spawn_blocking(\\\"pow\\\", worker_task);\\n\")), mdx(\"h3\", {\n    \"id\": \"4-spawning-the-grandpa-task\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#4-spawning-the-grandpa-task\",\n    \"aria-label\": \"4 spawning the grandpa task permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"4. Spawning the Grandpa Task\"), mdx(\"p\", null, \"Grandpa is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"not\"), \" CPU intensive, so we will use a standard \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async\"), \" worker to listen to and cast\\nGrandpa votes. We begin by creating a Grandpa\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sc_finality_grandpa/struct.Config.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Config\")), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let grandpa_config = sc_finality_grandpa::Config {\\n    gossip_duration: Duration::from_millis(333),\\n    justification_period: 512,\\n    name: None,\\n    observer_enabled: false,\\n    keystore: Some(keystore_container.sync_keystore()),\\n    is_authority,\\n};\\n\")), mdx(\"p\", null, \"We can then use this config to create an instance of\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sc_finality_grandpa/struct.GrandpaParams.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"GrandpaParams\")), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let grandpa_config = sc_finality_grandpa::GrandpaParams {\\n    config: grandpa_config,\\n    link: grandpa_link,\\n    network,\\n    telemetry_on_connect: telemetry_connection_notifier.map(|x| x.on_connect_stream()),\\n    voting_rule: sc_finality_grandpa::VotingRulesBuilder::default().build(),\\n    prometheus_registry,\\n    shared_voter_state: sc_finality_grandpa::SharedVoterState::empty(),\\n};\\n\")), mdx(\"p\", null, \"With the parameters established, we can now create and spawn the authorship future.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"task_manager.spawn_essential_handle().spawn_blocking(\\n    \\\"grandpa-voter\\\",\\n    sc_finality_grandpa::run_grandpa_voter(grandpa_config)?\\n);\\n\")), mdx(\"h2\", {\n    \"id\": \"examples\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#examples\",\n    \"aria-label\": \"examples permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Examples\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/substrate-developer-hub/recipes/blob/master/nodes/hybrid-consensus/src/service.rs\"\n  }, \"Hybrid Consensus\"))), mdx(\"h2\", {\n    \"id\": \"resources\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#resources\",\n    \"aria-label\": \"resources permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Resources\"), mdx(\"h4\", null, \"Rust docs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/sc_consensus_pow/trait.PowAlgorithm.html\"\n  }, \"POW Algorithm\"), \" trait\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/sc_consensus_pow/struct.PowBlockImport.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"PowBlockimport\")))), mdx(\"h4\", null, \"Docs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/v3/concepts/extrinsics/#inherents\"\n  }, \"Inherents\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#steps","title":"Steps","items":[{"url":"#1-configure-the-block-import-pipeline","title":"1. Configure the Block Import pipeline"},{"url":"#2-create-import-queue","title":"2. Create import queue"},{"url":"#3-spawning-the-pow-authorship-task","title":"3. Spawning the PoW Authorship Task"},{"url":"#4-spawning-the-grandpa-task","title":"4. Spawning the Grandpa Task"}]},{"url":"#examples","title":"Examples"},{"url":"#resources","title":"Resources"}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/how-to-guides/06-consensus/b-hybrid-pow-pos/index.mdx"}},"pageContext":{"slug":"/how-to-guides/v3/consensus/hybrid-pos-pow","version":"3.0","locale":"en","hrefLang":"en-US","originalPath":"/how-to-guides/v3/consensus/hybrid-pos-pow/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
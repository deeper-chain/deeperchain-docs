{
    "componentChunkName": "component---src-templates-kb-template-tsx",
    "path": "/v3/getting-started/windows-users/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/v3/getting-started/windows-users","title":"Getting Started on Windows","hideNav":null,"section":"docs","category":"getting started"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting Started on Windows\",\n  \"slug\": \"/v3/getting-started/windows-users\",\n  \"version\": 3,\n  \"section\": \"docs\",\n  \"category\": \"getting started\",\n  \"keywords\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Message = makeShortcode(\"Message\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Message, {\n    type: \"yellow\",\n    title: \"Information\",\n    text: \"Native development of substrate is _not_ very well supported! It is _highly_ recommend to\\nuse [Windows Subsystem Linux](https://docs.microsoft.com/en-us/windows/wsl/install-win10) (WSL)\\nand follow the instructions for [Ubuntu/Debian](../installation#ubuntudebian).\\nSubstrate development is easiest on Unix-based operating systems like macOS or Linux. The examples\\nin the Substrate [Tutorials](/tutorials) and [How-to Guides](/how-to-guides)\\nuse Unix-style terminals to demonstrate how to interact with Substrate from the command line.\",\n    mdxType: \"Message\"\n  }), mdx(\"p\", null, \"If you do decide to try and use a Windows computer to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"natively\"), \" build Substrate, do the following:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Download and install \\\"Build Tools for Visual Studio:\\\"\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can get it at this link: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://aka.ms/buildtools\"\n  }, \"https://aka.ms/buildtools\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Run the installation file: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"vs_buildtools.exe\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ensure the \\\"Windows 10 SDK\\\" component is included when installing the Visual C++ Build Tools.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Restart your computer.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Install Rust:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Detailed instructions are provided by the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://doc.rust-lang.org/book/ch01-01-installation.html#installing-rustup-on-windows\"\n  }, \"Rust Book\"), \".\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Download from: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.rust-lang.org/tools/install\"\n  }, \"https://www.rust-lang.org/tools/install\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Run the installation file: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rustup-init.exe\"), \".\"), mdx(Message, {\n    type: \"gray\",\n    title: \"Note\",\n    text: \"It shouldn't prompt you to install `vs_buildtools` since you did it in step 1.\",\n    mdxType: \"Message\"\n  })), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Choose \\\"Default Installation.\\\"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To get started, you need Cargo's bin directory (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"%USERPROFILE%\\\\.cargo\\\\bin\"), \") in your PATH\\nenvironment variable. Future applications will automatically have the correct environment,\\nbut you may need to restart your current shell.\")))))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Run these commands in Command Prompt (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CMD\"), \") to set up your Wasm Build Environment:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"rustup update nightly\\nrustup update stable\\nrustup target add wasm32-unknown-unknown --toolchain nightly\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Install LLVM: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://releases.llvm.org/download.html\"\n  }, \"https://releases.llvm.org/download.html\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Install OpenSSL with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vcpkg\"), \" using PowerShell:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"mkdir C:\\\\Tools\\ncd C:\\\\Tools\\ngit clone https://github.com/Microsoft/vcpkg.git --depth=1\\ncd vcpkg\\n.\\\\bootstrap-vcpkg.bat\\n.\\\\vcpkg.exe install openssl:x64-windows-static\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Add OpenSSL to your System Variables using PowerShell:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-powershell\"\n  }, \"$env:OPENSSL_DIR = 'C:\\\\Tools\\\\vcpkg\\\\installed\\\\x64-windows-static'\\n$env:OPENSSL_STATIC = 'Yes'\\n[System.Environment]::SetEnvironmentVariable('OPENSSL_DIR', $env:OPENSSL_DIR, [System.EnvironmentVariableTarget]::User)\\n[System.Environment]::SetEnvironmentVariable('OPENSSL_STATIC', $env:OPENSSL_STATIC, [System.EnvironmentVariableTarget]::User)\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cmake\"), \": \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://cmake.org/download/\"\n  }, \"https://cmake.org/download/\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"make\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This can be done using Chocolatey. First you need to install the Chocolatey package manager: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://chocolatey.org/install\"\n  }, \"https://chocolatey.org/install\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Once Chocolatey installed you can install make:\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"choco install make\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/docs/01-getting-started/d-windows-users/index.mdx"}},"pageContext":{"slug":"/v3/getting-started/windows-users","version":"3.0","locale":"en","hrefLang":"en-US","originalPath":"/v3/getting-started/windows-users/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
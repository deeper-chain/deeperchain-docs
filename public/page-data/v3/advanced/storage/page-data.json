{
    "componentChunkName": "component---src-templates-kb-template-tsx",
    "path": "/v3/advanced/storage/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/v3/advanced/storage","title":"Storage","hideNav":null,"section":"docs","category":"advanced"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Storage\",\n  \"slug\": \"/v3/advanced/storage\",\n  \"version\": 3,\n  \"section\": \"docs\",\n  \"category\": \"advanced\",\n  \"keywords\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Substrate uses a simple key-value data store implemented as a database-backed, modified Merkle tree.\\nAll of Substrate's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/storage\"\n  }, \"higher-lever storage abstractions\"), \" are built on top of this\\nsimple key-value store.\"), mdx(\"h2\", {\n    \"id\": \"key-value-database\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#key-value-database\",\n    \"aria-label\": \"key value database permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Key-Value database\"), mdx(\"p\", null, \"Substrate implements its storage database with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://rocksdb.org/\"\n  }, \"RocksDB\"), \", a persistent\\nkey-value store for fast storage environments. It also supports an experimental\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/parity-db\"\n  }, \"Parity DB\"), \".\"), mdx(\"p\", null, \"The DB is used for all the components of Substrate that require persistent storage, such as:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Substrate clients\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Substrate light-clients\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Off-chain workers\")), mdx(\"h2\", {\n    \"id\": \"trie-abstraction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#trie-abstraction\",\n    \"aria-label\": \"trie abstraction permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Trie abstraction\"), mdx(\"p\", null, \"One advantage of using a simple key-value store is that you are able to easily abstract storage\\nstructures on top of it.\"), mdx(\"p\", null, \"Substrate uses a Base-16 Modified Merkle Patricia tree (\\\"trie\\\") from\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/trie\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"paritytech/trie\")), \" to provide a trie structure whose contents\\ncan be modified and whose root hash is recalculated efficiently.\"), mdx(\"p\", null, \"Tries allow efficient storing and sharing of the historical block state. The trie root is a\\nrepresentation of the data within the trie; that is, two tries with different data will always have\\ndifferent roots. Thus, two blockchain nodes can easily verify that they have the same state by\\nsimply comparing their trie roots.\"), mdx(\"p\", null, \"Accessing trie data is costly. Each read operation takes O(log N) time, where N is the number of\\nelements stored in the trie. To mitigate this, we use a key-value cache.\"), mdx(\"p\", null, \"All trie nodes are stored in the DB and part of the trie state can get pruned, i.e. a key-value pair\\ncan be deleted from storage when it is out of pruning range for non-archive nodes. We do not use\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://en.wikipedia.org/wiki/Reference_counting\"\n  }, \"reference counting\"), \" for performance reasons.\"), mdx(\"h3\", {\n    \"id\": \"state-trie\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#state-trie\",\n    \"aria-label\": \"state trie permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"State trie\"), mdx(\"p\", null, \"Substrate-based chains have a single main trie, called the state trie, whose root hash is placed in\\neach block header. This is used to easily verify the state of the blockchain and provide a basis for\\nlight clients to verify proofs.\"), mdx(\"p\", null, \"This trie only stores content for the canonical chain, not forks. There is a separate\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sc_state_db/index.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"state_db\"), \" layer\"), \" that maintains the\\ntrie state with references counted in memory for all that is non-canonical.\"), mdx(\"h3\", {\n    \"id\": \"child-trie\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#child-trie\",\n    \"aria-label\": \"child trie permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Child trie\"), mdx(\"p\", null, \"Substrate also provides an API to generate new child tries with their own root hashes that can be\\nused in the runtime.\"), mdx(\"p\", null, \"Child tries are identical to the main state trie, except that a child trie's root is stored and\\nupdated as a node in the main trie instead of the block header. Since their headers are a part of\\nthe main state trie, it is still easy to verify the complete node state when it includes child\\ntries.\"), mdx(\"p\", null, \"Child tries are useful when you want your own independent trie with a separate root hash that you\\ncan use to verify the specific content in that trie. Subsections of a trie do not have a\\nroot-hash-like representation that satisfy these needs automatically; thus a child trie is used\\ninstead.\"), mdx(\"h2\", {\n    \"id\": \"querying-storage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#querying-storage\",\n    \"aria-label\": \"querying storage permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Querying storage\"), mdx(\"p\", null, \"Blockchains that are built with Substrate expose a remote procedure call (RPC) server that can be\\nused to query runtime storage. When you use the Substrate RPC to access a storage item, you only\\nneed to provide \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#key-value-database\"\n  }, \"the key\"), \" associated with that item.\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/storage\"\n  }, \"Substrate's runtime storage APIs\"), \" expose a number of storage item types; keep\\nreading to learn how to calculate storage keys for the different types of storage items.\"), mdx(\"h3\", {\n    \"id\": \"storage-value-keys\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#storage-value-keys\",\n    \"aria-label\": \"storage value keys permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Storage value keys\"), mdx(\"p\", null, \"To calculate the key for a simple \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/storage#storage-value\"\n  }, \"Storage Value\"), \", take the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/Cyan4973/xxHash\"\n  }, \"TwoX 128 hash\"), \" of the name of the pallet that contains the\\nStorage Value and append to it the TwoX 128 hash of the name of the Storage Value itself. For\\nexample, the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/pallet_sudo/index.html\"\n  }, \"Sudo\"), \" pallet exposes a\\nStorage Value item named\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/pallet_sudo/struct.Module.html#method.key\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Key\")), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"twox_128(\\\"Sudo\\\")                   = \\\"0x5c0d1176a568c1f92944340dbfed9e9c\\\"\\ntwox_128(\\\"Key\\\")                    = \\\"0x530ebca703c85910e7164cb7d1c9e47b\\\"\\ntwox_128(\\\"Sudo\\\") + twox_128(\\\"Key\\\") = \\\"0x5c0d1176a568c1f92944340dbfed9e9c530ebca703c85910e7164cb7d1c9e47b\\\"\\n\")), mdx(\"p\", null, \"If the familiar \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alice\"), \" account is the sudo user, an RPC request and response to read the Sudo\\npallet's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Key\"), \" Storage Value could be represented as:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"state_getStorage(\\\"0x5c0d1176a568c1f92944340dbfed9e9c530ebca703c85910e7164cb7d1c9e47b\\\") = \\\"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\\\"\\n\")), mdx(\"p\", null, \"In this case, the value that is returned\\n(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\\\"\"), \") is Alice's\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../scale-codec\"\n  }, \"SCALE\"), \"-encoded account ID (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\"), \").\"), mdx(\"p\", null, \"You may have noticed that the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/storage#cryptographic-hashing-algorithms\"\n  }, \"non-cryptographic\"), \" TwoX 128 hash algorithm is\\nused to generate Storage Value keys. This is because it is not necessary to pay the performance\\ncosts associated with a cryptographic hash function since the input to the hash function (the names\\nof the pallet and storage item) are determined by the runtime developer and not by potentially\\nmalicious users of your blockchain.\"), mdx(\"h3\", {\n    \"id\": \"storage-map-keys\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#storage-map-keys\",\n    \"aria-label\": \"storage map keys permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Storage map keys\"), mdx(\"p\", null, \"Like Storage Values, the keys for \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/storage#storage-map\"\n  }, \"Storage Maps\"), \" are equal to the\\nTwoX 128 hash of the name of the pallet that contains the map prepended to the TwoX 128 hash of the\\nname of the Storage Map itself. To retrieve an element from a map, simply append the hash of the\\ndesired map key to the storage key of the Storage Map. For maps with two keys (Storage Double Maps),\\nappend the hash of the first map key followed by the hash of the second map key to the Storage\\nDouble Map's storage key. Like Storage Values, Substrate will use the TwoX 128 hashing algorithm for\\nthe pallet and Storage Map names, but you will need to make sure to use the correct\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/storage#hashing-algorithms\"\n  }, \"hashing algorithm\"), \" (the one that was declared in\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/storage#declaring-storage-items\"\n  }, \"the \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"#[pallet::storage]\"), \" macro\"), \") when determining the hashed\\nkeys for the elements in a map.\"), mdx(\"p\", null, \"Here is an example that illustrates querying a Storage Map named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FreeBalance\"), \" from a pallet named\\n\\\"Balances\\\" for the balance of the familiar \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alice\"), \" account. In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FreeBalance\"), \" map\\nis using\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/storage#transparent-hashing-algorithms\"\n  }, \"the transparent Blake2 128 Concat hashing algorithm\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"twox_128(\\\"Balances\\\")                                             = \\\"0xc2261276cc9d1f8598ea4b6a74b15c2f\\\"\\ntwox_128(\\\"FreeBalance\\\")                                          = \\\"0x6482b9ade7bc6657aaca787ba1add3b4\\\"\\nscale_encode(\\\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\\\") = \\\"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\\\"\\n\\nblake2_128_concat(\\\"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\\\") = \\\"0xde1e86a9a8c739864cf3cc5ec2bea59fd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\\\"\\n\\nstate_getStorage(\\\"0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4de1e86a9a8c739864cf3cc5ec2bea59fd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\\\") = \\\"0x0000a0dec5adc9353600000000000000\\\"\\n\")), mdx(\"p\", null, \"The value that is returned from the storage query (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"0x0000a0dec5adc9353600000000000000\\\"\"), \" in the\\nexample above) is the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../scale-codec\"\n  }, \"SCALE\"), \"-encoded value of Alice's account balance\\n(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"1000000000000000000000\\\"\"), \" in this example). Notice that before hashing Alice's account ID it has\\nto be SCALE-encoded. Also notice that the output of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"blake2_128_concat\"), \" function consists of 32\\nhexadecimal characters followed by the function's input. This is because the Blake2 128 Concat is\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/storage#transparent-hashing-algorithms\"\n  }, \"a transparent hashing algorithm\"), \". Although the\\nabove example may make this characteristic seem superfluous, its utility becomes more apparent when\\nthe goal is to iterate over the keys in a map (as opposed to retrieving the value associated with a\\nsingle key). The ability to iterate over the keys in a map is a common requirement in order to allow\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"people\"), \" to use the map in a way that seems natural (such as UIs): first, a user is presented with a\\nlist of elements in the map, then, that user can select the element that they are interested in and\\nquery the map for more details about that particular element. Here is another example that uses the\\nsame example Storage Map (a map named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FreeBalances\"), \" that uses a Blake2 128 Concat hashing algorithm\\nin a pallet named \\\"Balances\\\") that will demonstrate using the Substrate RPC to query a Storage Map\\nfor its list of keys via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state_getKeys\"), \" RPC endpoint:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"twox_128(\\\"Balances\\\")                                      = \\\"0xc2261276cc9d1f8598ea4b6a74b15c2f\\\"\\ntwox_128(\\\"FreeBalance\\\")                                   = \\\"0x6482b9ade7bc6657aaca787ba1add3b4\\\"\\n\\nstate_getKeys(\\\"0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4\\\") = [\\n    \\\"0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b4de1e86a9a8c739864cf3cc5ec2bea59fd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\\\",\\n    \\\"0xc2261276cc9d1f8598ea4b6a74b15c2f6482b9ade7bc6657aaca787ba1add3b432a5935f6edc617ae178fef9eb1e211fbe5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f\\\",\\n    ...\\n]\\n\")), mdx(\"p\", null, \"Each element in the list that is returned by the Substrate RPC's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state_getKeys\"), \" endpoint can be\\ndirectly used as input for the RPC's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state_getStorage\"), \" endpoint. In fact, the first element in the\\nexample list above is equal to the input used for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state_getStorage\"), \" query in the previous\\nexample (the one used to find the balance for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alice\"), \"). Because the map that these keys belong to\\nuses a transparent hashing algorithm to generate its keys, it is possible to determine the account\\nassociated with the second element in the list. Notice that each element in the list is a\\nhexadecimal value that begins with the same 64 characters; this is because each list element\\nrepresents a key in the same map, and that map is identified by concatenating two TwoX 128 hashes,\\neach of which are 128-bits or 32 hexadecimal characters. After discarding this portion of the second\\nelement in the list, you are left with\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x32a5935f6edc617ae178fef9eb1e211fbe5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f\"), \".\"), mdx(\"p\", null, \"You saw in the previous example that this represents the Blake2 128 Concat hash of some\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../scale-codec\"\n  }, \"SCALE\"), \"-encoded account ID. The Blake 128 Concat hashing algorithm consists of appending\\n(concatenating) the hashing algorithm's input to its Blake 128 hash. This means that the first 128\\nbits (or 32 hexadecimal characters) of a Blake2 128 Concat hash represents a Blake2 128 hash, and\\nthe remainder represents the value that was passed to the Blake 2 128 hashing algorithm. In this\\nexample, after you remove the first 32 hexadecimal characters that represent the Blake2 128 hash\\n(i.e. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x32a5935f6edc617ae178fef9eb1e211f\"), \") what is left is the hexadecimal value\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0xbe5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f\"), \", which is a\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../scale-codec\"\n  }, \"SCALE\"), \"-encoded account ID. Decoding this value yields the result\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\"), \", which is the account ID for the familiar\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alice_Stash\"), \" account.\"), mdx(\"h2\", {\n    \"id\": \"runtime-storage-api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#runtime-storage-api\",\n    \"aria-label\": \"runtime storage api permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Runtime storage API\"), mdx(\"p\", null, \"Substrate's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_support/index.html\"\n  }, \"FRAME Support crate\"), \"\\nprovides utilities for generating unique, deterministic keys for your runtime's storage items. These\\nstorage items are placed in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#trie-abstraction\"\n  }, \"state trie\"), \" and are accessible by\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#querying-storage\"\n  }, \"querying the trie by key\"), \".\"), mdx(\"h2\", {\n    \"id\": \"next-steps\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#next-steps\",\n    \"aria-label\": \"next steps permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Next steps\"), mdx(\"h3\", {\n    \"id\": \"learn-more\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#learn-more\",\n    \"aria-label\": \"learn more permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Learn more\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Learn how to add \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/v3/runtime/storage\"\n  }, \"storage items\"), \" into your Substrate runtime pallets.\")), mdx(\"h3\", {\n    \"id\": \"references\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#references\",\n    \"aria-label\": \"references permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Visit the reference docs for\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/trie_db/trait.Trie.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"paritytech/trie\")), \".\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#key-value-database","title":"Key-Value database"},{"url":"#trie-abstraction","title":"Trie abstraction","items":[{"url":"#state-trie","title":"State trie"},{"url":"#child-trie","title":"Child trie"}]},{"url":"#querying-storage","title":"Querying storage","items":[{"url":"#storage-value-keys","title":"Storage value keys"},{"url":"#storage-map-keys","title":"Storage map keys"}]},{"url":"#runtime-storage-api","title":"Runtime storage API"},{"url":"#next-steps","title":"Next steps","items":[{"url":"#learn-more","title":"Learn more"},{"url":"#references","title":"References"}]}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/docs/07-advanced/g-storage/index.mdx"}},"pageContext":{"slug":"/v3/advanced/storage","version":"3.0","locale":"en","hrefLang":"en-US","originalPath":"/v3/advanced/storage/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
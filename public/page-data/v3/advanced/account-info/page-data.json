{
    "componentChunkName": "component---src-templates-kb-template-tsx",
    "path": "/v3/advanced/account-info/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/v3/advanced/account-info","title":"Account Information","hideNav":null,"section":"docs","category":"advanced"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Account Information\",\n  \"slug\": \"/v3/advanced/account-info\",\n  \"version\": 3,\n  \"section\": \"docs\",\n  \"category\": \"advanced\",\n  \"keywords\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this article we will look into how an account is stored in Substrate and how its underlying data\\nstructure looks like. We will see that each account is associated with three reference counters, and\\nhow they are used to manage its lifecycle. If your runtime stores data associated with accounts\\non-chain, it is important to understand how to use these reference counters in your runtime logic.\"), mdx(\"h2\", {\n    \"id\": \"account-storagemap\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#account-storagemap\",\n    \"aria-label\": \"account storagemap permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"Account\"), \" StorageMap\"), mdx(\"p\", null, \"In Substrate, the entry point of account information is stored in\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_system/index.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"frame-system\"), \" pallet\"), \",\\nextracted below.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/src/frame_system/lib.rs.html#530\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"frame/system/src/lib.rs\")), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"/// The full account information for a particular account ID.\\n#[pallet::storage]\\n#[pallet::getter(fn account)]\\npub type Account<T: Config> = StorageMap<\\n  _,\\n  Blake2_128Concat,\\n  T::AccountId,\\n  AccountInfo<T::Index, T::AccountData>,\\n  ValueQuery,\\n>;\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Account\"), \" storage map takes in five type parameters, of which the first argument is used in macro\\nexpansion. Then it specifies using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Blake2_128Concat\"), \" as the hashing algorithm, and mapping\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T::AccountId\"), \" as key over \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountInfo<T::Index, T::AccountData>\"), \" struct. See\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_support/storage/types/struct.StorageMap.html#impl\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"StorageMap\"), \" API doc\"), \"\\nfor details.\"), mdx(\"h2\", {\n    \"id\": \"accountinfo-structure\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#accountinfo-structure\",\n    \"aria-label\": \"accountinfo structure permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"AccountInfo\"), \" structure\"), mdx(\"p\", null, \"Looking further down in the source code, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountInfo\"), \" struct is defined as:\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/src/frame_system/lib.rs.html#788-803\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"frame/system/src/lib.rs\")), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[derive(Clone, Eq, PartialEq, Default, RuntimeDebug, Encode, Decode)]\\npub struct AccountInfo<Index, AccountData> {\\n  /// The number of transactions this account has sent.\\n  pub nonce: Index,\\n  /// The number of other modules that currently depend on this account's existence. The account\\n  /// cannot be reaped until this is zero.\\n  pub consumers: RefCount,\\n  /// The number of other modules that allow this account to exist. The account may not be reaped\\n  /// until this and `sufficients` are both zero.\\n  pub providers: RefCount,\\n  /// The number of modules that allow this account to exist for their own purposes only. The\\n  /// account may not be reaped until this and `providers` are both zero.\\n  pub sufficients: RefCount,\\n  /// The additional data that belongs to this account. Used to store the balance(s) in a lot of\\n  /// chains.\\n  pub data: AccountData,\\n}\\n\")), mdx(\"p\", null, \"Every account has an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountInfo\"), \" consisting of an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nonce\"), \" indicating number of transactions the\\naccount has sent, three reference counters, and an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountData\"), \" structure which can be configured\\nto hold different kinds of data, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#accountdata-trait-and-implementation\"\n  }, \"further explained below\"), \".\"), mdx(\"h2\", {\n    \"id\": \"account-reference-counters\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#account-reference-counters\",\n    \"aria-label\": \"account reference counters permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Account reference counters\"), mdx(\"p\", null, \"Let's look deeper into the three reference counters, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"consumers\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"providers\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sufficients\"), \".\\nThese counters track references of an account being depended upon within runtime, for example when\\nwe store data under a map controlled by an account. With these counters we are telling Substrate to\\nnot destroy these accounts, which is usually triggered when users trying to transfer their\\nexistential deposit away.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"consumers\")), \" indicates how many times modules depend on this account. An example of using this\\ncounter is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Session\"), \" pallet when an account setting its session key(s) prior of becoming a\\nvalidator \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#ref-session-set-keys\"\n  }, \"[1]\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"providers\"), \" has to be greater than zero before \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"consumer\"), \"\\ncan be incremented. See below.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"providers\")), \" indicates if an account is active/ready to be depended upon. One usage example\\nis that the counter is incremented when a new account is created with more than the existential\\ndeposit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#ref-system-created\"\n  }, \"[2]\"), \".\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"consumers\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"providers\"), \" are designed to be used together. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"providers\"), \" tells Substrate pallets\\nnot to store data about that account until it is active (i.e. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"providers\"), \" > 0), and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"consumers\"), \"\\ntells Substrate not to remove an account until data about the account is removed in all pallets\\n(i.e. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"consumers\"), \" == 0). This is to keep users accountable for their data stored on-chain. If\\nusers want to remove their accounts and get back the exisitential deposit, they need to remove\\nthe dependencies from those on-chain pallets, such as clearing data stored on-chain for those\\npallets, which decrement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"consumers\"), \" counter. Pallets also have cleanup functions to decrement\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"providers\"), \" to mark the account as deactivated within the pallet-managed scope. When the account\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"providers\"), \" reaches 0, with the prerequsite that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"consumers\"), \" has reached 0 by this point, this\\naccount is considered \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"deactivated\"), \" by all on-chain pallets.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"sufficients\")), \" indicates if there are any reasons this account is self-sufficient to exist by\\nitself. An example of using this counter is in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Assets\"), \" pallet when an account has sufficient amount\\nof certain assets but not owning any native account balance \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#ref-assets-new-account\"\n  }, \"[3]\"), \".\"))), mdx(\"p\", null, \"Runtime developers can update these counters via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inc_consumers()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dec_consumers()\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inc_providers()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dec_providers()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inc_sufficients()\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dec_sufficients()\"), \" exposed by\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frame-system\"), \". Each increment call of a certain counter should accompanied by a corresponding decrement call of the counter in an account life cycle, else it is a design bug.\"), mdx(\"p\", null, \"There are also three query functions to ease usage on these counters:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"can_inc_consumer()\"), \" to check if an account is ready to be used (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"providers\"), \" > 0);\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"can_dec_provider()\"), \" to check if an account is no longer referenced in runtime whatsoever\\n(\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"consumers\"), \" == 0) before decrementing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"providers\"), \" to 0; and\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"is_provider_required()\"), \" to check if an account has outstanding consumer references\\n(\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"consumers\"), \" > 0).\")), mdx(\"p\", null, \"Refer to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_system/pallet/struct.Pallet.html#impl-11\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"frame-system\"), \" API doc\"), \"\\nfor details.\"), mdx(\"h2\", {\n    \"id\": \"accountdata-trait-and-implementation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#accountdata-trait-and-implementation\",\n    \"aria-label\": \"accountdata trait and implementation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"AccountData\"), \" trait and implementation\"), mdx(\"p\", null, \"Back to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountInfo\"), \" struct. The last piece of data in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountInfo\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountData\"), \". It can be any struct as long as it satisfies the associated type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountData\"), \" trait bound defined in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_system/pallet/trait.Config.html#associatedtype.AccountData\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"frame-system::pallet::Config\"), \" trait\"), \". Out of the box Substrate runtime configures it to be \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/pallet_balances/struct.AccountData.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"AccountData\"), \" struct\"), \" defined in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pallet-balances\"), \" as shown below.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/src/pallet_balances/lib.rs.html#566-586\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"frame/balances/src/lib.rs\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"pub struct AccountData<Balance> {\\n  /// Non-reserved part of the balance. There may still be restrictions on this, but it is the\\n  /// total pool what may in principle be transferred, reserved and used for tipping.\\n  ///\\n  /// This is the only balance that matters in terms of most operations on tokens. It\\n  /// alone is used to determine the balance when in the contract execution environment.\\n  pub free: Balance,\\n  /// Balance which is reserved and may not be used at all.\\n  ///\\n  /// This can still get slashed, but gets slashed last of all.\\n  ///\\n  /// This balance is a 'reserve' balance that other subsystems use in order to set aside tokens\\n  /// that are still 'owned' by the account holder, but which are suspendable.\\n  pub reserved: Balance,\\n  /// The amount that `free` may not drop below when withdrawing for *anything except transaction\\n  /// fee payment*.\\n  pub misc_frozen: Balance,\\n  /// The amount that `free` may not drop below when withdrawing specifically for transaction\\n  /// fee payment.\\n  pub fee_frozen: Balance,\\n}\\n\")), mdx(\"p\", null, \"It contains:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Free balance\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"free\"), \". The portion of a balance that is not reserved. The free balance is\\nusually what matters for most operations.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Reserved balance\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reserved\"), \". Reserved balance still belongs to the account holder, but is\\nsuspended. Reserved balance can be slashed, but only after all the free balance has been slashed.\\nThe total balance of an account is the sum of its free balance and reserved balance.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Frozen balance\"), \", split into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"misc_frozen\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fee_frozen\"), \", represents balance that free\\nbalance cannot drop below. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fee_frozen\"), \" are specifically for transaction fee payment and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"misc_frozen\"), \" for everything else. The actual frozen balance is the max of these two, and they are\\nset when accounts are locked for transactions.\"))), mdx(\"h2\", {\n    \"id\": \"conclusion\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Conclusion\"), mdx(\"p\", null, \"By now, you have a clear picture how account data is stored in Substrate. You can dig deeper by\\nlooking into the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_system/struct.AccountInfo.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"frame_system::AccountInfo\"), \" API doc\"), \"\\nand \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/pallet_balances/struct.AccountData.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"pallet_balances::AccountData\"), \" API doc\"), \".\"), mdx(\"h2\", {\n    \"id\": \"references\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#references\",\n    \"aria-label\": \"references permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/src/pallet_session/lib.rs.html#508-571\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"pallet_session::Pallet::set_keys\"), \" dispatchable call\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/src/frame_system/lib.rs.html#1549-1561\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"frame_system::Provider\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"HandleLifetime\"), \" implementation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/src/pallet_assets/functions.rs.html#46-61\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"pallet_assets\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"new_account\"), \" function\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#account-storagemap","title":"Account StorageMap"},{"url":"#accountinfo-structure","title":"AccountInfo structure"},{"url":"#account-reference-counters","title":"Account reference counters"},{"url":"#accountdata-trait-and-implementation","title":"AccountData trait and implementation"},{"url":"#conclusion","title":"Conclusion"},{"url":"#references","title":"References"}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/docs/07-advanced/a-account-info/index.mdx"}},"pageContext":{"slug":"/v3/advanced/account-info","version":"3.0","locale":"en","hrefLang":"en-US","originalPath":"/v3/advanced/account-info/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
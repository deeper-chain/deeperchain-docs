{
    "componentChunkName": "component---src-templates-kb-template-tsx",
    "path": "/v3/advanced/scale-codec/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/v3/advanced/scale-codec","title":"SCALE Codec","hideNav":null,"section":"docs","category":"advanced"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"SCALE Codec\",\n  \"slug\": \"/v3/advanced/scale-codec\",\n  \"version\": 3,\n  \"section\": \"docs\",\n  \"category\": \"advanced\",\n  \"keywords\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The SCALE (Simple Concatenated Aggregate Little-Endian) Codec is a lightweight, efficient, binary\\nserialization and deserialization codec.\"), mdx(\"p\", null, \"It is designed for high-performance, copy-free encoding and decoding of data in resource-constrained\\nexecution contexts, like the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/concepts/runtime\"\n  }, \"Substrate runtime\"), \". It is not self-describing in any way\\nand assumes the decoding context has all type knowledge about the encoded data.\"), mdx(\"h2\", {\n    \"id\": \"scale-for-substrate\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#scale-for-substrate\",\n    \"aria-label\": \"scale for substrate permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"SCALE for Substrate\"), mdx(\"p\", null, \"Substrate uses the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/parity-scale-codec\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"parity-scale-codec\")), \", a Rust\\nimplementation of the SCALE Codec. This library and the SCALE codec are advantageous for Substrate\\nand blockchain systems because:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is lightweight relative to generic serialization frameworks like \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://serde.rs/\"\n  }, \"serde\"), \",\\nwhich add significant boilerplate that can bloat the size of the binary.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It does not use Rust STD, and thus can compile to Wasm for the Substrate runtime.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is built to have great support in Rust for deriving codec logic for new types:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"#[derive(Encode, Decode)]\\n\")))), mdx(\"p\", null, \"It is important to define the encoding scheme used on Substrate rather than reuse an existing Rust\\ncodec library because this codec needs to be re-implemented on other platforms and languages that\\nwant to support interoperability.\"), mdx(\"h2\", {\n    \"id\": \"codec-definition\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#codec-definition\",\n    \"aria-label\": \"codec definition permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Codec definition\"), mdx(\"p\", null, \"Here you will find how the SCALE codec encodes different types.\"), mdx(\"h3\", {\n    \"id\": \"fixed-width-integers\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#fixed-width-integers\",\n    \"aria-label\": \"fixed width integers permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Fixed-width integers\"), mdx(\"p\", null, \"Basic integers are encoded using a fixed-width little-endian (LE) format.\"), mdx(\"h4\", null, \"Example\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"signed 8-bit integer 69\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x45\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"unsigned 16-bit integer 42\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x2a00\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"unsigned 32-bit integer 16777215\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0xffffff00\"))), mdx(\"h3\", {\n    \"id\": \"compactgeneral-integers\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#compactgeneral-integers\",\n    \"aria-label\": \"compactgeneral integers permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Compact/general integers\"), mdx(\"p\", null, \"A \\\"compact\\\" or general integer encoding is sufficient for encoding large integers (up to 2\", \"*\", \"*\", \"536)\\nand is more efficient at encoding most values than the fixed-width version. (Though for single-byte\\nvalues, the fixed-width integer is never worse.)\"), mdx(\"p\", null, \"It is encoded with the two least significant bits denoting the mode:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0b00\"), \": single-byte mode; upper six bits are the LE encoding of the value (valid only for values\\nof 0-63).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0b01\"), \": two-byte mode: upper six bits and the following byte is the LE encoding of the value\\n(valid only for values \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"64-(2**14-1)\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0b10\"), \": four-byte mode: upper six bits and the following three bytes are the LE encoding of the\\nvalue (valid only for values \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(2**14)-(2**30-1)\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0b11\"), \": Big-integer mode: The upper six bits are the number of bytes following, plus four. The\\nvalue is contained, LE encoded, in the bytes following. The final (most significant) byte must be\\nnon-zero. Valid only for values \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(2**30)-(2**536-1)\"), \".\")), mdx(\"h4\", null, \"Example\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"unsigned integer 0\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x00\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"unsigned integer 1\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x04\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"unsigned integer 42\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0xa8\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"unsigned integer 69\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x1501\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"unsigned integer 65535\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0xf3ff0300\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"BigInt(100000000000000)\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x0b00407a10f35a\"))), mdx(\"p\", null, \"Error:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"del\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"del\"\n  }, \"0x0100\"), \": Zero encoded in mode 1\"))), mdx(\"h3\", {\n    \"id\": \"boolean\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#boolean\",\n    \"aria-label\": \"boolean permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Boolean\"), mdx(\"p\", null, \"Boolean values are encoded using the least significant bit of a single byte.\"), mdx(\"h4\", null, \"Example\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"boolean false\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x00\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"boolean true\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x01\"))), mdx(\"h3\", {\n    \"id\": \"options\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#options\",\n    \"aria-label\": \"options permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Options\"), mdx(\"p\", null, \"One or zero values of a particular type. Encoded as:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x00\"), \" if it is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"None\"), \" (\\\"empty\\\" or \\\"null\\\").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x01\"), \" followed by the encoded value if it is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Some\"), \".\")), mdx(\"p\", null, \"As an exception, in the case that the type is a boolean, then it is always one byte:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x00\"), \" if it is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"None\"), \" (\\\"empty\\\" or \\\"null\\\").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x01\"), \" if it is the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \" value.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x02\"), \" if it is the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \" value.\")), mdx(\"h3\", {\n    \"id\": \"results\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#results\",\n    \"aria-label\": \"results permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Results\"), mdx(\"p\", null, \"Results are commonly used enumerations which indicate whether certain operations were successful or\\nunsuccessful. Encoded as:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x00\"), \" if the operation was successful, followed by the encoded value.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x01\"), \" if the operation was unsuccessful, followed by the encoded error.\")), mdx(\"h4\", null, \"Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"// A custom result type used in a crate.\\nlet Result = std::result::Result<u8, bool>;\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ok(42)\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x002a\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Err(false)\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x0100\"))), mdx(\"h3\", {\n    \"id\": \"vectors-lists-series-sets\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#vectors-lists-series-sets\",\n    \"aria-label\": \"vectors lists series sets permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Vectors (lists, series, sets)\"), mdx(\"p\", null, \"A collection of same-typed values is encoded, prefixed with a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"compact\"), \" encoding of the number of\\nitems, followed by each item's encoding concatenated in turn.\"), mdx(\"h4\", null, \"Example\"), mdx(\"p\", null, \"Vector of unsigned 16-bit integers:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"[4, 8, 15, 16, 23, 42]\\n\")), mdx(\"p\", null, \"SCALE Bytes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"0x18040008000f00100017002a00\\n\")), mdx(\"h3\", {\n    \"id\": \"strings\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#strings\",\n    \"aria-label\": \"strings permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Strings\"), mdx(\"p\", null, \"Strings are Vectors of bytes (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vec<u8>\"), \") containing a valid UTF8 sequence.\"), mdx(\"h3\", {\n    \"id\": \"tuples\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#tuples\",\n    \"aria-label\": \"tuples permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Tuples\"), mdx(\"p\", null, \"A fixed-size series of values, each with a possibly different but predetermined and fixed type. This\\nis simply the concatenation of each encoded value.\"), mdx(\"h4\", null, \"Example\"), mdx(\"p\", null, \"Tuple of compact unsigned integer and boolean:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(3, false)\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x0c00\")), mdx(\"h3\", {\n    \"id\": \"data-structures\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#data-structures\",\n    \"aria-label\": \"data structures permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Data structures\"), mdx(\"p\", null, \"For structures, the values are named, but that is irrelevant for the encoding (names are ignored -\\nonly order matters). \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"All containers store elements consecutively. The order of the elements is not\\nfixed, depends on the container, and cannot be relied on at decoding.\")), mdx(\"p\", null, \"This implicitly means that decoding some byte-array into a specified structure that enforces an\\norder and then re-encoding it could result in a different byte array than the original that was\\ndecoded.\"), mdx(\"h4\", null, \"Example\"), mdx(\"p\", null, \"Imagine a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SortedVecAsc<u8>\"), \" structure that always has byte-elements in ascending order and you have\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[3, 5, 2, 8]\"), \", where the first element is the number of bytes following (i.e. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[3, 5, 2]\"), \" would be\\ninvalid).\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SortedVecAsc::from([3, 5, 2, 8])\"), \" would decode to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[3, 2, 5, 8]\"), \", which does not match the original\\nencoding.\"), mdx(\"h3\", {\n    \"id\": \"enumerations-tagged-unions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#enumerations-tagged-unions\",\n    \"aria-label\": \"enumerations tagged unions permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Enumerations (tagged-unions)\"), mdx(\"p\", null, \"A fixed number of variants, each mutually exclusive and potentially implying a further value or\\nseries of values.\"), mdx(\"p\", null, \"Encoded as the first byte identifying the index of the variant that the value is. Any further bytes\\nare used to encode any data that the variant implies. Thus, no more than 256 variants are supported.\"), mdx(\"h4\", null, \"Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"enum IntOrBool {\\n  Int(u8),\\n  Bool(bool),\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Int(42)\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x002a\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Bool(true)\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0x0101\"))), mdx(\"h2\", {\n    \"id\": \"implementations\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#implementations\",\n    \"aria-label\": \"implementations permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Implementations\"), mdx(\"p\", null, \"The Parity SCALE Codec has been implemented in many languages, including a reference implementation\\nthat is written in Rust and maintained by Parity Technologies.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rust: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/paritytech/parity-scale-codec\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"paritytech/parity-scale-codec\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Python: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/polkascan/py-scale-codec\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"polkascan/py-scale-codec\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Golang: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/itering/scale.go\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"itering/scale.go\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"C++: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/soramitsu/kagome/tree/master/core/scale\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"soramitsu/scale\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JavaScript: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/polkadot-js/api\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"polkadot-js/api\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"AssemblyScript: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/LimeChain/as-scale-codec\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"LimeChain/as-scale-codec\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Haskell: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/airalab/hs-web3/tree/master/packages/scale\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"airalab/hs-web3\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Java: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/emeraldpay/polkaj\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"emeraldpay/polkaj\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ruby: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/itering/scale.rb\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"itering/scale.rb\")))), mdx(\"h2\", {\n    \"id\": \"references\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#references\",\n    \"aria-label\": \"references permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Visit the reference docs for the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/parity_scale_codec/index.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"parity-scale-codec\")), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Visit the auxiliary encoding section of the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/w3f/polkadot-spec/\"\n  }, \"Polkadot runtime environment specification\"), \".\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#scale-for-substrate","title":"SCALE for Substrate"},{"url":"#codec-definition","title":"Codec definition","items":[{"url":"#fixed-width-integers","title":"Fixed-width integers"},{"url":"#compactgeneral-integers","title":"Compact/general integers"},{"url":"#boolean","title":"Boolean"},{"url":"#options","title":"Options"},{"url":"#results","title":"Results"},{"url":"#vectors-lists-series-sets","title":"Vectors (lists, series, sets)"},{"url":"#strings","title":"Strings"},{"url":"#tuples","title":"Tuples"},{"url":"#data-structures","title":"Data structures"},{"url":"#enumerations-tagged-unions","title":"Enumerations (tagged-unions)"}]},{"url":"#implementations","title":"Implementations"},{"url":"#references","title":"References"}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/docs/07-advanced/b-scale-codec/index.mdx"}},"pageContext":{"slug":"/v3/advanced/scale-codec","version":"3.0","locale":"en","hrefLang":"en-US","originalPath":"/v3/advanced/scale-codec/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
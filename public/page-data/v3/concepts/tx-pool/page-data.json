{
    "componentChunkName": "component---src-templates-kb-template-tsx",
    "path": "/v3/concepts/tx-pool/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/v3/concepts/tx-pool","title":"Transaction Pool","hideNav":null,"section":"docs","category":"concepts"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Transaction Pool\",\n  \"slug\": \"/v3/concepts/tx-pool\",\n  \"version\": 3,\n  \"section\": \"docs\",\n  \"category\": \"concepts\",\n  \"keywords\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The transaction pool contains all transactions (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/concepts/extrinsics#signed-transactions\"\n  }, \"signed\"), \"\\nand \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/concepts/extrinsics#unsigned-transactions\"\n  }, \"unsigned\"), \") broadcasted to the network that have been\\nreceived and validated by the local node.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Validity\")), mdx(\"p\", null, \"The transaction pool checks for transaction validity. Note that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validity\"), \" of the transaction is not\\nhard-wired to the transaction pool, but is defined by the runtime. Example validity checks are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Checking if the Transaction Index (nonce) is correct.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Checking if the account has enough funds to pay for the associated fees.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Checking if the signature is valid.\")), mdx(\"p\", null, \"The transaction pool also regularly checks validity of existing transactions within the pool. A\\ntransaction will be dropped from the pool if it is found to be invalid or is an expired mortal transaction.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sorting\")), mdx(\"p\", null, \"If the transaction is valid, the transaction queue sorts transactions into two groups:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Ready Queue\"), \" - Contains transactions that can be included in a new pending block. For runtimes\\nbuilt with FRAME, the transactions must follow the exact order in the ready queue.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Future Queue\"), \" - Contains transactions that may become valid in the future. For example, a\\ntransaction may have a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nonce\"), \" that is too high for its account. This transaction will wait in the\\nfuture queue until the preceding transactions are included in the chain.\")), mdx(\"p\", null, \"Note: It's possible to design a custom runtime to remove the strict transaction ordering\\nrequirement. This would allow full nodes to implement different strategies on transaction\\npropagation and block inclusion.\"), mdx(\"h2\", {\n    \"id\": \"transaction-dependencies\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#transaction-dependencies\",\n    \"aria-label\": \"transaction dependencies permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Transaction dependencies\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidTransaction\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sp_runtime/transaction_validity/struct.ValidTransaction.html\"\n  }, \"struct\"), \"\\ndefines the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"requires\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"provides\"), \" parameters to build a dependency graph of transactions.\\nTogether with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"priority\"), \" (discussed below), this dependency graph allows the pool to produce a valid\\nlinear ordering of transactions.\"), mdx(\"p\", null, \"For runtimes built with FRAME, the nodes order transactions with an account-based system. Every\\nsigned transaction needs to contain a nonce, which is incremented by 1 every time a new transaction\\nis made. For example, the first transaction from a new account will have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nonce = 0\"), \" and the second\\ntransaction will have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nonce = 1\"), \".\"), mdx(\"p\", null, \"At minimum, FRAME transactions have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"provides\"), \" tag of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"encode(sender ++ nonce)\"), \" and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"requires\"), \"\\ntag of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"encode(sender ++ (nonce -1)) if nonce > 1\"), \". Transactions do not require anything if\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nonce=0\"), \". As a result, all transactions coming from a single sender will form a sequence in which\\nthey should be included.\"), mdx(\"p\", null, \"Substrate supports multiple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"provides\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"requires\"), \" tags, so custom runtimes can create alternate\\ndependency (ordering) schemes.\"), mdx(\"h2\", {\n    \"id\": \"transaction-priority\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#transaction-priority\",\n    \"aria-label\": \"transaction priority permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Transaction priority\"), mdx(\"p\", null, \"Transaction \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"priority\"), \" in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sp_runtime/transaction_validity/struct.ValidTransaction.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ValidTransaction\"), \"\\nstruct\"), \"\\ndetermines the ordering of transactions that are in the ready queue. If a node is the next block\\nauthor, it will order transactions from high to low priority in the next block until it reaches the\\nweight or length limit of the block.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"priority\"), \" defines the linear ordering of a graph in the case of one transaction unlocking multiple\\ndependent transactions. For example, if we have two (or more) transactions that have their\\ndependencies satisfied, then we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"priority\"), \" to choose the order for them.\"), mdx(\"p\", null, \"For runtimes built with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/frame\"\n  }, \"FRAME\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"priority\"), \" is defined as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fee\"), \" that the transaction\\nis going to pay. For example:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If we receive 2 transactions from \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"different\"), \" senders (with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nonce=0\"), \"), we use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"priority\"), \" to\\ndetermine which transaction is more important and included in the block first.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If we receive 2 transactions from the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"same\"), \" sender with an identical \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nonce\"), \", only one\\ntransaction can be included on-chain. We use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"priority\"), \" to choose the transaction with a higher\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fee\"), \" to store in the transaction pool.\")), mdx(\"p\", null, \"Note that the pool does not know about fees, accounts, or signatures - it only deals with the\\nvalidity of the transaction and the abstract notion of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"priority\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"requires\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"provides\"), \"\\nparameters. All other details are defined by the runtime via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validate_transaction\"), \" function.\"), mdx(\"h2\", {\n    \"id\": \"transaction-lifecycle\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#transaction-lifecycle\",\n    \"aria-label\": \"transaction lifecycle permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Transaction lifecycle\"), mdx(\"p\", null, \"A transaction can follow two paths:\"), mdx(\"h3\", {\n    \"id\": \"block-produced-by-our-node\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#block-produced-by-our-node\",\n    \"aria-label\": \"block produced by our node permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Block produced by our node\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Our node listens for transactions on the network.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Each transaction is verified and valid transactions are placed in the transaction pool.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The pool is responsible for ordering the transactions and returning ones that are ready to be\\nincluded in the block. Transactions in the ready queue are used to construct a block.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Transactions are executed and state changes are stored in local memory. Transactions from the\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ready\"), \" queue are also propagated (gossiped) to peers over the network. We use the exact ordering\\nas the pending block since transactions in the front of the queue have a higher priority and are\\nmore likely to be successfully executed in the next block.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The constructed block is published to the network. All other nodes on the network receive and\\nexecute the block.\")), mdx(\"p\", null, \"Note that transactions are not removed from the ready queue when blocks are authored, but removed\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"only\"), \" on block import. This is due to the possibility that a recently-authored block may not make\\nit into the canonical chain.\"), mdx(\"h3\", {\n    \"id\": \"block-received-from-network\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#block-received-from-network\",\n    \"aria-label\": \"block received from network permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Block received from network\"), mdx(\"p\", null, \"The block is executed and the entire block either succeeds or fails.\"), mdx(\"h2\", {\n    \"id\": \"transaction-validity\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#transaction-validity\",\n    \"aria-label\": \"transaction validity permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Transaction validity\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sp_transaction_pool/runtime_api/trait.TaggedTransactionQueue.html#method.validate_transaction\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"validate_transaction\")), \"\\nis called from the runtime, checks for a valid signature and nonce (or output for a UTXO chain) and returns\\na \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Result\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validate_transaction\"), \" checks transactions in isolation, so it will not catch errors like the\\nsame output being spent twice.\"), mdx(\"p\", null, \"Although it is possible, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validate_transaction\"), \" does not check whether calls to pallets will\\nsucceed. It is a potential DoS vector since all transactions in the network will be passed into\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validate_transaction\"), \".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validate_transaction\"), \" function should focus on providing the necessary information for the pool\\nto order and prioritize transactions, and quickly reject all transactions that are invalid or\\noutdated. The function will be called frequently, potentially multiple times for the same\\ntransaction. It is also possible for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validate_transaction\"), \" to fail a dependent transaction that\\nwould pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"execute_block\"), \" if it were executed in the correct order.\"), mdx(\"h2\", {\n    \"id\": \"signed-extension\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#signed-extension\",\n    \"aria-label\": \"signed extension permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Signed extension\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sp_runtime/traits/trait.SignedExtension.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"SignedExtension\")), \" is a trait\\nby which a transaction can be extended with additional data or logic.\\nSigned extensions are used anywhere you want some information about a transaction prior to\\nexecution. This is heavily used in the transaction pool.\"), mdx(\"p\", null, \"The runtime can use some of this data, for example the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Call\"), \" that will be dispatched, to calculate\\ntransaction fees. Signed extensions also include an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AdditionalSigned\"), \" type that can hold any\\nencodable data, and therefore allow you to perform any custom logic prior to including or\\ndispatching a transaction. The transaction queue regularly calls functions from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SignedExtension\"), \" to\\nvalidate transactions prior to block construction to avoid including transactions that will fail in\\nblocks.\"), mdx(\"p\", null, \"Despite the name, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SignedExtension\"), \" can also be used to verify \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/concepts/extrinsics#unsigned-transactions\"\n  }, \"unsigned transactions\"), \".\\nThe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*_unsigned\"), \" set of methods can be implemented to encapsulate validation, spam, and replay\\nprotection logic that is needed by the transaction pool.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/sp_runtime/traits/trait.SignedExtension.html\"\n  }, \"Signed Extension API\"))), mdx(\"h2\", {\n    \"id\": \"further-reading\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#further-reading\",\n    \"aria-label\": \"further reading permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Further Reading\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/v3/concepts/extrinsics\"\n  }, \"Extrinsics\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/v3/runtime/weights-and-fees\"\n  }, \"Transaction Fees\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#transaction-dependencies","title":"Transaction dependencies"},{"url":"#transaction-priority","title":"Transaction priority"},{"url":"#transaction-lifecycle","title":"Transaction lifecycle","items":[{"url":"#block-produced-by-our-node","title":"Block produced by our node"},{"url":"#block-received-from-network","title":"Block received from network"}]},{"url":"#transaction-validity","title":"Transaction validity"},{"url":"#signed-extension","title":"Signed extension"},{"url":"#further-reading","title":"Further Reading"}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/docs/02-concepts/d-transaction-pool/index.mdx"}},"pageContext":{"slug":"/v3/concepts/tx-pool","version":"3.0","locale":"en","hrefLang":"en-US","originalPath":"/v3/concepts/tx-pool/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
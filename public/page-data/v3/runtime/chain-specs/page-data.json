{
    "componentChunkName": "component---src-templates-kb-template-tsx",
    "path": "/v3/runtime/chain-specs/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/v3/runtime/chain-specs","title":"Chain Specification","hideNav":null,"section":"docs","category":"runtime"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Chain Specification\",\n  \"slug\": \"/v3/runtime/chain-specs\",\n  \"version\": 3,\n  \"section\": \"docs\",\n  \"category\": \"runtime\",\n  \"keywords\": \"genesis, configuration, chain spec\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Message = makeShortcode(\"Message\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A chain specification, or \\\"chain spec\\\", is a collection of configuration information that dictates\\nwhich network a blockchain node will connect to, which entities it will initially communicate with,\\nand what consensus-critical state it must have at genesis.\"), mdx(\"h2\", {\n    \"id\": \"structure-of-a-chain-specification\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#structure-of-a-chain-specification\",\n    \"aria-label\": \"structure of a chain specification permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Structure of a chain specification\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sc_service/struct.GenericChainSpec.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ChainSpec\"), \" struct\"), \"\\nseparates the information contained in a chain spec into two parts. A node can use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ChainSpec\"), \"\\ninstance to create a genesis block.\"), mdx(\"h3\", {\n    \"id\": \"the-client-spec\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#the-client-spec\",\n    \"aria-label\": \"the client spec permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"The client spec\"), mdx(\"p\", null, \"The first part of the chain spec, is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClientSpec\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClientSpec\"), \" contains configuration\\ninformation used by the Substrate client, the part of the node outside of the runtime. Much of this\\ninformation is used to communicate with other parties in the network such as a set of bootnodes, a\\nset of telemetry endpoints to which the node will send data, and human- and machine-readable names\\nfor the network to which the node will connect. Many of these items can be overridden by\\ncommand-line flags, and the values can be changed after the blockchain has been launched.\"), mdx(Message, {\n    type: \"red\",\n    title: \"Warning\",\n    text: \"While all properties in this section can be changed after genesis, nodes will only add\\n  peers who use the same `protocolId`.\",\n    mdxType: \"Message\"\n  }), mdx(\"h4\", null, \"Extension\"), mdx(\"p\", null, \"Because the Substrate framework is extensible, it provides a way to customize the client spec with\\nadditional data to configure customized parts of the client. One example use case is telling the\\nnode about well-known blocks at specific heights, to prevent long range attacks when syncing a new\\nnode from genesis.\"), mdx(\"h3\", {\n    \"id\": \"the-genesis-state\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#the-genesis-state\",\n    \"aria-label\": \"the genesis state permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"The genesis state\"), mdx(\"p\", null, \"The second part of the chain spec is the consensus-critical genesis configuration. All nodes in the\\nnetwork must agree on this initial state before they can agree on any subsequent blocks. Therefore,\\nthis information must be established at the outset of the chain and cannot be changed thereafter\\nwithout starting an entirely new blockchain. There are no command-line flags to override values in\\nthe genesis portion of a chain spec.\"), mdx(\"p\", null, \"Examples of what information might be included in the genesis portion of a chain spec include\\ninitial token balances, the accounts that are initially part of a governance council, or the holder\\nof the sudo key. Substrate nodes also place the compiled Wasm runtime logic on chain, so the initial\\nruntime must also be supplied in the chain spec.\"), mdx(\"p\", null, \"It is this second part of the chain spec that is used when creating a genesis block.\"), mdx(\"h2\", {\n    \"id\": \"storing-chain-specification-information\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#storing-chain-specification-information\",\n    \"aria-label\": \"storing chain specification information permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Storing chain specification information\"), mdx(\"p\", null, \"The information that comprises a chain spec can be stored in either of two ways. Being a Rust\\nstruct, the first way to store this information is as Rust code. Indeed, Substrate nodes typically\\ninclude at least one, and often many, chain specs hard-coded into the client. Including this\\ninformation directly in the client ensures that the node will know how to connect to at least one\\nchain without any additional information supplied by the node operator. In protocols that have a\\nnotion of \\\"main net\\\" this spec is usually hard-coded in the client.\"), mdx(\"p\", null, \"Another common way to store chain spec information is in JSON format. The chain spec struct has a\\nmethod for serializing its data into JSON as well as a function for de-serializing JSON data into an\\ninstance of a chain spec. When launching testnets or private chains, it is common to distribute a\\nJSON-encoded chain spec along with the node binary.\"), mdx(\"h2\", {\n    \"id\": \"using-chain-specifications\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#using-chain-specifications\",\n    \"aria-label\": \"using chain specifications permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using chain specifications\"), mdx(\"p\", null, \"Node operators and runtime developers will encounter chain specifications when performing common\\ntasks.\"), mdx(\"h3\", {\n    \"id\": \"launching-a-chain\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#launching-a-chain\",\n    \"aria-label\": \"launching a chain permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Launching a chain\"), mdx(\"p\", null, \"Each time a node operator starts a node, they provide a chain specification that the node should\\nuse. In the simplest case, the chain spec is provided implicitly and the node uses a default chain\\nspec that is hard-coded into the node binary.\"), mdx(\"p\", null, \"A common task is to start a testnet or private network that behaves similarly to an existing\\nprotocol, but is not connected to the mainnet. To achieve this, the operator may choose an\\nalternative hard-coded chain spec by using a command-line flag such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--chain local\"), \" that\\ninstructs the node to use the spec associated with the string \\\"local\\\". A third option available to\\nnode operators is to provide a chain spec as a JSON file with a command-line flag such as\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--chain=someCustomSpec.json\"), \", in which case the node will attempt to de-serialize the provided JSON\\nchain spec, and then use it.\"), mdx(\"h3\", {\n    \"id\": \"developing-a-runtime\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#developing-a-runtime\",\n    \"aria-label\": \"developing a runtime permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Developing a runtime\"), mdx(\"p\", null, \"Nearly every Substrate runtime will have storage items that need to be configured at genesis. When\\ndeveloping with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/frame\"\n  }, \"FRAME\"), \", any storage item that is declared with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config()\"), \"\\noption requires configuration at genesis. It is the job of the chain spec, specifically the genesis\\nportion, to configure such storage values.\"), mdx(\"h3\", {\n    \"id\": \"customizing-a-chain-spec\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#customizing-a-chain-spec\",\n    \"aria-label\": \"customizing a chain spec permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Customizing a chain spec\"), mdx(\"p\", null, \"When creating a one-off network for development, testing, or demonstration purposes, a truly\\ncustomized chain spec may be desired. Node operators may export the default chain spec for the\\nprotocol to JSON format and then make edits. Substrate-based nodes are equipped with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build-spec\"), \"\\nsub-command that does this exporting.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"substrate build-spec > myCustomSpec.json\\n\")), mdx(\"p\", null, \"Once the chain spec has been exported, the node operator is free to modify any of its fields. It is\\ncommon to modify the network's name and bootnodes as well as any genesis storage items, such as\\ntoken balances, that the operator wishes. Once the edits are made, the operator may launch their\\ncustomized chain by supplying the customized JSON.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"substrate --chain=myCustomSpec.json\\n\")), mdx(\"h2\", {\n    \"id\": \"raw-chain-specifications\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#raw-chain-specifications\",\n    \"aria-label\": \"raw chain specifications permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Raw chain specifications\"), mdx(\"p\", null, \"Substrate nodes support runtime upgrades, which means a blockchain's runtime may be different than\\nwhen the chain began. Chain specs, as discussed so far, contain information structured in a way that\\ncan be understood by the node's runtime. For example, consider this excerpt from the default\\nSubstrate node's chain specification \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".json\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"sudo\\\": {\\n  \\\"key\\\": \\\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\\\"\\n}\\n\")), mdx(\"p\", null, \"Before this spec can be used to initialize a node's genesis storage, the human-readable keys must be\\ntransformed into actual storage keys for the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/advanced/storage\"\n  }, \"storage trie\"), \". This\\ntransformation is straight-forward, but it requires that the node's runtime be able to understand\\nthe chain spec.\"), mdx(\"p\", null, \"If a node with an upgraded runtime attempts to synchronize a chain from genesis, it will not\\nunderstand the information in this human-readable chain spec. For this reason, there is a second\\nencoding of the chain spec known as the \\\"raw\\\" chain spec.\"), mdx(\"p\", null, \"When distributing chain specs in JSON format, they should be distributed in this raw format to\\nensure that all nodes can sync the chain even after runtime upgrades. Substrate-based nodes support\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--raw\"), \" flag to produce such raw chain specs.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"substrate build-spec --chain=myCustomSpec.json --raw > customSpecRaw.json\\n\")), mdx(\"p\", null, \"After the conversion process, the above snippet looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"0x50a63a871aced22e88ee6466fe5aa5d9\\\": \\\"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\\\",\\n\")), mdx(\"h2\", {\n    \"id\": \"next-steps\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#next-steps\",\n    \"aria-label\": \"next steps permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Next steps\"), mdx(\"h3\", {\n    \"id\": \"learn-more\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#learn-more\",\n    \"aria-label\": \"learn more permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Learn more\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Have a look at the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/how-to-guides/v3/basics/genesis/\"\n  }, \"how-to guide on basic genesis configuration\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rustdocs for the\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/sc_service/struct.GenericChainSpec.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ChainSpec\"), \" struct\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rustdocs for the\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/sc_network/config/struct.ProtocolId.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ProtocolId\"), \" struct\"))), mdx(\"h3\", {\n    \"id\": \"examples\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#examples\",\n    \"aria-label\": \"examples permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Examples\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gain hands-on experience with chain specs by\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/tutorials/v3/private-network\"\n  }, \"starting a private network\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/substrate-developer-hub/substrate-node-template/blob/master/node/src/chain_spec.rs\"\n  }, \"Node Template's chain specification\"), \"\\nstored as rust code.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#structure-of-a-chain-specification","title":"Structure of a chain specification","items":[{"url":"#the-client-spec","title":"The client spec"},{"url":"#the-genesis-state","title":"The genesis state"}]},{"url":"#storing-chain-specification-information","title":"Storing chain specification information"},{"url":"#using-chain-specifications","title":"Using chain specifications","items":[{"url":"#launching-a-chain","title":"Launching a chain"},{"url":"#developing-a-runtime","title":"Developing a runtime"},{"url":"#customizing-a-chain-spec","title":"Customizing a chain spec"}]},{"url":"#raw-chain-specifications","title":"Raw chain specifications"},{"url":"#next-steps","title":"Next steps","items":[{"url":"#learn-more","title":"Learn more"},{"url":"#examples","title":"Examples"}]}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/docs/03-runtime/d-chain-specs/index.mdx"}},"pageContext":{"slug":"/v3/runtime/chain-specs","version":"3.0","locale":"en","hrefLang":"en-US","originalPath":"/v3/runtime/chain-specs/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
{
    "componentChunkName": "component---src-templates-kb-template-tsx",
    "path": "/v3/runtime/debugging/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/v3/runtime/debugging","title":"Debugging","hideNav":null,"section":"docs","category":"runtime"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Debugging\",\n  \"slug\": \"/v3/runtime/debugging\",\n  \"version\": 3,\n  \"section\": \"docs\",\n  \"category\": \"runtime\",\n  \"keywords\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Message = makeShortcode(\"Message\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Debugging is a necessity in all walks of software development, and blockchain is no exception. Most\\nof the same tools used for general purpose Rust debugging also apply to Substrate. \"), mdx(\"h2\", {\n    \"id\": \"logging-utilities\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#logging-utilities\",\n    \"aria-label\": \"logging utilities permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Logging utilities\"), mdx(\"p\", null, \"You can use Rust's logging API to debug your runtimes. This comes with a number of macros, including\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.rs/log/0.4.14/log/macro.debug.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"debug\")), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.rs/log/0.4.14/log/macro.info.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"info\")), \".\"), mdx(\"p\", null, \"For example, after updating your pallet's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cargo.toml\"), \" file with the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://crates.io/crates/log\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"log\"), \" crate\"), \"\\njust use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"log::info!\"), \" to log to your console:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"pub fn do_something(origin) -> DispatchResult {\\n\\n    let who = ensure_signed(origin)?;\\n    let my_val: u32 = 777;\\n\\n    Something::put(my_val);\\n\\n    log::info!(\\\"called by {:?}\\\", who);\\n\\n    Self::deposit_event(RawEvent::SomethingStored(my_val, who));\\n    Ok(())\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"printable-trait\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#printable-trait\",\n    \"aria-label\": \"printable trait permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Printable trait\"), mdx(\"p\", null, \"The Printable trait is meant to be a way to print from the runtime in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"no_std\"), \" and in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"std\"), \". The\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"print\"), \" function works with any type that implements the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sp_runtime/traits/trait.Printable.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Printable\"), \" trait\"), \".\\nSubstrate implements this trait for some types (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"u8\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"u32\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"u64\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"usize\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&[u8]\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&str\"), \") by\\ndefault. You can also implement it for your own custom types. Here is an example of implementing it\\nfor a pallet's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Error\"), \" type using the node-template as the example codebase.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"use sp_runtime::traits::Printable;\\nuse sp_runtime::print;\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[frame_support::pallet]\\npub mod pallet {\\n    // The pallet's errors\\n    #[pallet::error]\\n    pub enum Error<T> {\\n        /// Value was None\\n        NoneValue,\\n        /// Value reached maximum and cannot be incremented further\\n        StorageOverflow,\\n    }\\n\\n    impl<T: Config> Printable for Error<T> {\\n        fn print(&self) {\\n            match self {\\n                Error::NoneValue => \\\"Invalid Value\\\".print(),\\n                Error::StorageOverflow => \\\"Value Exceeded and Overflowed\\\".print(),\\n                _ => \\\"Invalid Error Case\\\".print(),\\n            }\\n        }\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"/// takes no parameters, attempts to increment storage value, and possibly throws an error\\npub fn cause_error(origin) -> dispatch::DispatchResult {\\n    // Check it was signed and get the signer. See also: ensure_root and ensure_none\\n    let _who = ensure_signed(origin)?;\\n\\n    print(\\\"My Test Message\\\");\\n\\n    match Something::get() {\\n        None => {\\n            print(Error::<T>::NoneValue);\\n            Err(Error::<T>::NoneValue)?\\n        }\\n        Some(old) => {\\n            let new = old.checked_add(1).ok_or(\\n                {\\n                    print(Error::<T>::StorageOverflow);\\n                    Error::<T>::StorageOverflow\\n                })?;\\n            Something::put(new);\\n            Ok(())\\n        },\\n    }\\n}\\n\")), mdx(\"p\", null, \"Run the node binary with the RUST_LOG environment variable to print the values.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"RUST_LOG=runtime=debug ./target/release/node-template --dev\\n\")), mdx(\"p\", null, \"The values are printed in the terminal or the standard output every time that the runtime function\\ngets called.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"2020-01-01 tokio-blocking-driver DEBUG runtime  My Test Message  <-- str implements Printable by default\\n2020-01-01 tokio-blocking-driver DEBUG runtime  Invalid Value    <-- the custom string from NoneValue\\n2020-01-01 tokio-blocking-driver DEBUG runtime  DispatchError\\n2020-01-01 tokio-blocking-driver DEBUG runtime  8\\n2020-01-01 tokio-blocking-driver DEBUG runtime  0                <-- index value from the Error enum definition\\n2020-01-01 tokio-blocking-driver DEBUG runtime  NoneValue        <-- str which holds the name of the ident of the error\\n\")), mdx(\"br\", null), mdx(Message, {\n    type: \"yellow\",\n    title: \"Important\",\n    text: \"Adding many print functions to the runtime will produce a bigger binary and wasm blob\\n  with debug code not needed in production.\",\n    mdxType: \"Message\"\n  }), mdx(\"h2\", {\n    \"id\": \"substrates-own-print-function\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#substrates-own-print-function\",\n    \"aria-label\": \"substrates own print function permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Substrate's own \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"print\"), \" function\"), mdx(\"p\", null, \"For legacy use cases, Substrate provides extra tools for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Print\"), \" debugging (or tracing). You can use\\nthe \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sp_runtime/fn.print.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"print\"), \" function\"), \" to log the\\nstatus of the runtime execution.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"use sp_runtime::print;\\n\\n// --snip--\\npub fn do_something(origin) -> DispatchResult {\\n    print(\\\"Execute do_something\\\");\\n\\n    let who = ensure_signed(origin)?;\\n    let my_val: u32 = 777;\\n\\n    Something::put(my_val);\\n\\n    print(\\\"After storing my_val\\\");\\n\\n    Self::deposit_event(RawEvent::SomethingStored(my_val, who));\\n    Ok(())\\n}\\n// --snip--\\n\")), mdx(\"p\", null, \"Start the chain using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RUST_LOG\"), \" environment variable to see the print logs.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"RUST_LOG=runtime=debug ./target/release/node-template --dev\\n\")), mdx(\"p\", null, \"The values are printed in the terminal or the standard output if the Error gets triggered.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"2020-01-01 00:00:00 tokio-blocking-driver DEBUG runtime  Execute do_something\\n2020-01-01 00:00:00 tokio-blocking-driver DEBUG runtime  After storing my_val\\n\")), mdx(\"h2\", {\n    \"id\": \"if-std\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#if-std\",\n    \"aria-label\": \"if std permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"If \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"std\")), mdx(\"p\", null, \"The legacy \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"print\"), \" function allows you to print and have an implementation of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Printable\"), \" trait.\\nHowever, in some legacy cases you may want to do more than print, or not bother with\\nSubstrate-specific traits just for debugging purposes. The\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sp_std/macro.if_std.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"if_std!\"), \" macro\"), \" is useful for this\\nsituation.\"), mdx(\"p\", null, \"One caveat of using this macro is that the code inside will only execute when you are actually\\nrunning the native version of the runtime.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"use sp_std::if_std; // Import into scope the if_std! macro.\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"println!\"), \" statement should be inside of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if_std\"), \" macro.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::call]\\nimpl<T: Config<I>, I: 'static> Pallet<T, I> {\\n        // --snip--\\n        pub fn do_something(origin) -> DispatchResult {\\n\\n            let who = ensure_signed(origin)?;\\n            let my_val: u32 = 777;\\n\\n            Something::put(my_val);\\n\\n            if_std! {\\n                // This code is only being compiled and executed when the `std` feature is enabled.\\n                println!(\\\"Hello native world!\\\");\\n                println!(\\\"My value is: {:#?}\\\", my_val);\\n                println!(\\\"The caller account is: {:#?}\\\", who);\\n            }\\n\\n            Self::deposit_event(RawEvent::SomethingStored(my_val, who));\\n            Ok(())\\n        }\\n        // --snip--\\n}\\n\")), mdx(\"p\", null, \"The values are printed in the terminal or the standard output every time that the runtime function\\ngets called.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$       2020-01-01 00:00:00 Substrate Node\\n        2020-01-01 00:00:00   version x.y.z-x86_64-linux-gnu\\n        2020-01-01 00:00:00   by Anonymous, 2017, 2020\\n        2020-01-01 00:00:00 Chain specification: Development\\n        2020-01-01 00:00:00 Node name: my-node-007\\n        2020-01-01 00:00:00 Roles: AUTHORITY\\n        2020-01-01 00:00:00 Imported 999 (0x3d7a\\u2026ab6e)\\n        # --snip--\\n->      Hello native world!\\n->      My value is: 777\\n->      The caller account is: d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d (5GrwvaEF...)\\n        # --snip--\\n        2020-01-01 00:00:00 Imported 1000 (0x3d7a\\u2026ab6e)\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#logging-utilities","title":"Logging utilities"},{"url":"#printable-trait","title":"Printable trait"},{"url":"#substrates-own-print-function","title":"Substrate's own print function"},{"url":"#if-std","title":"If std"}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/docs/03-runtime/j-debugging/index.mdx"}},"pageContext":{"slug":"/v3/runtime/debugging","version":"3.0","locale":"en","hrefLang":"en-US","originalPath":"/v3/runtime/debugging/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
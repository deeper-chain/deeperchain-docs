{
    "componentChunkName": "component---src-templates-kb-template-tsx",
    "path": "/v3/runtime/weights-and-fees/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/v3/runtime/weights-and-fees","title":"Weights and Fees","hideNav":null,"section":"docs","category":"runtime"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Weights and Fees\",\n  \"slug\": \"/v3/runtime/weights-and-fees\",\n  \"version\": 3,\n  \"section\": \"docs\",\n  \"category\": \"runtime\",\n  \"keywords\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Message = makeShortcode(\"Message\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Because the resources available to a blockchain are limited, it\\u2019s important to manage how blocks consume them.\\nThe resources that need to be managed include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Memory usage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Storage input and output\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Computation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Transaction and block size\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"State database size\")), mdx(\"p\", null, \"Substrate provides block authors with several ways to manage access to resources and to prevent individual components of the chain from consuming too much of any single resource.\\nTwo of the most important mechanisms available to block authors are \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"weights\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"transaction fees\"), \".\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/concepts/weight\"\n  }, \"Weights\"), \" are used to manage the time it takes to validate a block.\\nIn general, weights are used to characterize the time it takes to execute the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/concepts/extrinsics\"\n  }, \"extrinsic\"), \" calls in the body of a block.\\nBy controlling the execution time that a block can consume, weights set limits on storage input and output and computation.\"), mdx(Message, {\n    type: \"gray\",\n    title: \"Note\",\n    text: \"Weights are not used to restrict access to other resources, such as storage itself or memory footprint. Other mechanisms must be used for this.\",\n    mdxType: \"Message\"\n  }), mdx(\"p\", null, \"Some of the weight allowed for a block is consumed as part of the block's initialization and finalization.\\nThe weight might also be used to execute mandatory inherent extrinsic calls.\\nTo help ensure blocks don\\u2019t consume too much execution time\\u2014and prevent malicious users from overloading the system with unnecessary calls\\u2014weights are used in combination with transaction fees.\"), mdx(\"p\", null, \"Transaction fees are a key component of making the blockchain economically sustainable and are typically applied to transactions initiated by users and deducted before a transaction request is executed.\"), mdx(\"h2\", {\n    \"id\": \"how-fees-are-calculated\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#how-fees-are-calculated\",\n    \"aria-label\": \"how fees are calculated permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"How fees are calculated\"), mdx(\"p\", null, \"The final fee for a transaction is calculated using the following parameters:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"base fee\"), \": This is the minimum amount a user pays for a transaction. It is declared as a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"base weight\"), \" in the runtime and converted to a fee using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WeightToFee\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"weight fee\"), \": A fee proportional to the execution time (input and output and computation) that a transaction consumes.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"length fee\"), \": A fee proportional to the encoded length of the transaction.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"tip\"), \": An optional tip to increase the priority of the transaction, giving it a higher chance to be included by the transaction queue.\"))), mdx(\"p\", null, \"The base fee and proportional weight and length fees constitute the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"inclusion fee\"), \".\\nThe inclusion fee is the minimum fee that must be available for a transaction to be included in a block.\"), mdx(\"h2\", {\n    \"id\": \"using-the-transaction-payment-pallet\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#using-the-transaction-payment-pallet\",\n    \"aria-label\": \"using the transaction payment pallet permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Using the transaction payment pallet\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/pallet_transaction_payment/index.html\"\n  }, \"Transaction Payment pallet\"), \" provides the basic logic for calculating the inclusion fee.\"), mdx(\"p\", null, \"You can also use the Transaction Payment pallet to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Convert a weight value into a deductible fee based on a currency type using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Config::WeightToFee\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Update the fee for the next block by defining a multiplier, based on the final state of the chain at the end of the previous block using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Config::FeeMultiplierUpdate\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Manage the withdrawal, refund, and deposit of transaction fees using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Config::OnChargeTransaction\"), \".\"))), mdx(\"p\", null, \"You can learn more about these configuration traits in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/pallet_transaction_payment/index.html\"\n  }, \"Transaction Payment\"), \" documentation. \"), mdx(\"p\", null, \"You should note that transaction fees are withdrawn before the transaction is executed.\\nAfter the transaction is executed, the transaction weight can be adjusted to reflect the actual resources the transaction used.\\nIf a transaction uses fewer resources than expected, the transaction fee is corrected and the adjusted transaction fee is deposited.\"), mdx(\"h3\", {\n    \"id\": \"a-closer-look-at-the-inclusion-fee\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#a-closer-look-at-the-inclusion-fee\",\n    \"aria-label\": \"a closer look at the inclusion fee permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"A closer look at the inclusion fee\"), mdx(\"p\", null, \"The formula for calculating the final fee looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"inclusion_fee = base_fee + length_fee + [targeted_fee_adjustment * weight_fee];\\nfinal_fee = inclusion_fee + tip;\\n\")), mdx(\"p\", null, \"In this formula, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"targeted_fee_adjustment\"), \" is a multiplier that can tune the final fee based on the congestion of the network.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"base_fee\"), \" derived from the base weight covers inclusion overhead like signature verification.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"length_fee\"), \" is a per-byte fee that is multiplied by the length of the encoded extrinsic.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"weight_fee\"), \" fee is calculated using two parameters:\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \" The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ExtrinsicBaseWeight\"), \" that is declared in the runtime and applies to all extrinsics. \"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \" The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[pallet::weight]\"), \" annotation that accounts for an extrinsic's complexity.\"))), mdx(\"p\", null, \"To convert the weight to Currency, the runtime must define a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WeightToFee\"), \" struct that implements a conversion function, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Convert<Weight,Balance>\"), \". \"), mdx(\"p\", null, \"Note that the extrinsic sender is charged the inclusion\\nfee before the extrinsic is invoked. The fee is deducted from the sender's balance even if the transaction fails upon execution. \"), mdx(\"h3\", {\n    \"id\": \"accounts-with-an-insufficient-balance\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#accounts-with-an-insufficient-balance\",\n    \"aria-label\": \"accounts with an insufficient balance permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Accounts with an insufficient balance\"), mdx(\"p\", null, \"If an account does not have a sufficient balance to pay the inclusion fee and remain alive\\u2014that is, enough to pay the inclusion fee and maintain the minimum \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"existential deposit\"), \"\\u2014then you should ensure the transaction is cancelled so that no fee is deducted and the transaction does not begin execution.\"), mdx(\"p\", null, \"Substrate does not enforce this rollback behavior.\\nHowever, this scenario would be a rare occurrence because the transaction queue and block-making logic perform checks to prevent it before adding an extrinsic to a block.\"), mdx(\"h3\", {\n    \"id\": \"fee-multiplier\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#fee-multiplier\",\n    \"aria-label\": \"fee multiplier permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Fee multiplier\"), mdx(\"p\", null, \"The inclusion fee formula always results in the same fee for the same input.\\nHowever, weight can be dynamic and\\u2014based on how\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/pallet_transaction_payment/pallet/trait.Config.html#associatedtype.WeightToFee\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"WeightToFee\")), \"\\nis defined\\u2014the final fee can include some degree of variability. \"), mdx(\"p\", null, \"To account for this variability, the Transaction Payment pallet provides the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/pallet_transaction_payment/pallet/trait.Config.html#associatedtype.FeeMultiplierUpdate\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"FeeMultiplierUpdate\")), \" configurable parameter.\"), mdx(\"p\", null, \"The default update function is inspired by the Polkadot network and implements a targeted adjustment in which a target saturation level of block weight is defined.\\nIf the previous block is more saturated, then the fees are slightly increased.\\nSimilarly, if the previous block has fewer transactions than the target, fees are decreased by a small amount.\\nFor more information about fee multiplier adjustments, see the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://w3f-research.readthedocs.io/en/latest/polkadot/overview/2-token-economics.html#relay-chain-transaction-fees-and-per-block-transaction-limits\"\n  }, \"Web3 research page\"), \".\"), mdx(\"h2\", {\n    \"id\": \"transactions-with-special-requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#transactions-with-special-requirements\",\n    \"aria-label\": \"transactions with special requirements permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Transactions with special requirements\"), mdx(\"p\", null, \"Inclusion fees must be computable prior to execution, and therefore can only represent fixed logic.\\nSome transactions warrant limiting resources with other strategies.\\nFor example:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Bonds are a type of fee that might be returned or slashed after some on-chain event.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For example, you might want to require users to place a bond to participate in a vote. The bond might then be returned at the end of the referendum or slashed if the voter attempted malicious behavior.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Deposits are fees that might be returned later.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For example, you might require users to pay a deposit to execute an operation that uses storage. If a subsequent operation frees up storage, the user's deposit could be returned.\"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Burn operations are used to pay for a transaction based on its internal logic. \"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For example, a transaction might burn funds from the sender if the transaction creates new storage items to pay for the increased the state size.\"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Limits enable you to enforce constant or configurable limits on certain operations. \"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For example, the default Staking pallet only allows nominators to nominate 16 validators to limit the complexity of the validator election process.\"))), mdx(\"p\", null, \"It is important to note that if you query the chain for a transaction fee, it only returns the inclusion fee.\"), mdx(\"h2\", {\n    \"id\": \"default-weight-annotations\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#default-weight-annotations\",\n    \"aria-label\": \"default weight annotations permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Default weight annotations\"), mdx(\"p\", null, \"All dispatchable functions in Substrate must specify a weight. The way of doing that is using the\\nannotation-based system that lets you combine fixed values for database read/write weight and/or\\nfixed values based on benchmarks. The most basic example would look like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::weight(100_000)]\\nfn my_dispatchable() {\\n    // ...\\n}\\n\")), mdx(\"p\", null, \"Please note that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ExtrinsicBaseWeight\"), \" is automatically added to the declared weight in order to\\naccount for the costs of simply including an empty extrinsic into a block.\"), mdx(\"h3\", {\n    \"id\": \"parameterizing-over-database-accesses\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#parameterizing-over-database-accesses\",\n    \"aria-label\": \"parameterizing over database accesses permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Parameterizing over database accesses\"), mdx(\"p\", null, \"In order to make weight annotations independent of the deployed database backend, they are defined\\nas a constant and then used in the annotations when expressing database accesses performed by the\\ndispatchable:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::weight(T::DbWeight::get().reads_writes(1, 2) + 20_000)]\\nfn my_dispatchable() {\\n    // ...\\n}\\n\")), mdx(\"p\", null, \"This dispatchable does one database read and two database writes in addition to other things that\\nadd the additional 20,000. A database access is generally every time a value that is declared inside\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[pallet::storage]\"), \" block is accessed. However, only unique accesses are counted because once a\\nvalue is accessed it is cached and accessing it again does not result in a database operation. That\\nis:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Multiple reads of the same value count as one read.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Multiple writes of the same value count as one write.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Multiple reads of the same value, followed by a write to that value, count as one read and one\\nwrite.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A write followed by a read only counts as one write.\")), mdx(\"h3\", {\n    \"id\": \"dispatch-classes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#dispatch-classes\",\n    \"aria-label\": \"dispatch classes permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Dispatch classes\"), mdx(\"p\", null, \"Dispatches are broken into three classes: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Normal\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Operational\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Mandatory\"), \". When not defined\\notherwise in the weight annotation, a dispatch is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Normal\"), \". The developer can specify that the\\ndispatchable uses another class like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::weight(100_000, DispatchClass::Operational)]\\nfn my_dispatchable() {\\n    // ...\\n}\\n\")), mdx(\"p\", null, \"This tuple notation also allows specifying a final argument that determines whether or not the user\\nis charged based on the annotated weight. When not defined otherwise, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Pays::Yes\"), \" is assumed:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::weight(100_000, DispatchClass::Normal, Pays::No)]\\nfn my_dispatchable() {\\n    // ...\\n}\\n\")), mdx(\"h4\", null, \"Normal dispatches\"), mdx(\"p\", null, \"Dispatches in this class represent normal user-triggered transactions. These types of dispatches may\\nonly consume a portion of a block's total weight limit; this portion can be found by examining the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_system/limits/struct.BlockLength.html#method.max_with_normal_ratio\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"AvailableBlockRatio\")), \".\\nNormal dispatches are sent to the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/concepts/tx-pool\"\n  }, \"transaction pool\"), \".\"), mdx(\"h4\", null, \"Operational dispatches\"), mdx(\"p\", null, \"As opposed to normal dispatches, which represent \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"usage\"), \" of network capabilities, operational\\ndispatches are those that \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"provide\"), \" network capabilities. These types of dispatches may consume the\\nentire weight limit of a block, which is to say that they are not bound by the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_system/limits/struct.BlockLength.html#method.max_with_normal_ratio\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"AvailableBlockRatio\")), \".\\nDispatches in this class are given maximum priority and are exempt from paying the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"length_fee\"), \".\"), mdx(\"h4\", null, \"Mandatory dispatches\"), mdx(\"p\", null, \"Mandatory dispatches will be included in a block even if they cause the block to surpass its weight\\nlimit. This dispatch class may only be applied to\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/concepts/extrinsics#inherents\"\n  }, \"inherents\"), \" and is intended to represent functions that are\\npart of the block validation process. Since these kinds of dispatches are always included in a block\\nregardless of the function weight, it is critical that the function's validation process prevents\\nmalicious validators from abusing the function in order to craft blocks that are valid but\\nimpossibly heavy. This can typically be accomplished by ensuring that the operation is always very\\nlight and can only be included in a block once. In order to make it more difficult for malicious\\nvalidators to abuse these types of dispatches, they may not be included in blocks that return\\nerrors. This dispatch class exists to serve the assumption that it is better to allow an overweight\\nblock to be created than to not allow any block to be created at all.\"), mdx(\"h3\", {\n    \"id\": \"dynamic-weights\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#dynamic-weights\",\n    \"aria-label\": \"dynamic weights permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Dynamic weights\"), mdx(\"p\", null, \"In addition to purely fixed weights and constants, the weight calculation can consider the input\\narguments of a dispatchable. The weight should be trivially computable from the input arguments with\\nsome basic arithmetic:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::weight(FunctionOf(\\n  |args: (&Vec<User>,)| args.0.len().saturating_mul(10_000),\\n  DispatchClass::Normal,\\n  Pays::Yes,\\n))]\\nfn handle_users(origin, calls: Vec<User>) {\\n    // Do something per user\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"post-dispatch-weight-correction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#post-dispatch-weight-correction\",\n    \"aria-label\": \"post dispatch weight correction permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Post dispatch weight correction\"), mdx(\"p\", null, \"Depending on the execution logic, a dispatchable may consume less weight than was prescribed\\npre-dispatch. Why this is useful is explained in the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/concepts/weight#post-dispatch-weight-correction\"\n  }, \"weights article\"), \". In order to correct\\nweight, the dispatchable declares a different return type and then returns its actual weight:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::weight(10_000 + 500_000_000)]\\nfn expensive_or_cheap(input: u64) -> DispatchResultWithPostInfo {\\n    let was_heavy = do_calculation(input);\\n\\n    if (was_heavy) {\\n        // None means \\\"no correction\\\" from the weight annotation.\\n        Ok(None.into())\\n    } else {\\n        // Return the actual weight consumed.\\n        Ok(Some(10_000).into())\\n    }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"custom-fees\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#custom-fees\",\n    \"aria-label\": \"custom fees permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Custom fees\"), mdx(\"p\", null, \"You can also define custom fee systems through custom weight functions or inclusion fee functions.\"), mdx(\"h3\", {\n    \"id\": \"custom-weights\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#custom-weights\",\n    \"aria-label\": \"custom weights permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Custom weights\"), mdx(\"p\", null, \"Instead of using the default weight annotations described above, one can create a custom weight\\ncalculation type. This type must implement the follow traits:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"WeighData<T>\"), \"]\", \": To determine the weight of the dispatch.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ClassifyDispatch<T>\"), \"]\", \": To determine the class of the dispatch.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PaysFee<T>\"), \"]\", \": To determine whether the dispatchable's sender pays fees.\")), mdx(\"p\", null, \"Substrate then bundles the output information of the two traits into the \", \"[\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DispatchInfo\"), \"]\", \" struct and\\nprovides it by implementing the \", \"[\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GetDispatchInfo\"), \"]\", \" for all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Call\"), \" variants and opaque extrinsic\\ntypes. This is used internally by the System and Executive modules; you probably won't use it.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClassifyDispatch\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WeighData\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PaysFee\"), \" are generic over \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T\"), \", which gets resolved into the\\ntuple of all dispatch arguments except for the origin. To demonstrate, we will craft a struct that\\ncalculates the weight as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"m * len(args)\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"m\"), \" is a given multiplier and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"args\"), \" is the\\nconcatenated tuple of all dispatch arguments. Further, the dispatch class is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Operational\"), \" if the\\ntransaction has more than 100 bytes of length in arguments and will pay fees if the encoded length\\nis greater than 10 bytes.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"struct LenWeight(u32);\\nimpl<T> WeighData<T> for LenWeight {\\n    fn weigh_data(&self, target: T) -> Weight {\\n        let multiplier = self.0;\\n        let encoded_len = target.encode().len() as u32;\\n        multiplier * encoded_len\\n    }\\n}\\n\\nimpl<T> ClassifyDispatch<T> for LenWeight {\\n    fn classify_dispatch(&self, target: T) -> DispatchClass {\\n        let encoded_len = target.encode().len() as u32;\\n        if encoded_len > 100 {\\n            DispatchClass::Operational\\n        } else {\\n            DispatchClass::Normal\\n        }\\n    }\\n}\\n\\nimpl<T> PaysFee<T> {\\n    fn pays_fee(&self, target: T) -> Pays {\\n        let encoded_len = target.encode().len() as u32;\\n        if encoded_len > 10 {\\n            Pays::Yes\\n        } else {\\n            Pays::No\\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, \"A weight calculator function can also be coerced to the final type of the argument, instead of\\ndefining it as a vague type that is encodable. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pallet-example\"), \" contains an example of how to do\\nthis. Just note that, in that case, your code would roughly look like:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"struct CustomWeight;\\nimpl WeighData<(&u32, &u64)> for CustomWeight {\\n    fn weigh_data(&self, target: (&u32, &u64)) -> Weight {\\n        ...\\n    }\\n}\\n\\n// given a dispatch:\\n#[pallet::call]\\nimpl<T: Config<I>, I: 'static> Pallet<T, I> {\\n    #[pallet::weight(CustomWeight)]\\n    fn foo(a: u32, b: u64) { ... }\\n}\\n\")), mdx(\"p\", null, \"This means that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomWeight\"), \" can only be used in conjunction with a dispatch with a particular\\nsignature \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(u32, u64)\"), \", as opposed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LenWeight\"), \", which can be used with anything because they\\ndon't make any strict assumptions about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<T>\"), \".\"), mdx(\"h3\", {\n    \"id\": \"custom-inclusion-fee\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#custom-inclusion-fee\",\n    \"aria-label\": \"custom inclusion fee permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Custom inclusion fee\"), mdx(\"p\", null, \"This is an example of how to customize your inclusion fee. You must configure the appropriate\\nassociated types in the respective module.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"// Assume this is the balance type\\ntype Balance = u64;\\n\\n// Assume we want all the weights to have a `100 + 2 * w` conversion to fees\\nstruct CustomWeightToFee;\\nimpl Convert<Weight, Balance> for CustomWeightToFee {\\n    fn convert(w: Weight) -> Balance {\\n        let a = Balance::from(100);\\n        let b = Balance::from(2);\\n        let w = Balance::from(w);\\n        a + b * w\\n    }\\n}\\n\\nparameter_types! {\\n    pub const ExtrinsicBaseWeight: Weight = 10_000_000;\\n}\\n\\nimpl frame_system::Config for Runtime {\\n    type ExtrinsicBaseWeight = ExtrinsicBaseWeight;\\n}\\n\\nparameter_types! {\\n    pub const TransactionByteFee: Balance = 10;\\n}\\n\\nimpl transaction_payment::Config {\\n    type TransactionByteFee = TransactionByteFee;\\n    type WeightToFee = CustomWeightToFee;\\n    type FeeMultiplierUpdate = TargetedFeeAdjustment<TargetBlockFullness>;\\n}\\n\\nstruct TargetedFeeAdjustment<T>(sp_std::marker::PhantomData<T>);\\nimpl<T: Get<Perquintill>> Convert<Fixed128, Fixed128> for TargetedFeeAdjustment<T> {\\n    fn convert(multiplier: Fixed128) -> Fixed128 {\\n        // Don't change anything. Put any fee update info here.\\n        multiplier\\n    }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"next-steps\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#next-steps\",\n    \"aria-label\": \"next steps permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Next steps\"), mdx(\"p\", null, \"The entire logic of fees is encapsulated in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pallet-transaction-payment\"), \" via a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/concepts/tx-pool#signed-extension\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"SignedExtension\")), \".\\nWhile this pallet provides a high degree of flexibility, a user can opt to build their custom\\npayment module drawing inspiration from Transaction Payment.\"), mdx(\"p\", null, \"Given now you know what Substrate's weight system is, how it affects transaction fee computation, and how to specify\\nthem for your dispatchables, the last question is how to find the right weights for your dispatchables.\\nThat is what \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Substrate benchmarking\"), \" is for. By writing benchmarking functions and running them, the system\\n(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frame-benchmarking\"), \") calls these functions repeatedly with different numerical parameters and empirically determine\\nthe weight functions for dispatchables in their worst case scenarios, within a certain limit. For more information, see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/benchmarking\"\n  }, \"Benchmarking\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dedicated \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/v3/concepts/weight\"\n  }, \"weight documentation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/paritytech/substrate/blob/master/frame/example/src/lib.rs\"\n  }, \"Example pallet\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/sp_runtime/traits/trait.SignedExtension.html\"\n  }, \"SignedExtension\"))), mdx(\"h3\", {\n    \"id\": \"examples\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#examples\",\n    \"aria-label\": \"examples permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Examples\"), mdx(\"p\", null, \"You can find examples of custom weights and fees in the following repositories:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/paritytech/substrate/blob/master/frame/example/src/weights.rs\"\n  }, \"Custom weights for the Example pallet\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/how-to-guides/v3/weights/calculate-fees\"\n  }, \"Custom WeightToFee how-to guide\"))), mdx(\"h3\", {\n    \"id\": \"references\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#references\",\n    \"aria-label\": \"references permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://w3f-research.readthedocs.io/en/latest/polkadot/overview/2-token-economics.html#relay-chain-transaction-fees-and-per-block-transaction-limits\"\n  }, \"Web3 Foundation Research\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#how-fees-are-calculated","title":"How fees are calculated"},{"url":"#using-the-transaction-payment-pallet","title":"Using the transaction payment pallet","items":[{"url":"#a-closer-look-at-the-inclusion-fee","title":"A closer look at the inclusion fee"},{"url":"#accounts-with-an-insufficient-balance","title":"Accounts with an insufficient balance"},{"url":"#fee-multiplier","title":"Fee multiplier"}]},{"url":"#transactions-with-special-requirements","title":"Transactions with special requirements"},{"url":"#default-weight-annotations","title":"Default weight annotations","items":[{"url":"#parameterizing-over-database-accesses","title":"Parameterizing over database accesses"},{"url":"#dispatch-classes","title":"Dispatch classes"},{"url":"#dynamic-weights","title":"Dynamic weights"}]},{"url":"#post-dispatch-weight-correction","title":"Post dispatch weight correction"},{"url":"#custom-fees","title":"Custom fees","items":[{"url":"#custom-weights","title":"Custom weights"},{"url":"#custom-inclusion-fee","title":"Custom inclusion fee"}]},{"url":"#next-steps","title":"Next steps","items":[{"url":"#examples","title":"Examples"},{"url":"#references","title":"References"}]}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/docs/03-runtime/h-weights-and-fees/index.mdx"}},"pageContext":{"slug":"/v3/runtime/weights-and-fees","version":"3.0","locale":"en","hrefLang":"en-US","originalPath":"/v3/runtime/weights-and-fees/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
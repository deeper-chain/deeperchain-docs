{
    "componentChunkName": "component---src-templates-kb-template-tsx",
    "path": "/v3/runtime/metadata/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/v3/runtime/metadata","title":"Metadata","hideNav":null,"section":"docs","category":"runtime"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Metadata\",\n  \"slug\": \"/v3/runtime/metadata\",\n  \"version\": 3,\n  \"section\": \"docs\",\n  \"category\": \"runtime\",\n  \"keywords\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Message = makeShortcode(\"Message\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Blockchains that are built on Substrate expose metadata in order to make it easier to interact with\\nthem. This metadata is separated by the different \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/frame#pallets\"\n  }, \"pallets\"), \" that inform your blockchain.\\nFor each pallet, the metadata provides information about the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/storage\"\n  }, \"storage items\"), \",\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/concepts/extrinsics\"\n  }, \"extrinsic calls\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/events-and-errors\"\n  }, \"events\"), \", constants, and errors that are\\nexposed by that pallet. Substrate automatically generates this metadata for you and makes it\\navailable through RPC calls.\"), mdx(\"p\", null, \"Since the runtime of a Substrate blockchain is an evolving part of the blockchain's state,\\nblockchain metadata is stored on a per-block basis. Be aware that querying the metadata for an older\\nblock (with an archive node, for example) could result in acquiring out-of-date metadata that is not\\ncompatible with a blockchain's current state. As described in the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/upgrades\"\n  }, \"Upgrades documentation\"), \", developers building on top of Substrate chains can\\nexpect that the metadata for a chain should \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"only\"), \" change when the chain's\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sp_version/struct.RuntimeVersion.html#structfield.spec_version\"\n  }, \"runtime \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"spec_version\")), \"\\nchanges.\"), mdx(\"p\", null, \"All examples in this document were taken from block 1,768,321 on Kusama. You can look at the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gist.github.com/insipx/db5e49c0160b1f1bd421a3c34fefdf48\"\n  }, \"full metadata\"), \" before reading the\\nrest of this document and continue to refer to it as you proceed.\"), mdx(\"h2\", {\n    \"id\": \"how-to-get-the-metadata\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#how-to-get-the-metadata\",\n    \"aria-label\": \"how to get the metadata permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"How to get the metadata\"), mdx(\"p\", null, \"There are a number of language-specific libraries that you can use to fetch metadata from a\\nSubstrate node, as well as language-agnostic HTTP and WebSocket APIs.\"), mdx(\"h3\", {\n    \"id\": \"rust\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#rust\",\n    \"aria-label\": \"rust permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Rust\"), mdx(\"p\", null, \"The easiest way to get the metadata is by querying the automatically-generated JSON-RPC function\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state_getMetadata\"), \". This will return a vector of SCALE-encoded bytes. You can decode this using the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_metadata/index.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"frame-metadata\")), \" and\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/parity_scale_codec/index.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"parity-scale-codec\")), \" libraries.\"), mdx(\"p\", null, \"Some helpful libraries like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/substrate-subxt\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"substrate-subxt\")), \" fetch\\nthe metadata and decode them for you. Once decoded, the structure may be serialized into JSON with\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://serde.rs/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"serde\")), \". If you'd prefer to use the RPC more directly, the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/jsonrpc\"\n  }, \"JSONRPC\"), \" and\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/jsonrpsee\"\n  }, \"jsonrpsee\"), \" Rust libraries provide interfaces to do so.\"), mdx(\"h3\", {\n    \"id\": \"javascript\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#javascript\",\n    \"aria-label\": \"javascript permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"JavaScript\"), mdx(\"p\", null, \"If you are using JavaScript, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://polkadot.js.org/api/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"polkadot-js/api\")), \" already provides APIs\\nto interact with a Substrate blockchain, including the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://polkadot.js.org/docs/substrate/rpc#getmetadataat-blockhash-metadata\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"getMetadata\")), \" function.\"), mdx(\"p\", null, \"You can try the following code snippets to fetch the metadata in this\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://polkadot.js.org/apps/#/js\"\n  }, \"Polkadot-JS App - JavaScript page\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const metadata = await api.rpc.state.getMetadata()\\nconsole.log('version: ' + metadata.version)\\nconsole.log('Magic number: ' + metadata.magicNumber)\\nconsole.log('Metadata: ' + JSON.stringify(metadata.asLatest.toHuman(), null, 2))\\n\")), mdx(\"h3\", {\n    \"id\": \"http--websocket-apis\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#http--websocket-apis\",\n    \"aria-label\": \"http  websocket apis permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"HTTP & websocket APIs\"), mdx(\"p\", null, \"Substrate nodes expose \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sc_rpc/index.html\"\n  }, \"a JSON-RPC API\"), \" that you can\\naccess by way of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HTTP\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WebSocket\"), \" requests. The message to\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sc_rpc/state/struct.StateClient.html#method.metadata\"\n  }, \"request metadata\"), \"\\nfrom a node looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"id\\\": 1,\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"method\\\": \\\"state_getMetadata\\\",\\n  \\\"params\\\": []\\n}\\n\")), mdx(\"p\", null, \"You can leave \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"params\"), \" empty, or if you want to fetch the metadata for a specific block, provide the\\nblock's hash:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"id\\\": 1,\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"method\\\": \\\"state_getMetadata\\\",\\n  \\\"params\\\": [\\n    \\\"0xca15c2f1e1540517697b6b5f2cc6bc0c60876a1a1af604269b7215970798bbed\\\"\\n  ]\\n}\\n\")), mdx(\"p\", null, \"In the example above, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0xca15c2f1e1540517697b6b5f2cc6bc0c60876a1a1af604269b7215970798bbed\"), \" is the\\nhash of block 1,768,321.\"), mdx(\"p\", null, \"The response has the following format:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"result\\\": \\\"0x6d6574610b7c1853797374656d011853797374656d3c1c4163636f756e7401010230543a3a4163636f756e744964944163...\\\",\\n  \\\"id\\\": 1\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"result\"), \" field contains the blockchain metadata as a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/advanced/scale-codec\"\n  }, \"SCALE-encoded\"), \"\\nhexadecimal string. The example above represents the actual value that is returned for block\\n1,768,321; you can check for yourself by using a WebSocket client to query a node. Continue reading\\nto learn more about the format of this encoded blob as well as\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gist.githubusercontent.com/insipx/db5e49c0160b1f1bd421a3c34fefdf48/raw/2c33ff080bec84f0627610124c732deb30a0adc7/meta_block_1768321.json\"\n  }, \"its decoded format\"), \".\"), mdx(\"h2\", {\n    \"id\": \"metadata-formats\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#metadata-formats\",\n    \"aria-label\": \"metadata formats permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Metadata formats\"), mdx(\"p\", null, \"This section will briefly review the SCALE-encoded metadata that is represented as a hexadecimal\\nstring before taking a more detailed look at the metadata's decoded format.\"), mdx(\"h3\", {\n    \"id\": \"encoded-metadata-format\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#encoded-metadata-format\",\n    \"aria-label\": \"encoded metadata format permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Encoded metadata format\"), mdx(\"p\", null, \"The hex blob that is returned by the JSON-RPCs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state_getMetadata\"), \" method starts with a hard-coded\\nmagic number, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x6d657461\"), \", which represents \\\"meta\\\" in plain text. The next piece of data (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x0b\"), \" in\\nthe example above) represents the metadata version; decoding the hexadecimal value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x0b\"), \" yields the\\ndecimal value 11, which is\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_metadata/enum.RuntimeMetadata.html\"\n  }, \"the version of the Substrate metadata format\"), \"\\nthat the result encodes. After the metadata version, the next piece of information encoded in the\\nresult field is the number of pallets that inform the blockchain's runtime; in the example above,\\nthe hexadecimal value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x7c\"), \" represents the decimal number 31, which is SCALE-encoded by taking its\\nbinary representation (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"11111\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x1F\"), \" in hex), shifting it two bits to the left (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1111100\"), \") and\\nencoding that as hex.\"), mdx(\"p\", null, \"The remaining blob encodes\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_metadata/struct.ModuleMetadata.html\"\n  }, \"the metadata of each pallet\"), \",\\nwhich will be reviewed below as well as some\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_metadata/struct.ExtrinsicMetadata.html\"\n  }, \"extrinsic metadata\"), \", which\\nis mostly out of the scope of this document.\"), mdx(\"h3\", {\n    \"id\": \"decoded-metadata-format\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#decoded-metadata-format\",\n    \"aria-label\": \"decoded metadata format permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Decoded metadata format\"), mdx(\"p\", null, \"Here is a condensed version of decoded metadata:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"magicNumber\\\": 1635018093,\\n  \\\"metadata\\\": {\\n    \\\"V12\\\": {\\n      \\\"modules\\\": [\\n        {\\n          // ...\\n        },\\n        {\\n          // ...\\n        }\\n      ],\\n      \\\"extrinsic\\\": {\\n        \\\"version\\\": 4,\\n        \\\"signedExtensions\\\": [\\n          \\\"CheckSpecVersion\\\",\\n          \\\"CheckTxVersion\\\",\\n          \\\"CheckGenesis\\\",\\n          \\\"CheckMortality\\\",\\n          \\\"CheckNonce\\\",\\n          \\\"CheckWeight\\\",\\n          \\\"ChargeTransactionPayment\\\"\\n        ]\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"As described above, the integer \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1635018093\"), \" is a \\\"magic number\\\" that represents \\\"meta\\\" in plain\\ntext. The rest of the metadata has two sections: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"modules\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"extrinsic\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"modules\"), \" section\\ncontains information about the runtime's pallets, while the extrinsic section describes the version\\nof extrinsics that the runtime is using. Different extrinsic versions may have different formats,\\nespecially when considering \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/concepts/extrinsics\"\n  }, \"signed extrinsics\"), \".\"), mdx(\"h4\", null, \"Modules\"), mdx(\"p\", null, \"Here is a condensed example of a single element in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"modules\"), \" array:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"name\\\": \\\"System\\\",\\n  \\\"storage\\\": {\\n    // ..\\n  },\\n  \\\"calls\\\": [\\n    // ..\\n  ],\\n  \\\"events\\\": [\\n    // ..\\n  ],\\n  \\\"constants\\\": [\\n    // ..\\n  ],\\n  \\\"errors\\\": [\\n    // ..\\n  ],\\n  \\\"index\\\": 0\\n}\\n\")), mdx(\"p\", null, \"Every element contains the name of the pallet that it represents, as well as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"storage\"), \" object,\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"calls\"), \" array, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"events\"), \" array, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"errors\"), \" array.\"), mdx(Message, {\n    type: \"gray\",\n    title: \"Note\",\n    text: \"If `calls` or `events` are empty, they will be represented as `null`; if `constants` or\\n `errors` are empty, they will be represented as an empty array.\",\n    mdxType: \"Message\"\n  }), mdx(\"h5\", null, \"Storage\"), mdx(\"p\", null, \"Here is a condensed example of a single element in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"modules\"), \" array that highlights metadata\\nabout the module's storage:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"name\\\": \\\"System\\\",\\n  \\\"storage\\\": {\\n    \\\"prefix\\\": \\\"System\\\",\\n    \\\"items\\\": [\\n      {\\n        \\\"name\\\": \\\"Account\\\",\\n        \\\"modifier\\\": \\\"Default\\\",\\n        \\\"type\\\": {\\n          \\\"Map\\\": {\\n            \\\"hasher\\\": \\\"Blake2_128Concat\\\",\\n            \\\"key\\\": \\\"AccountId\\\",\\n            \\\"value\\\": \\\"AccountInfo\\\",\\n            \\\"linked\\\": false\\n          }\\n        },\\n        \\\"fallback\\\": \\\"0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\\n        \\\"documentation\\\": [\\n          \\\" The full account information for a particular account ID.\\\"\\n        ]\\n      },\\n      {\\n        \\\"name\\\": \\\"ExtrinsicCount\\\"\\n        // ..\\n      },\\n      {\\n        \\\"name\\\": \\\"AllExtrinsicsLen\\\"\\n        // ..\\n      }\\n    ]\\n  },\\n  \\\"calls\\\": [\\n    /*...*/\\n  ],\\n  \\\"events\\\": [\\n    /*...*/\\n  ],\\n  \\\"constants\\\": [\\n    /*...*/\\n  ],\\n  \\\"errors\\\": [\\n    /*...*/\\n  ],\\n  \\\"index\\\": 0\\n}\\n\")), mdx(\"p\", null, \"Every storage item that is defined in a pallet will have a corresponding metadata entry.\\nMetadata entries like these are generated from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/v3/runtime/macros\"\n  }, \"macros\"), \" using associated types from the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_system/pallet/trait.Config.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"frame-system\")), \" crate. For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::config]\\npub trait Config: frame_system::Config {\\n    #[pallet::constant]\\n    type Foo: Get<u32>;\\n}\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_metadata/struct.StorageMetadata.html\"\n  }, \"Storage metadata\"), \" provides blockchain clients with the information that is required to query\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sc_rpc/state/struct.StateClient.html#method.storage\"\n  }, \"the JSON-RPC's storage function\"), \"\\nto get information for a specific storage item.\"), mdx(\"h5\", null, \"Dispatchable calls\"), mdx(\"p\", null, \"Metadata for dispatchable calls includes information about the runtime calls are defined by the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[pallet]\"), \" macro. For each call, the metadata includes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"name\"), \": Name of the function in the pallet.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"args\"), \": Arguments in function definition. Includes the name and type of each argument.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"documentation\"), \": Documentation of the function.\")), mdx(\"p\", null, \"For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::call]\\nimpl<T: Config> Pallet<T> {\\n\\n  /// This function does some thing.\\n  ///\\n  /// All documentation details go here.\\n  pub(super) fn do_something(\\n    origin: OriginFor<T>,\\n    #[pallet::compact] thing: T::Something\\n  ) -> DispatchResultWithPostInfo {\\n    // ... snip\\n  }\\n}\\n\")), mdx(\"p\", null, \"This materializes in the metadata as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"calls\\\": [\\n  {\\n    \\\"name\\\": \\\"do_something\\\",\\n    \\\"args\\\": [\\n      {\\n        \\\"name\\\": \\\"thing\\\",\\n        \\\"ty\\\": \\\"Compact<T::Something>\\\"\\n      }\\n    ],\\n    \\\"documentation\\\": [\\n      \\\" This function does some thing.\\\",\\n      \\\"\\\",\\n      \\\" All documentation details go here.\\\"\\n    ]\\n  }\\n],\\n\")), mdx(\"h5\", null, \"Events\"), mdx(\"p\", null, \"This metadata snippet is generated from this declaration in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frame-system\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::event]\\n#[pallet::metadata(T::AccountId = \\\"AccountId\\\")]\\npub enum Event<T: Config> {\\n  /// An extrinsic completed successfully.\\n  ExtrinsicSuccess(DispatchInfo, T::AccountId),\\n  /// An extrinsic failed.\\n  ExtrinsicFailed(DispatchError, DispatchInfo),\\n  // ... snip\\n}\\n\\n\")), mdx(\"p\", null, \"Substrate's metadata would describe these events as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"events\\\": [\\n  {\\n    \\\"name\\\": \\\"ExtrinsicSuccess\\\",\\n    \\\"args\\\": [\\n      \\\"DispatchInfo\\\",\\n      \\\"AccountId\\\"\\n    ],\\n    \\\"documentation\\\": [\\n      \\\" An extrinsic completed successfully.\\\"\\n    ]\\n  },\\n  {\\n    \\\"name\\\": \\\"ExtrinsicFailed\\\",\\n    \\\"args\\\": [\\n      \\\"DispatchError\\\",\\n      \\\"DispatchInfo\\\"\\n    ],\\n    \\\"documentation\\\": [\\n      \\\" An extrinsic failed.\\\"\\n    ]\\n  },\\n],\\n\")), mdx(\"h5\", null, \"Constants\"), mdx(\"p\", null, \"The metadata will include any module constants. For example in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/substrate/blob/master/frame/babe/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"pallet-babe\")), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::config]\\n    #[pallet::disable_frame_system_supertrait_check]\\n    pub trait Config: pallet_timestamp::Config {\\n        /// The amount of time, in slots, that each epoch should last.\\n        /// NOTE: Currently it is not possible to change the epoch duration after\\n        /// the chain has started. Attempting to do so will brick block production.\\n        #[pallet::constant]\\n        type EpochDuration: Get<u64>;\\n\")), mdx(\"p\", null, \"The metadata for this constant looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"constants\\\": [\\n  {\\n    \\\"name\\\": \\\"EpochDuration\\\",\\n    \\\"type\\\": \\\"u64\\\",\\n    \\\"value\\\": \\\"0x6009000000000000\\\",\\n    \\\"documentation\\\": [\\n      \\\" The amount of time, in slots, that each epoch should last.\\\",\\n      \\\" NOTE: Currently it is not possible to change the epoch duration after\\\",\\n      \\\"the chain has started. Attempting to do so will brick block production.\\\"\\n    ]\\n  },\\n]\\n\")), mdx(\"p\", null, \"The metadata also includes constants defined in the runtime's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lib.rs\"), \". For example, from Kusama:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"parameter_types! {\\n    pub const EpochDuration: u64 = EPOCH_DURATION_IN_BLOCKS as u64;\\n}\\n\")), mdx(\"p\", null, \"Where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EPOCH_DURATION_IN_BLOCKS\"), \" is a constant defined in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"runtime/src/constants.rs\"), \".\"), mdx(\"h5\", null, \"Errors\"), mdx(\"p\", null, \"Metadata will pull all the possible runtime errors from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[pallet::error]\"), \". For example, from\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frame-system\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[pallet::error]\\npub enum Error<T> {\\n        /// The name of specification does not match between the current runtime\\n        /// and the new runtime.\\n        InvalidSpecName,\\n        // ... snip\\n    }\\n\")), mdx(\"p\", null, \"This will expose the following metadata:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"errors\\\": [\\n  {\\n    \\\"name\\\": \\\"InvalidSpecName\\\",\\n    \\\"documentation\\\": [\\n      \\\" The name of specification does not match between the current runtime\\\",\\n      \\\" and the new runtime.\\\"\\n    ]\\n  },\\n  // ...\\n]\\n\")), mdx(\"p\", null, \"These are errors that could occur during the submission or execution of an extrinsic. In this case,\\nthe FRAME System pallet is declaring that it may raise the\\nthe \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_system/pallet/enum.Error.html#variant.InvalidSpecName\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"InvalidSpecName\"), \" error\"), \".\"), mdx(\"h2\", {\n    \"id\": \"next-steps\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#next-steps\",\n    \"aria-label\": \"next steps permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Next steps\"), mdx(\"h3\", {\n    \"id\": \"learn-more\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#learn-more\",\n    \"aria-label\": \"learn more permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Learn more\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/v3/runtime/storage\"\n  }, \"Storage\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/v3/advanced/scale-codec\"\n  }, \"SCALE\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/v3/runtime/macros\"\n  }, \"Macros\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/v3/runtime/events-and-errors\"\n  }, \"Events\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/v3/concepts/extrinsics\"\n  }, \"Extrinsics\"))), mdx(\"h3\", {\n    \"id\": \"references\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#references\",\n    \"aria-label\": \"references permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/frame_metadata/index.html\"\n  }, \"Metadata\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/rustdocs/latest/frame_support/attr.pallet.html\"\n  }, \"FRAME v2 macro documentation\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#how-to-get-the-metadata","title":"How to get the metadata","items":[{"url":"#rust","title":"Rust"},{"url":"#javascript","title":"JavaScript"},{"url":"#http--websocket-apis","title":"HTTP & websocket APIs"}]},{"url":"#metadata-formats","title":"Metadata formats","items":[{"url":"#encoded-metadata-format","title":"Encoded metadata format"},{"url":"#decoded-metadata-format","title":"Decoded metadata format"}]},{"url":"#next-steps","title":"Next steps","items":[{"url":"#learn-more","title":"Learn more"},{"url":"#references","title":"References"}]}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/docs/03-runtime/c-metadata/index.mdx"}},"pageContext":{"slug":"/v3/runtime/metadata","version":"3.0","locale":"en","hrefLang":"en-US","originalPath":"/v3/runtime/metadata/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
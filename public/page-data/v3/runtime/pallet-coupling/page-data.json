{
    "componentChunkName": "component---src-templates-kb-template-tsx",
    "path": "/v3/runtime/pallet-coupling/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/v3/runtime/pallet-coupling","title":"Coupling Pallets","hideNav":null,"section":"docs","category":"runtime"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Coupling Pallets\",\n  \"slug\": \"/v3/runtime/pallet-coupling\",\n  \"version\": 3,\n  \"section\": \"docs\",\n  \"category\": \"runtime\",\n  \"keywords\": \"coupling, pallet design\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In computer science, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Coupling_(computer_programming)\"\n  }, \"coupling\"), \"\\nis the degree to which two software modules depend on each other. System designers use the terms high and low coupling to\\ndescribe how computer systems are structured. The term also applies to object oriented programming paradigms, whereby tight\\ncoupling is when two groups of classes are dependant on each other, and loose coupling is when a class uses an interface that\\nanother class exposes.\"), mdx(\"p\", null, \"In Substrate, tight and loose pallet coupling is used to for calling a function that lives inside another pallet.\\nBoth techniques achieve the same thing in different ways, each having certain trade-offs. In a nutshell,\\ntight coupling of pallets should be used in instances where a pallet requires inheriting its coupled counterpart\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"as a whole\"), \" as opposed to specific types or methods. In general, tight coupling makes working with two pallets less\\nflexible and extensible.\"), mdx(\"h2\", {\n    \"id\": \"tightly-coupled-pallets\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#tightly-coupled-pallets\",\n    \"aria-label\": \"tightly coupled pallets permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Tightly coupled pallets\"), mdx(\"p\", null, \"Tightly coupling pallets is more explicit than loosely coupling them. When writing a pallet that\\ntightly couple, you explicitly specify the pallet's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Config\"), \" trait to be bound by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Config\"), \" trait\\nof the other pallet you want to couple with.\"), mdx(\"p\", null, \"Notice that all FRAME pallets are tightly coupled to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frame_system\"), \" pallet. Here's an example\\nof tightly coupling a pallet with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Config\"), \" trait of an imaginary pallet called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"some_pallet\"), \"\\nin addition to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frame_system\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"pub trait Config: frame_system::Config + some_pallet::Config {\\n    // --snip--\\n}\\n\")), mdx(\"p\", null, \"This is very similar to using class inteheritance in object oriented programming.\\nSupplying this trait bound implies that this pallet can only be installed in a runtime that also\\nhas \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"some_pallet\"), \" pallet installed. Similar to with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frame_system\"), \", this approach would require\\nspecifying \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"some_pallet\"), \" in the coupled pallet's \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Cargo.toml\"), \" file.\"), mdx(\"p\", null, \"Tight coupling has several disadvantages developers should take into account:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Maintainability\"), \": changes in one pallet will often result in needing to modify the other pallet.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Reusability\"), \": both modules must be included for one to be used, making it more difficult to\\nintegrate a tightly coupled pallet.\")), mdx(\"h2\", {\n    \"id\": \"loosely-coupled-pallets\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#loosely-coupled-pallets\",\n    \"aria-label\": \"loosely coupled pallets permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Loosely coupled pallets\"), mdx(\"p\", null, \"Unlike tight coupling, in loose coupling pallet we just specify traits and function interfaces that\\ncertain types need to be bound by.\"), mdx(\"p\", null, \"The actual implementation of such types happens \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"outside of the pallet\"), \" during our runtime configuration\\n(usually in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/runtime/src/lib.rs\"), \" file). Here one may choose to configure it with\\nanother pallet that has implemented these traits, or declare a totally new struct,\\nimplement those traits, and assign it when implementing the pallet config in runtime.\"), mdx(\"p\", null, \"Let's go through an example. Say in one pallet we want to tap into one's account balance and\\nmake a transfer to another account. We first define a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Currency\"), \" trait, which has an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"abstract\\nfunction interface\"), \" that is agreed will implement the actual transfer logic later.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"pub trait Currency<AccountId> {\\n    // -- snip --\\n    fn transfer(\\n        source: &AccountId,\\n        dest: &AccountId,\\n        value: Self::Balance,\\n        // don't worry about the last parameter for now\\n        existence_requirement: ExistenceRequirement,\\n    ) -> DispatchResult;\\n}\\n\")), mdx(\"p\", null, \"Then inside our own pallet, we define \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyCurrency\"), \" associated type and bound it by\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Currency<Self::AccountId>\"), \" so we can tap into the balance tranfer logic by calling\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T::MyCurrency::transfer(...)\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"pub trait Config: frame_system::Config {\\n    type MyCurrency: Currency<Self::AccountId>;\\n}\\n\\nimpl<T: Config> Pallet<T> {\\n    pub fn my_function() {\\n        T::MyCurrency::transfer(&buyer, &seller, price, ExistenceRequirement::KeepAlive)?;\\n    }\\n}\\n\")), mdx(\"p\", null, \"Notice that at this point, we have not specified how the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Currency::transfer()\"), \" logic will be implemented.\\nIt is only agreed upon that it will be implemented somewhere.\"), mdx(\"p\", null, \"Now in our runtime configuration (i.e. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"runtime/src/lib.rs\"), \"), we have our runtime implements the\\npallet, and concretely specify the type to be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Balances\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"impl my_pallet::Config for Runtime {\\n    type MyCurrency = Balances;\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Balances\"), \", which is specified in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"construct_runtime!\"), \" macro, is of type\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/pallet_balances/index.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"pallet_balances\")), \"\\nthat \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/pallet_balances/index.html#implementations-1\"\n  }, \"implements \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Currency\"), \" trait\"), \".\"), mdx(\"p\", null, \"By now we have closed the loop and provide on implementation to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Currency<AccountId>\"), \" trait.\"), mdx(\"h2\", {\n    \"id\": \"further-notes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#further-notes\",\n    \"aria-label\": \"further notes permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Further notes\"), mdx(\"p\", null, \"Notice that many FRAME pallets are coupled to this\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/frame_support/traits/tokens/currency/trait.Currency.html\"\n  }, \"Currency trait\"), \"\\nin this way. \"), mdx(\"p\", null, \"In general, loose coupling will provide more flexibility than tight coupling and is considered\\nbetter practice from a system design perspective. It guarantees better maintability, reusability,\\nand extensibility of code. Yet, tight coupling can be a good first choice for scenarios where\\nthe pallets are minimally complex and have more overlap in methods and types than differences.\"), mdx(\"p\", null, \"In FRAME, there exists 2 pallets that are tightly coupled to\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/substrate/tree/master/frame/treasury\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"pallet_treasury\")), \": the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/substrate/tree/master/frame/bounties\"\n  }, \"Bounties pallet\"), \" and the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/substrate/tree/master/frame/tips\"\n  }, \"Tipping pallet\"), \".\"), mdx(\"p\", null, \"As a general rule, the more complex a pallet is, the less desirable it would be to tightly couple\\nit. This evokes a concept in computer science called \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Cohesion_(computer_science)\"\n  }, \"cohesion\"), \",\\na metric used to examine the overall quality of a software system.\"), mdx(\"h2\", {\n    \"id\": \"learn-more\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#learn-more\",\n    \"aria-label\": \"learn more permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Learn more\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Read the Object Oriented Programming Features of Rust section of\\nthe \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://doc.rust-lang.org/book/ch17-00-oop.html\"\n  }, \"Rust Book\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Learn how to use \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/how-to-guides/v3/pallet-design/tight-coupling/\"\n  }, \"loose coupling\"), \" and\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/how-to-guides/v3/pallet-design/loose-coupling/\"\n  }, \"tight coupling\"), \" in your runtimes\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#tightly-coupled-pallets","title":"Tightly coupled pallets"},{"url":"#loosely-coupled-pallets","title":"Loosely coupled pallets"},{"url":"#further-notes","title":"Further notes"},{"url":"#learn-more","title":"Learn more"}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/docs/03-runtime/n-pallet-coupling/index.mdx"}},"pageContext":{"slug":"/v3/runtime/pallet-coupling","version":"3.0","locale":"en","hrefLang":"en-US","originalPath":"/v3/runtime/pallet-coupling/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}
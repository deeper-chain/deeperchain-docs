{
    "componentChunkName": "component---src-templates-kb-template-tsx",
    "path": "/v3/runtime/testing/",
    "result": {"data":{"mdx":{"frontmatter":{"slug":"/v3/runtime/testing","title":"Testing","hideNav":null,"section":"docs","category":"runtime"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Testing\",\n  \"slug\": \"/v3/runtime/testing\",\n  \"version\": 3,\n  \"section\": \"docs\",\n  \"category\": \"runtime\",\n  \"keywords\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Runtime tests allow you to verify the logic in your runtime module by mocking a Substrate runtime\\nenvironment.\"), mdx(\"h2\", {\n    \"id\": \"unit-testing\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#unit-testing\",\n    \"aria-label\": \"unit testing permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Unit testing\"), mdx(\"p\", null, \"Substrate uses the existing\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://doc.rust-lang.org/rust-by-example/testing/unit_testing.html\"\n  }, \"unit testing\"), \" framework\\nprovided by Rust. To run tests, the command is\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"cargo test <optional: test_name>\\n\")), mdx(\"h2\", {\n    \"id\": \"mock-runtime-environment\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#mock-runtime-environment\",\n    \"aria-label\": \"mock runtime environment permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Mock runtime environment\"), mdx(\"p\", null, \"To test a Substrate runtime, construct a mock runtime environment. The configuration type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Test\"), \"\\nis defined as a Rust enum with implementations for each of the pallet configuration trait that are\\nused in the mock runtime.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"frame_support::construct_runtime!(\\n    pub enum Test where\\n        Block = Block,\\n        NodeBlock = Block,\\n        UncheckedExtrinsic = UncheckedExtrinsic,\\n    {\\n        System: frame_system::{Pallet, Call, Config, Storage, Event<T>},\\n        TemplateModule: pallet_template::{Pallet, Call, Storage, Event<T>},\\n    }\\n);\\n\\nimpl frame_system::Config for Test {\\n    // -- snip --\\n    type AccountId = u64;\\n}\\n\")), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Test\"), \" implements \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pallet_balances::Config\"), \", the assignment might use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"u64\"), \" for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Balance\"), \" type.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"impl pallet_balances::Config for Test {\\n    // -- snip --\\n    type Balance = u64;\\n}\\n\")), mdx(\"p\", null, \"By assigning \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pallet_balances::Balance\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frame_system::AccountId\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"u64\"), \", mock runtimes ease\\nthe mental overhead of comprehensive, conscientious testers. Reasoning about accounts and balances\\nonly requires tracking a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(AccountId: u64, Balance: u64)\"), \" mapping.\"), mdx(\"h3\", {\n    \"id\": \"mock-runtime-storage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#mock-runtime-storage\",\n    \"aria-label\": \"mock runtime storage permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Mock runtime storage\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sp_io/index.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"sp-io\")), \" crate exposes a\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sp_io/type.TestExternalities.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"TestExternalities\")), \"\\nimplementation frequently used for mocking storage in tests. It is the type alias for an in-memory,\\nhashmap-based externalities implementation in\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sp_state_machine/index.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"substrate_state_machine\")), \" referred to as\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sp_state_machine/struct.TestExternalities.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"TestExternalities\")), \".\"), mdx(\"p\", null, \"This example demonstrates defining a struct called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ExtBuilder\"), \" to build an instance of\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestExternalities\"), \", and setting the block number to 1.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"pub struct ExtBuilder;\\n\\nimpl ExtBuilder {\\n    pub fn build(self) -> sp_io::TestExternalities {\\n        let mut t = system::GenesisConfig::default().build_storage::<TestRuntime>().unwrap();\\n        let mut ext = sp_io::TestExternalities::new(t);\\n        ext.execute_with(|| System::set_block_number(1));\\n        ext\\n    }\\n}\\n\")), mdx(\"p\", null, \"To create the test environment in unit tests, the build method is called to generate a\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestExternalities\"), \" using the default genesis configuration.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[test]\\nfn fake_test_example() {\\n    ExtBuilder::default().build_and_execute(|| {\\n        // ...test logics...\\n    });\\n}\\n\")), mdx(\"p\", null, \"Custom implementations of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sp_externalities/index.html\"\n  }, \"Externalities\"), \" allow developers\\nto construct runtime environments that provide access to features of the outer node. Another example\\nof this can be found in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sp_core/offchain/index.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"offchain\")), \", which maintains its own\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/sp_core/offchain/trait.Externalities.html\"\n  }, \"Externalities\"), \" implementation.\"), mdx(\"h4\", null, \"Genesis config\"), mdx(\"p\", null, \"The previously shown \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ExtBuilder::build()\"), \" method used the default genesis configuration for\\nbuilding the mock runtime environment. In many cases, it is convenient to set storage before\\ntesting.\"), mdx(\"p\", null, \"An example might involve pre-seeding account balances before testing.\"), mdx(\"p\", null, \"In the implementation of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frame_system::Config\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountId\"), \" is set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"u64\"), \" just like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Balance\"), \" shown\\nabove. Place \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(u64, u64)\"), \" pairs in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"balances\"), \" vec to seed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(AccountId, Balance)\"), \" pairs as the\\naccount balances.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"impl ExtBuilder {\\n    pub fn build(self) -> sp_io::TestExternalities {\\n        let mut t = frame_system::GenesisConfig::default().build_storage::<Test>().unwrap();\\n        pallet_balances::GenesisConfig::<Test> {\\n            balances: vec![\\n                (1, 10),\\n                (2, 20),\\n                (3, 30),\\n                (4, 40),\\n                (5, 50),\\n                (6, 60)\\n            ],\\n        }\\n            .assimilate_storage(&mut t)\\n            .unwrap();\\n\\n        let mut ext = sp_io::TestExternalities::new(t);\\n        ext.execute_with(|| System::set_block_number(1));\\n        ext\\n    }\\n}\\n\")), mdx(\"p\", null, \"Account 1 has balance 10, account 2 has balance 20, and so on.\"), mdx(\"p\", null, \"The exact struct of how to define the genesis config of a certain pallet depends on the pallet\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GenesisConfig\"), \" struct definition. For Balances Pallet, as shown\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/rustdocs/latest/pallet_balances/pallet/struct.GenesisConfig.html\"\n  }, \"in the rustdocs\"), \", it is defined\\nas:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"pub struct GenesisConfig<T: Config<I>, I: 'static = ()> {\\n    pub balances: Vec<(T::AccountId, T::Balance)>,\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"block-production\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#block-production\",\n    \"aria-label\": \"block production permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Block production\"), mdx(\"p\", null, \"It will be useful to simulate block production to verify that expected behavior holds across block\\nproduction.\"), mdx(\"p\", null, \"A simple way of doing this is by incrementing the System module's block number between \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on_initialize\"), \" and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on_finalize\"), \" calls from all modules with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"System::block_number()\"), \" as the sole input. While it is\\nimportant for runtime code to cache calls to storage or\\nthe system module, the test environment scaffolding should prioritize readability to facilitate\\nfuture maintenance.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"fn run_to_block(n: u64) {\\n    while System::block_number() < n {\\n        if System::block_number() > 1 {\\n            ExamplePallet::on_finalize(System::block_number());\\n            System::on_finalize(System::block_number());\\n        }\\n        System::set_block_number(System::block_number() + 1);\\n        System::on_initialize(System::block_number());\\n        ExamplePallet::on_initialize(System::block_number());\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on_finalize\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on_initialize\"), \" are only called from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ExamplePallet\"), \" if the pallet trait\\nimplements the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frame_support::traits::{OnInitialize, OnFinalize}\"), \" traits to execute the logic\\nencoded in the runtime methods before and after each block respectively.\"), mdx(\"p\", null, \"Then call this function in the following fashion.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"#[test]\\nfn my_runtime_test() {\\n    with_externalities(&mut new_test_ext(), || {\\n        assert_ok!(ExamplePallet::start_auction());\\n        run_to_block(10);\\n        assert_ok!(ExamplePallet::end_auction());\\n    });\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"learn-more\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#learn-more\",\n    \"aria-label\": \"learn more permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"className\": \"fill-current text-substrateDark dark:text-white\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Learn more\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Learn how to set up tests for your pallet with \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/how-to-guides/v3/testing/basics/\"\n  }, \"this guide\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#unit-testing","title":"Unit testing"},{"url":"#mock-runtime-environment","title":"Mock runtime environment","items":[{"url":"#mock-runtime-storage","title":"Mock runtime storage"},{"url":"#block-production","title":"Block production"}]},{"url":"#learn-more","title":"Learn more"}]},"fileAbsolutePath":"/Users/a212/Desktop/substrate-docs/v3/docs/03-runtime/k-testing/index.mdx"}},"pageContext":{"slug":"/v3/runtime/testing","version":"3.0","locale":"en","hrefLang":"en-US","originalPath":"/v3/runtime/testing/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","1821483254","2966362950","3280999885"]}